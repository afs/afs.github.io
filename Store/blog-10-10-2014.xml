<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-18002060.archive</id><updated>2014-10-03T07:50:09.118+01:00</updated><title type='text'>ARQtick</title><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/archive'/><link rel='self' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/archive'/><link rel='http://schemas.google.com/g/2005#post' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/archive'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><entry><id>tag:blogger.com,1999:blog-18002060.layout</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#template'/><title type='text'>Template: ARQtick</title><content type='text'>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html expr:dir='data:blog.languageDirection' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'&gt;
  &lt;head&gt;
    &lt;b:include data='blog' name='all-head-content'/&gt;
    &lt;title&gt;&lt;data:blog.pageTitle/&gt;&lt;/title&gt;
    &lt;b:skin&gt;&lt;![CDATA[/*
-----------------------------------------------
Blogger Template Style
Name:     Stretch Denim
Designer: Darren Delaye
URL:      www.DarrenDelaye.com
Date:     11 Jul 2006
-----------------------------------------------
*/

/* Variable definitions
   ====================
 &lt;Variable name="bgColor" description="Page Background Color"
           type="color" default="#efefef" value="#efefef"&gt;
 &lt;Variable name="textColor" description="Text Color"
           type="color" default="#333333" value="#333333"&gt;
 &lt;Variable name="linkColor" description="Link Color"
           type="color" default="#336699" value="#336699"&gt;

 &lt;Variable name="headerBgColor" description="Page Header Background Color"
           type="color" default="#336699" value="#336699"&gt;
 &lt;Variable name="headerTextColor" description="Page Header Text Color"
           type="color" default="#ffffff" value="#ffffff"&gt; 
 &lt;Variable name="headerCornersColor" description="Page Header Corners Color"
           type="color" default="#528bc5" value="#528bc5"&gt;

 &lt;Variable name="mainBgColor" description="Main Background Color"
           type="color" default="#ffffff" value="#ffffff"&gt;
 &lt;Variable name="borderColor" description="Border Color"
           type="color" default="#cccccc" value="#cccccc"&gt;
 &lt;Variable name="dateHeaderColor" description="Date Header Color"
           type="color" default="#999999" value="#999999"&gt;

 &lt;Variable name="sidebarTitleBgColor" description="Sidebar Title Background Color"
           type="color" default="#ffd595" value="#ffd595"&gt;
 &lt;Variable name="sidebarTitleTextColor" description="Sidebar Title Text Color"
           type="color" default="#333333" value="#333333"&gt;
 
 &lt;Variable name="bodyFont" description="Text Font"
           type="font" default="normal normal 100% Verdana, Arial, Sans-serif;" value="normal normal 100% Verdana, Arial, Sans-serif;"&gt;
 &lt;Variable name="headerFont" description="Page Header Font"
           type="font" default="normal normal 210% Verdana, Arial, Sans-serif;" value="normal normal 210% Verdana, Arial, Sans-serif;"&gt;

   &lt;Variable name="startSide" description="Start side in blog language"
             type="automatic" default="left" value="left"&gt;
   &lt;Variable name="endSide" description="End side in blog language"
             type="automatic" default="right" value="right"&gt;
*/

body {
  background: $bgColor;
  margin: 0;
  padding: 0px;
  font: x-small Verdana, Arial;
  text-align: center;
  color: $textColor;
  font-size/* */:/**/small;
  font-size: /**/small;
}
a:link {
  color: $linkColor;
}
a:visited {
  color: $linkColor;
}
a img {
  border-width: 0;
}

#outer-wrapper { 
  font: $bodyFont;
}

/* Header
----------------------------------------------- */
#header-wrapper {
  margin:0;
  padding: 0;
  background-color: $headerCornersColor;
  text-align: $startSide;
}

#header {
  margin: 0 2%;
  background-color: $headerBgColor;
  color: $headerTextColor;
  padding: 0;
  font: $headerFont;
  position: relative;
}

h1.title {
  padding-top: 38px;
  margin: 0 1% .1em;
  line-height: 1.2em;
  font-size: 100%;
}

h1.title a, h1.title a:visited {
  color: $headerTextColor;
  text-decoration: none;
}

#header .description {
  display: block;
  margin: 0 1%;
  padding: 0 0 40px;
  line-height: 1.4em;
  font-size: 50%;
}
                                                              
/* Content
----------------------------------------------- */

.clear { 
  clear: both;
}


#content-wrapper {
  margin: 0 2%;
  padding: 0 0 15px;
  text-align: $startSide;
  background-color: $mainBgColor;
  border: 1px solid $borderColor;
  border-top: 0;
}
#main-wrapper {
  margin-$startSide: 1%;
  width: 64%;
  float: $startSide;
  background-color: $mainBgColor;
  display: inline;       /* fix for doubling margin in IE */
  word-wrap: break-word; /* fix for long text breaking sidebar float in IE */
  overflow: hidden;      /* fix for long non-text content breaking IE sidebar float */
}
#sidebar-wrapper {
  margin-$endSide: 1%;
  width: 29%;
  float: $endSide;
  background-color: $mainBgColor;
  display: inline;       /* fix for doubling margin in IE */
  word-wrap: break-word; /* fix for long text breaking sidebar float in IE */
  overflow: hidden;      /* fix for long non-text content breaking IE sidebar float */
}

/* Headings
----------------------------------------------- */
h2, h3 {
  margin: 0;
}

/* Posts
----------------------------------------------- */
.date-header {
  margin: 1.5em 0 0;
  font-weight: normal;
  color: $dateHeaderColor;
  font-size: 100%;
}
.post {
  margin: 0 0 1.5em;
  padding-bottom: 1.5em;
}
.post-title {
  margin: 0;
  padding: 0;
  font-size: 125%;
  font-weight: bold;
  line-height: 1.1em;
}
.post-title a, .post-title a:visited, .post-title strong {
  text-decoration: none;
  color: $textColor;
  font-weight: bold;
}
.post div {
  margin: 0 0 .75em;
  line-height: 1.3em;
}

.post-footer {
  margin: -.25em 0 0;
  color: $textColor;
  font-size: 87%;
}

.post-footer .span {
  margin-$endSide: .3em;
}
.post img, table.tr-caption-container {
  padding: 4px;
  border: 1px solid $borderColor;
}
.tr-caption-container img {
  border: none;
  padding: 0;
}
.post blockquote {
  margin: 1em 20px;
}
.post blockquote p {
  margin: .75em 0;
}

/* Comments
----------------------------------------------- */
#comments h4 {
  margin: 1em 0;
  color: $dateHeaderColor;
}
#comments h4 strong {
  font-size: 110%;
}
#comments-block {
  margin: 1em 0 1.5em;
  line-height: 1.3em;
}
#comments-block dt {
  margin: .5em 0;
}
#comments-block dd {
  margin: .25em 0 0;
}
#comments-block dd.comment-footer {
  margin: -.25em 0 2em;
  line-height: 1.4em;
  font-size: 78%;
}
#comments-block dd p {
  margin: 0 0 .75em;
}

.deleted-comment {
  font-style:italic;
  color:gray;
}

.feed-links {
  clear: both;
  line-height: 2.5em;
}

#blog-pager-newer-link {
  float: $startSide;
 }

#blog-pager-older-link {
  float: $endSide;
 }
 
#blog-pager {   
  text-align: center; 
 }

/* Sidebar Content
----------------------------------------------- */
.sidebar h2 {
 margin: 1.6em 0 .5em;
 padding: 4px 5px;
 background-color: $sidebarTitleBgColor;
 font-size: 100%;
 color: $sidebarTitleTextColor;
}
                                                              
.sidebar ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
.sidebar li {
  margin: 0;
  padding-top: 0;
  padding-$endSide: 0;
  padding-bottom: .5em;
  padding-$startSide: 15px;
  text-indent: -15px;
  line-height: 1.5em;
}
.sidebar {
  color: $textColor;
  line-height:1.3em; 
}
.sidebar .widget { 
  margin-bottom: 1em;
}

.sidebar .widget-content {
  margin: 0 5px;
}

/* Profile 
----------------------------------------------- */
.profile-img { 
  float: $startSide;
  margin-top: 0;
  margin-$endSide: 5px;
  margin-bottom: 5px;
  margin-$startSide: 0;
  padding: 4px;
  border: 1px solid $borderColor;
}

.profile-data {
  margin:0;
  text-transform:uppercase;
  letter-spacing:.1em;
  font-weight: bold;
  line-height: 1.6em;
  font-size: 78%;
}

.profile-datablock {
  margin:.5em 0 .5em;
}

.profile-textblock {
  margin: 0.5em 0;
  line-height: 1.6em;
}

                                                              
/* Footer
----------------------------------------------- */
#footer {
  clear: both;
  text-align: center;
  color: $textColor;
}

#footer .widget {
  margin:.5em;
  padding-top: 20px;
  font-size: 85%;
  line-height: 1.5em;
  text-align: $startSide;
}

/** Page structure tweaks for layout editor wireframe */
body#layout #header { 
  width: 750px;
}
]]&gt;&lt;/b:skin&gt;
    &lt;b:include data='blog' name='google-analytics'/&gt;
  &lt;/head&gt;

  &lt;body&gt;
  &lt;b:section class='navbar' id='navbar' maxwidgets='1' showaddelement='no'&gt;
    &lt;b:widget id='Navbar1' locked='true' title='Navbar' type='Navbar'&gt;
      &lt;b:includable id='main'&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener(&amp;#39;load&amp;#39;,
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent(&amp;#39;onload&amp;#39;, function(){ object[attribute] = val; });
      }
    }
  &amp;lt;/script&amp;gt;
&amp;lt;div id=&amp;quot;navbar-iframe-container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://apis.google.com/js/plusone.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        gapi.load(&amp;quot;gapi.iframes:gapi.iframes.style.bubble&amp;quot;, function() {
          if (gapi.iframes &amp;amp;&amp;amp; gapi.iframes.getContext) {
            gapi.iframes.getContext().openChild({
                url: &amp;#39;https://www.blogger.com/navbar.g?targetBlogID\07518002060\46blogName\75ARQtick\46publishMode\75PUBLISH_MODE_BLOGSPOT\46navbarType\75SILVER\46layoutType\75LAYOUTS\46searchRoot\75http://seaborne.blogspot.com/search\46blogLocale\75en_GB\46v\0752\46homepageUrl\75http://seaborne.blogspot.com/\46vt\75-2396704453596330375&amp;#39;,
                where: document.getElementById(&amp;quot;navbar-iframe-container&amp;quot;),
                id: &amp;quot;navbar-iframe&amp;quot;
            });
          }
        });
      &amp;lt;/script&amp;gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
(function() {
var script = document.createElement(&amp;#39;script&amp;#39;);
script.type = &amp;#39;text/javascript&amp;#39;;
script.src = &amp;#39;//pagead2.googlesyndication.com/pagead/js/google_top_exp.js&amp;#39;;
var head = document.getElementsByTagName(&amp;#39;head&amp;#39;)[0];
if (head) {
head.appendChild(script);
}})();
&amp;lt;/script&amp;gt;
&lt;/b:includable&gt;
    &lt;/b:widget&gt;
  &lt;/b:section&gt;

  &lt;div id='outer-wrapper'&gt;&lt;div id='wrap2'&gt;

    &lt;!-- skip links for text browsers --&gt;
    &lt;span id='skiplinks' style='display:none;'&gt;
      &lt;a href='#main'&gt;skip to main &lt;/a&gt; |
      &lt;a href='#sidebar'&gt;skip to sidebar&lt;/a&gt;
    &lt;/span&gt;

    &lt;div id='header-wrapper'&gt;
      &lt;b:section class='header' id='header' maxwidgets='1' showaddelement='no'&gt;
        &lt;b:widget id='Header1' locked='true' title='ARQtick (Header)' type='Header'&gt;
          &lt;b:includable id='main'&gt;

  &lt;b:if cond='data:useImage'&gt;
    &lt;b:if cond='data:imagePlacement == &amp;quot;BEHIND&amp;quot;'&gt;
      &lt;!--
      Show image as background to text. You can't really calculate the width
      reliably in JS because margins are not taken into account by any of
      clientWidth, offsetWidth or scrollWidth, so we don't force a minimum
      width if the user is using shrink to fit.
      This results in a margin-width's worth of pixels being cropped. If the
      user is not using shrink to fit then we expand the header.
      --&gt;
      &lt;b:if cond='data:mobile'&gt;
          &lt;div id='header-inner'&gt;
            &lt;div class='titlewrapper' style='background: transparent'&gt;
              &lt;h1 class='title' style='background: transparent; border-width: 0px'&gt;
                &lt;b:include name='title'/&gt;
              &lt;/h1&gt;
            &lt;/div&gt;
            &lt;b:include name='description'/&gt;
          &lt;/div&gt;
        &lt;b:else/&gt;
          &lt;div expr:style='&amp;quot;background-image: url(\&amp;quot;&amp;quot; + data:sourceUrl + &amp;quot;\&amp;quot;); &amp;quot;                        + &amp;quot;background-position: &amp;quot;                        + data:backgroundPositionStyleStr + &amp;quot;; &amp;quot;                        + data:widthStyleStr                        + &amp;quot;min-height: &amp;quot; + data:height                        + &amp;quot;_height: &amp;quot; + data:height                        + &amp;quot;background-repeat: no-repeat; &amp;quot;' id='header-inner'&gt;
            &lt;div class='titlewrapper' style='background: transparent'&gt;
              &lt;h1 class='title' style='background: transparent; border-width: 0px'&gt;
                &lt;b:include name='title'/&gt;
              &lt;/h1&gt;
            &lt;/div&gt;
            &lt;b:include name='description'/&gt;
          &lt;/div&gt;
        &lt;/b:if&gt;
    &lt;b:else/&gt;
      &lt;!--Show the image only--&gt;
      &lt;div id='header-inner'&gt;
        &lt;a expr:href='data:blog.homepageUrl' style='display: block'&gt;
          &lt;img expr:alt='data:title' expr:height='data:height' expr:id='data:widget.instanceId + &amp;quot;_headerimg&amp;quot;' expr:src='data:sourceUrl' expr:width='data:width' style='display: block'/&gt;
        &lt;/a&gt;
        &lt;!--Show the description--&gt;
        &lt;b:if cond='data:imagePlacement == &amp;quot;BEFORE_DESCRIPTION&amp;quot;'&gt;
          &lt;b:include name='description'/&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;
  &lt;b:else/&gt;
    &lt;!--No header image --&gt;
    &lt;div id='header-inner'&gt;
      &lt;div class='titlewrapper'&gt;
        &lt;h1 class='title'&gt;
          &lt;b:include name='title'/&gt;
        &lt;/h1&gt;
      &lt;/div&gt;
      &lt;b:include name='description'/&gt;
    &lt;/div&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
          &lt;b:includable id='description'&gt;
  &lt;div class='descriptionwrapper'&gt;
    &lt;p class='description'&gt;&lt;span&gt;&lt;data:description/&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
          &lt;b:includable id='title'&gt;
  &lt;b:if cond='data:blog.url == data:blog.homepageUrl'&gt;
    &lt;data:title/&gt;
  &lt;b:else/&gt;
    &lt;a expr:href='data:blog.homepageUrl'&gt;&lt;data:title/&gt;&lt;/a&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
        &lt;/b:widget&gt;
      &lt;/b:section&gt;
    &lt;/div&gt;

    &lt;div id='content-wrapper'&gt;

      &lt;div id='crosscol-wrapper' style='text-align:center'&gt;
        &lt;b:section class='crosscol' id='crosscol'/&gt;
      &lt;/div&gt;

      &lt;div id='main-wrapper'&gt;
        &lt;b:section class='main' id='main' showaddelement='no'&gt;
          &lt;b:widget id='Blog1' locked='true' title='Blog Posts' type='Blog'&gt;
            &lt;b:includable id='main' var='top'&gt;
  &lt;b:if cond='data:mobile == &amp;quot;false&amp;quot;'&gt;

    &lt;!-- posts --&gt;
    &lt;div class='blog-posts hfeed'&gt;

      &lt;b:include data='top' name='status-message'/&gt;

      &lt;data:defaultAdStart/&gt;
      &lt;b:loop values='data:posts' var='post'&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &lt;b:if cond='data:post.isFirstPost == &amp;quot;false&amp;quot;'&gt;
            &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &amp;lt;div class=&amp;quot;date-outer&amp;quot;&amp;gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.dateHeader'&gt;
          &lt;h2 class='date-header'&gt;&lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;&lt;/h2&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &amp;lt;div class=&amp;quot;date-posts&amp;quot;&amp;gt;
        &lt;/b:if&gt;
        &lt;div class='post-outer'&gt;
        &lt;b:include data='post' name='post'/&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;static_page&amp;quot;'&gt;
          &lt;b:include data='post' name='comment_picker'/&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
          &lt;b:include data='post' name='comment_picker'/&gt;
        &lt;/b:if&gt;
        &lt;/div&gt;
        &lt;b:if cond='data:post.includeAd'&gt;
          &lt;b:if cond='data:post.isFirstPost'&gt;
            &lt;data:defaultAdEnd/&gt;
          &lt;b:else/&gt;
            &lt;data:adEnd/&gt;
          &lt;/b:if&gt;
          &lt;div class='inline-ad'&gt;
            &lt;data:adCode/&gt;
          &lt;/div&gt;
          &lt;data:adStart/&gt;
        &lt;/b:if&gt;
      &lt;/b:loop&gt;
      &lt;b:if cond='data:numPosts != 0'&gt;
        &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
      &lt;/b:if&gt;
      &lt;data:adEnd/&gt;
    &lt;/div&gt;

    &lt;!-- navigation --&gt;
    &lt;b:include name='nextprev'/&gt;

    &lt;!-- feed links --&gt;
    &lt;b:include name='feedLinks'/&gt;

    &lt;b:if cond='data:top.showStars'&gt;
      &lt;script src='//www.google.com/jsapi' type='text/javascript'/&gt;
      &lt;script type='text/javascript'&gt;
        google.load(&amp;quot;annotations&amp;quot;, &amp;quot;1&amp;quot;, {&amp;quot;locale&amp;quot;: &amp;quot;&lt;data:top.languageCode/&gt;&amp;quot;});
        function initialize() {
          google.annotations.setApplicationId(&lt;data:top.blogspotReviews/&gt;);
          google.annotations.createAll();
          google.annotations.fetch();
        }
        google.setOnLoadCallback(initialize);
      &lt;/script&gt;
    &lt;/b:if&gt;

  &lt;b:else/&gt;
    &lt;b:include name='mobile-main'/&gt;
  &lt;/b:if&gt;

  &lt;b:if cond='data:top.showDummy'&gt;
    &lt;data:top.dummyBootstrap/&gt;
  &lt;/b:if&gt;

&lt;/b:includable&gt;
            &lt;b:includable id='backlinkDeleteIcon' var='backlink'&gt;
  &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:backlink.adminClass'&gt;
    &lt;a expr:href='data:backlink.deleteUrl' expr:title='data:top.deleteBacklinkMsg'&gt;
      &lt;img src='//www.blogger.com/img/icon_delete13.gif'/&gt;
    &lt;/a&gt;
  &lt;/span&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='backlinks' var='post'&gt;
  &lt;a name='links'/&gt;&lt;h4&gt;&lt;data:post.backlinksLabel/&gt;&lt;/h4&gt;
  &lt;b:if cond='data:post.numBacklinks != 0'&gt;
    &lt;dl class='comments-block' id='comments-block'&gt;
      &lt;b:loop values='data:post.backlinks' var='backlink'&gt;
        &lt;div class='collapsed-backlink backlink-control'&gt;
          &lt;dt class='comment-title'&gt;
            &lt;span class='backlink-toggle-zippy'&gt;&amp;#160;&lt;/span&gt;
            &lt;a expr:href='data:backlink.url' rel='nofollow'&gt;&lt;data:backlink.title/&gt;&lt;/a&gt;
            &lt;b:include data='backlink' name='backlinkDeleteIcon'/&gt;
          &lt;/dt&gt;
          &lt;dd class='comment-body collapseable'&gt;
            &lt;data:backlink.snippet/&gt;
          &lt;/dd&gt;
          &lt;dd class='comment-footer collapseable'&gt;
            &lt;span class='comment-author'&gt;&lt;data:post.authorLabel/&gt; &lt;data:backlink.author/&gt;&lt;/span&gt;
            &lt;span class='comment-timestamp'&gt;&lt;data:post.timestampLabel/&gt; &lt;data:backlink.timestamp/&gt;&lt;/span&gt;
          &lt;/dd&gt;
        &lt;/div&gt;
      &lt;/b:loop&gt;
    &lt;/dl&gt;
  &lt;/b:if&gt;
  &lt;p class='comment-footer'&gt;
    &lt;a class='comment-link' expr:href='data:post.createLinkUrl' expr:id='data:widget.instanceId + &amp;quot;_backlinks-create-link&amp;quot;' target='_blank'&gt;&lt;data:post.createLinkLabel/&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='comment-form' var='post'&gt;
  &lt;div class='comment-form'&gt;
    &lt;a name='comment-form'/&gt;
    &lt;b:if cond='data:mobile'&gt;
      &lt;h4 id='comment-post-message'&gt;
        &lt;a expr:id='data:widget.instanceId + &amp;quot;_comment-editor-toggle-link&amp;quot;' href='javascript:void(0)'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;&lt;/h4&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/&gt;
    &lt;b:else/&gt;
      &lt;h4 id='comment-post-message'&gt;&lt;data:postCommentMsg/&gt;&lt;/h4&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' width='100%'/&gt;
    &lt;/b:if&gt;
    &lt;data:post.friendConnectJs/&gt;
    &lt;data:post.cmtfpIframe/&gt;
    &lt;script type='text/javascript'&gt;
      BLOG_CMT_createIframe(&amp;#39;&lt;data:post.appRpcRelayPath/&gt;&amp;#39;);
    &lt;/script&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='commentDeleteIcon' var='comment'&gt;
  &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:comment.adminClass'&gt;
    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div class='goog-toggle-button'&gt;
        &lt;div class='goog-inline-block comment-action-icon'/&gt;
      &lt;/div&gt;
    &lt;b:else/&gt;
      &lt;a class='comment-delete' expr:href='data:comment.deleteUrl' expr:title='data:top.deleteCommentMsg'&gt;
        &lt;img src='//www.blogger.com/img/icon_delete13.gif'/&gt;
      &lt;/a&gt;
    &lt;/b:if&gt;
  &lt;/span&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='comment_count_picker' var='post'&gt;
  &lt;b:if cond='data:post.commentSource == 1'&gt;
    &lt;span class='cmt_count_iframe_holder' expr:data-count='data:post.numComments' expr:data-onclick='data:post.addCommentOnclick' expr:data-post-url='data:post.url' expr:data-url='data:post.canonicalUrl'&gt;
    &lt;/span&gt;
  &lt;b:else/&gt;
    &lt;a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;
      &lt;data:post.commentLabelFull/&gt;:
    &lt;/a&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='comment_picker' var='post'&gt;
  &lt;b:if cond='data:post.commentSource == 1'&gt;
    &lt;b:include data='post' name='iframe_comments'/&gt;
  &lt;b:else/&gt;
    &lt;b:if cond='data:post.showThreadedComments'&gt;
      &lt;b:include data='post' name='threaded_comments'/&gt;
    &lt;b:else/&gt;
      &lt;b:include data='post' name='comments'/&gt;
    &lt;/b:if&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='comments' var='post'&gt;
  &lt;div class='comments' id='comments'&gt;
    &lt;a name='comments'/&gt;
    &lt;b:if cond='data:post.allowComments'&gt;
      &lt;h4&gt;&lt;data:post.commentLabelFull/&gt;:&lt;/h4&gt;

      &lt;b:if cond='data:post.commentPagingRequired'&gt;
        &lt;span class='paging-control-container'&gt;
          &lt;b:if cond='data:post.hasOlderLinks'&gt;
            &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'&gt;&lt;data:post.oldestLinkText/&gt;&lt;/a&gt;
              &amp;#160;
            &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'&gt;&lt;data:post.olderLinkText/&gt;&lt;/a&gt;
              &amp;#160;
          &lt;/b:if&gt;

          &lt;data:post.commentRangeText/&gt;

          &lt;b:if cond='data:post.hasNewerLinks'&gt;
            &amp;#160;
            &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'&gt;&lt;data:post.newerLinkText/&gt;&lt;/a&gt;
            &amp;#160;
            &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'&gt;&lt;data:post.newestLinkText/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/span&gt;
      &lt;/b:if&gt;

      &lt;div expr:id='data:widget.instanceId + &amp;quot;_comments-block-wrapper&amp;quot;'&gt;
        &lt;dl expr:class='data:post.avatarIndentClass' id='comments-block'&gt;
          &lt;b:loop values='data:post.comments' var='comment'&gt;
            &lt;dt expr:class='&amp;quot;comment-author &amp;quot; + data:comment.authorClass' expr:id='data:comment.anchorName'&gt;
              &lt;b:if cond='data:comment.favicon'&gt;
                &lt;img expr:src='data:comment.favicon' height='16px' style='margin-bottom:-2px;' width='16px'/&gt;
              &lt;/b:if&gt;
              &lt;a expr:name='data:comment.anchorName'/&gt;
              &lt;b:if cond='data:blog.enabledCommentProfileImages'&gt;
                &lt;data:comment.authorAvatarImage/&gt;
              &lt;/b:if&gt;
              &lt;b:if cond='data:comment.authorUrl'&gt;
                &lt;a expr:href='data:comment.authorUrl' rel='nofollow'&gt;&lt;data:comment.author/&gt;&lt;/a&gt;
              &lt;b:else/&gt;
                &lt;data:comment.author/&gt;
              &lt;/b:if&gt;
              &lt;data:commentPostedByMsg/&gt;
            &lt;/dt&gt;
            &lt;dd class='comment-body' expr:id='data:widget.instanceId + data:comment.cmtBodyIdPostfix'&gt;
              &lt;b:if cond='data:comment.isDeleted'&gt;
                &lt;span class='deleted-comment'&gt;&lt;data:comment.body/&gt;&lt;/span&gt;
              &lt;b:else/&gt;
                &lt;p&gt;
                  &lt;data:comment.body/&gt;
                &lt;/p&gt;
              &lt;/b:if&gt;
            &lt;/dd&gt;
            &lt;dd class='comment-footer'&gt;
              &lt;span class='comment-timestamp'&gt;
                &lt;a expr:href='data:comment.url' title='comment permalink'&gt;
                  &lt;data:comment.timestamp/&gt;
                &lt;/a&gt;
                &lt;b:include data='comment' name='commentDeleteIcon'/&gt;
              &lt;/span&gt;
            &lt;/dd&gt;
          &lt;/b:loop&gt;
        &lt;/dl&gt;
      &lt;/div&gt;

      &lt;b:if cond='data:post.commentPagingRequired'&gt;
        &lt;span class='paging-control-container'&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'&gt;
            &lt;data:post.oldestLinkText/&gt;
          &lt;/a&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'&gt;
            &lt;data:post.olderLinkText/&gt;
          &lt;/a&gt;
          &amp;#160;
          &lt;data:post.commentRangeText/&gt;
          &amp;#160;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'&gt;
            &lt;data:post.newerLinkText/&gt;
          &lt;/a&gt;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'&gt;
            &lt;data:post.newestLinkText/&gt;
          &lt;/a&gt;
        &lt;/span&gt;
      &lt;/b:if&gt;

      &lt;p class='comment-footer'&gt;
        &lt;b:if cond='data:post.embedCommentForm'&gt;
          &lt;b:if cond='data:post.allowNewComments'&gt;
            &lt;b:include data='post' name='comment-form'/&gt;
          &lt;b:else/&gt;
            &lt;data:post.noNewCommentsText/&gt;
          &lt;/b:if&gt;
        &lt;b:else/&gt;
          &lt;b:if cond='data:post.allowComments'&gt;
            &lt;a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;

      &lt;/p&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div id='comment-popup'&gt;
        &lt;iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'&gt;
        &lt;/iframe&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div id='backlinks-container'&gt;
    &lt;div expr:id='data:widget.instanceId + &amp;quot;_backlinks-container&amp;quot;'&gt;
       &lt;b:if cond='data:post.showBacklinks'&gt;
         &lt;b:include data='post' name='backlinks'/&gt;
       &lt;/b:if&gt;
    &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='feedLinks'&gt;
  &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt; &lt;!-- Blog feed links --&gt;
    &lt;b:if cond='data:feedLinks'&gt;
      &lt;div class='blog-feeds'&gt;
        &lt;b:include data='feedLinks' name='feedLinksBody'/&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;b:else/&gt; &lt;!--Post feed links --&gt;
    &lt;div class='post-feeds'&gt;
      &lt;b:loop values='data:posts' var='post'&gt;
        &lt;b:if cond='data:post.allowComments'&gt;
          &lt;b:if cond='data:post.feedLinks'&gt;
            &lt;b:include data='post.feedLinks' name='feedLinksBody'/&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/b:loop&gt;
    &lt;/div&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='feedLinksBody' var='links'&gt;
  &lt;div class='feed-links'&gt;
  &lt;data:feedLinksMsg/&gt;
  &lt;b:loop values='data:links' var='f'&gt;
     &lt;a class='feed-link' expr:href='data:f.url' expr:type='data:f.mimeType' target='_blank'&gt;&lt;data:f.name/&gt; (&lt;data:f.feedType/&gt;)&lt;/a&gt;
  &lt;/b:loop&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='iframe_comments' var='post'&gt;

  &lt;b:if cond='data:post.allowIframeComments'&gt;
    &lt;script expr:src='data:post.iframeCommentSrc' type='text/javascript'/&gt;
    &lt;div class='cmt_iframe_holder' expr:data-href='data:post.canonicalUrl' expr:data-viewtype='data:post.viewType'/&gt;

    &lt;b:if cond='data:post.embedCommentForm == &amp;quot;false&amp;quot;'&gt;
      &lt;a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;
    &lt;/b:if&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='mobile-index-post' var='post'&gt;
  &lt;div class='mobile-date-outer date-outer'&gt;
    &lt;b:if cond='data:post.dateHeader'&gt;
      &lt;div class='date-header'&gt;
        &lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div class='mobile-post-outer'&gt;
      &lt;a expr:href='data:post.url'&gt;
        &lt;h3 class='mobile-index-title entry-title' itemprop='name'&gt;
          &lt;data:post.title/&gt;
        &lt;/h3&gt;

        &lt;div class='mobile-index-arrow'&gt;&amp;amp;rsaquo;&lt;/div&gt;

        &lt;div class='mobile-index-contents'&gt;
          &lt;b:if cond='data:post.thumbnailUrl'&gt;
            &lt;div class='mobile-index-thumbnail'&gt;
              &lt;div class='Image'&gt;
                &lt;img expr:src='data:post.thumbnailUrl'/&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/b:if&gt;

          &lt;div class='post-body'&gt;
            &lt;b:if cond='data:post.snippet'&gt;&lt;data:post.snippet/&gt;&lt;/b:if&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;div style='clear: both;'/&gt;
      &lt;/a&gt;

      &lt;div class='mobile-index-comment'&gt;
        &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
          &lt;b:if cond='data:post.allowComments'&gt;
            &lt;b:if cond='data:post.numComments != 0'&gt;
              &lt;b:include data='post' name='comment_count_picker'/&gt;
            &lt;/b:if&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='mobile-main' var='top'&gt;
    &lt;!-- posts --&gt;
    &lt;div class='blog-posts hfeed'&gt;

      &lt;b:include data='top' name='status-message'/&gt;

      &lt;b:if cond='data:blog.pageType == &amp;quot;index&amp;quot;'&gt;
        &lt;b:loop values='data:posts' var='post'&gt;
          &lt;b:include data='post' name='mobile-index-post'/&gt;
        &lt;/b:loop&gt;
      &lt;b:else/&gt;
        &lt;b:loop values='data:posts' var='post'&gt;
          &lt;b:include data='post' name='mobile-post'/&gt;
        &lt;/b:loop&gt;
      &lt;/b:if&gt;
    &lt;/div&gt;

   &lt;b:include name='mobile-nextprev'/&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='mobile-nextprev'&gt;
  &lt;div class='blog-pager' id='blog-pager'&gt;
    &lt;b:if cond='data:newerPageUrl'&gt;
      &lt;div class='mobile-link-button' id='blog-pager-newer-link'&gt;
      &lt;a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-newer-link&amp;quot;' expr:title='data:newerPageTitle'&gt;&amp;amp;lsaquo;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;b:if cond='data:olderPageUrl'&gt;
      &lt;div class='mobile-link-button' id='blog-pager-older-link'&gt;
      &lt;a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-older-link&amp;quot;' expr:title='data:olderPageTitle'&gt;&amp;amp;rsaquo;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div class='mobile-link-button' id='blog-pager-home-link'&gt;
    &lt;a class='home-link' expr:href='data:blog.homepageUrl'&gt;&lt;data:homeMsg/&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div class='mobile-desktop-link'&gt;
      &lt;a class='home-link' expr:href='data:desktopLinkUrl'&gt;&lt;data:desktopLinkMsg/&gt;&lt;/a&gt;
    &lt;/div&gt;

  &lt;/div&gt;
  &lt;div class='clear'/&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='mobile-post' var='post'&gt;
  &lt;div class='date-outer'&gt;
    &lt;b:if cond='data:post.dateHeader'&gt;
      &lt;h2 class='date-header'&gt;&lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;&lt;/h2&gt;
    &lt;/b:if&gt;
    &lt;div class='date-posts'&gt;
      &lt;div class='post-outer'&gt;

        &lt;div class='post hentry uncustomized-post-template' itemscope='itemscope' itemtype='http://schema.org/BlogPosting'&gt;
          &lt;b:if cond='data:post.thumbnailUrl'&gt;
            &lt;meta expr:content='data:post.thumbnailUrl' itemprop='image_url'/&gt;
          &lt;/b:if&gt;
          &lt;meta expr:content='data:blog.blogId' itemprop='blogId'/&gt;
          &lt;meta expr:content='data:post.id' itemprop='postId'/&gt;

          &lt;a expr:name='data:post.id'/&gt;
          &lt;b:if cond='data:post.title'&gt;
            &lt;h3 class='post-title entry-title' itemprop='name'&gt;
              &lt;b:if cond='data:post.link'&gt;
                &lt;a expr:href='data:post.link'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
              &lt;b:else/&gt;
                &lt;b:if cond='data:post.url'&gt;
                  &lt;b:if cond='data:blog.url != data:post.url'&gt;
                    &lt;a expr:href='data:post.url'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
                  &lt;b:else/&gt;
                    &lt;data:post.title/&gt;
                  &lt;/b:if&gt;
                &lt;b:else/&gt;
                  &lt;data:post.title/&gt;
                &lt;/b:if&gt;
              &lt;/b:if&gt;
            &lt;/h3&gt;
          &lt;/b:if&gt;

          &lt;div class='post-header'&gt;
            &lt;div class='post-header-line-1'/&gt;
          &lt;/div&gt;

          &lt;div class='post-body entry-content' expr:id='&amp;quot;post-body-&amp;quot; + data:post.id' itemprop='articleBody'&gt;
            &lt;data:post.body/&gt;
            &lt;div style='clear: both;'/&gt; &lt;!-- clear for photos floats --&gt;
          &lt;/div&gt;

          &lt;div class='post-footer'&gt;
            &lt;div class='post-footer-line post-footer-line-1'&gt;
              &lt;span class='post-author vcard'&gt;
                &lt;b:if cond='data:top.showAuthor'&gt;
                  &lt;b:if cond='data:post.authorProfileUrl'&gt;
                    &lt;span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
                      &lt;meta expr:content='data:post.authorProfileUrl' itemprop='url'/&gt;
                      &lt;a expr:href='data:post.authorProfileUrl' rel='author' title='author profile'&gt;
                        &lt;span itemprop='name'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
                      &lt;/a&gt;
                    &lt;/span&gt;
                  &lt;b:else/&gt;
                    &lt;span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
                      &lt;span itemprop='name'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
                    &lt;/span&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;

              &lt;span class='post-timestamp'&gt;
                &lt;b:if cond='data:top.showTimestamp'&gt;
                  &lt;data:top.timestampLabel/&gt;
                  &lt;b:if cond='data:post.url'&gt;
                    &lt;meta expr:content='data:post.canonicalUrl' itemprop='url'/&gt;
                    &lt;a class='timestamp-link' expr:href='data:post.url' rel='bookmark' title='permanent link'&gt;&lt;abbr class='published' expr:title='data:post.timestampISO8601' itemprop='datePublished'&gt;&lt;data:post.timestamp/&gt;&lt;/abbr&gt;&lt;/a&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;

              &lt;span class='post-comment-link'&gt;
                &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
                  &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
                    &lt;b:if cond='data:post.allowComments'&gt;
                      &lt;b:include data='post' name='comment_count_picker'/&gt;
                    &lt;/b:if&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;
            &lt;/div&gt;

            &lt;div class='post-footer-line post-footer-line-2'&gt;
              &lt;b:if cond='data:top.showMobileShare'&gt;
                &lt;div class='mobile-link-button goog-inline-block' id='mobile-share-button'&gt;
                  &lt;a href='javascript:void(0);'&gt;&lt;data:shareMsg/&gt;&lt;/a&gt;
                &lt;/div&gt;
              &lt;/b:if&gt;
              &lt;b:if cond='data:top.showDummy'&gt;
                &lt;div class='goog-inline-block dummy-container'&gt;&lt;data:post.dummyTag/&gt;&lt;/div&gt;
              &lt;/b:if&gt;
            &lt;/div&gt;

          &lt;/div&gt;
        &lt;/div&gt;

        &lt;b:if cond='data:blog.pageType == &amp;quot;static_page&amp;quot;'&gt;
          &lt;b:include data='post' name='comment_picker'/&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
          &lt;b:include data='post' name='comment_picker'/&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='nextprev'&gt;
  &lt;div class='blog-pager' id='blog-pager'&gt;
    &lt;b:if cond='data:newerPageUrl'&gt;
      &lt;span id='blog-pager-newer-link'&gt;
      &lt;a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-newer-link&amp;quot;' expr:title='data:newerPageTitle'&gt;&lt;data:newerPageTitle/&gt;&lt;/a&gt;
      &lt;/span&gt;
    &lt;/b:if&gt;

    &lt;b:if cond='data:olderPageUrl'&gt;
      &lt;span id='blog-pager-older-link'&gt;
      &lt;a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-older-link&amp;quot;' expr:title='data:olderPageTitle'&gt;&lt;data:olderPageTitle/&gt;&lt;/a&gt;
      &lt;/span&gt;
    &lt;/b:if&gt;

    &lt;a class='home-link' expr:href='data:blog.homepageUrl'&gt;&lt;data:homeMsg/&gt;&lt;/a&gt;

    &lt;b:if cond='data:mobileLinkUrl'&gt;
      &lt;div class='blog-mobile-link'&gt;
        &lt;a expr:href='data:mobileLinkUrl'&gt;&lt;data:mobileLinkMsg/&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

  &lt;/div&gt;
  &lt;div class='clear'/&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='post' var='post'&gt;
  &lt;div class='post hentry uncustomized-post-template' itemprop='blogPost' itemscope='itemscope' itemtype='http://schema.org/BlogPosting'&gt;
    &lt;b:if cond='data:post.firstImageUrl'&gt;
      &lt;meta expr:content='data:post.firstImageUrl' itemprop='image_url'/&gt;
    &lt;/b:if&gt;
    &lt;meta expr:content='data:blog.blogId' itemprop='blogId'/&gt;
    &lt;meta expr:content='data:post.id' itemprop='postId'/&gt;

    &lt;a expr:name='data:post.id'/&gt;
    &lt;b:if cond='data:post.title'&gt;
      &lt;h3 class='post-title entry-title' itemprop='name'&gt;
      &lt;b:if cond='data:post.link'&gt;
        &lt;a expr:href='data:post.link'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
      &lt;b:else/&gt;
        &lt;b:if cond='data:post.url'&gt;
          &lt;b:if cond='data:blog.url != data:post.url'&gt;
            &lt;a expr:href='data:post.url'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
          &lt;b:else/&gt;
            &lt;data:post.title/&gt;
          &lt;/b:if&gt;
        &lt;b:else/&gt;
          &lt;data:post.title/&gt;
        &lt;/b:if&gt;
      &lt;/b:if&gt;
      &lt;/h3&gt;
    &lt;/b:if&gt;

    &lt;div class='post-header'&gt;
    &lt;div class='post-header-line-1'/&gt;
    &lt;/div&gt;

    &lt;b:if cond='data:blog.metaDescription == &amp;quot;&amp;quot;'&gt;
      &lt;!-- Then use the post body as the schema.org description,
          for good G+/FB snippeting. --&gt;
      &lt;div class='post-body entry-content' expr:id='&amp;quot;post-body-&amp;quot; + data:post.id' itemprop='description articleBody'&gt;
        &lt;data:post.body/&gt;
        &lt;div style='clear: both;'/&gt; &lt;!-- clear for photos floats --&gt;
      &lt;/div&gt;
    &lt;b:else/&gt;
      &lt;div class='post-body entry-content' expr:id='&amp;quot;post-body-&amp;quot; + data:post.id' itemprop='articleBody'&gt;
        &lt;data:post.body/&gt;
        &lt;div style='clear: both;'/&gt; &lt;!-- clear for photos floats --&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;b:if cond='data:post.hasJumpLink'&gt;
      &lt;div class='jump-link'&gt;
        &lt;a expr:href='data:post.url + &amp;quot;#more&amp;quot;' expr:title='data:post.title'&gt;&lt;data:post.jumpText/&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div class='post-footer'&gt;
    &lt;div class='post-footer-line post-footer-line-1'&gt;
      &lt;span class='post-author vcard'&gt;
        &lt;b:if cond='data:top.showAuthor'&gt;
          &lt;data:top.authorLabel/&gt;
            &lt;b:if cond='data:post.authorProfileUrl'&gt;
              &lt;span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
                &lt;meta expr:content='data:post.authorProfileUrl' itemprop='url'/&gt;
                &lt;a class='g-profile' expr:href='data:post.authorProfileUrl' rel='author' title='author profile'&gt;
                  &lt;span itemprop='name'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
                &lt;/a&gt;
              &lt;/span&gt;
            &lt;b:else/&gt;
              &lt;span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
                &lt;span itemprop='name'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
              &lt;/span&gt;
            &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;

      &lt;span class='post-timestamp'&gt;
        &lt;b:if cond='data:top.showTimestamp'&gt;
          &lt;data:top.timestampLabel/&gt;
        &lt;b:if cond='data:post.url'&gt;
          &lt;meta expr:content='data:post.canonicalUrl' itemprop='url'/&gt;
          &lt;a class='timestamp-link' expr:href='data:post.url' rel='bookmark' title='permanent link'&gt;&lt;abbr class='published' expr:title='data:post.timestampISO8601' itemprop='datePublished'&gt;&lt;data:post.timestamp/&gt;&lt;/abbr&gt;&lt;/a&gt;
        &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;

      &lt;span class='reaction-buttons'&gt;
        &lt;b:if cond='data:top.showReactions'&gt;
          &lt;table border='0' cellpadding='0' cellspacing='0' width='100%'&gt;&lt;tr&gt;
            &lt;td class='reactions-label-cell' nowrap='nowrap' valign='top' width='1%'&gt;
              &lt;span class='reactions-label'&gt;
              &lt;data:top.reactionsLabel/&gt;&lt;/span&gt;&amp;#160;&lt;/td&gt;
            &lt;td&gt;&lt;iframe allowtransparency='true' class='reactions-iframe' expr:src='data:post.reactionsUrl' frameborder='0' name='reactions' scrolling='no'/&gt;&lt;/td&gt;
           &lt;/tr&gt;&lt;/table&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;

      &lt;span class='star-ratings'&gt;
        &lt;b:if cond='data:top.showStars'&gt;
           &lt;div expr:g:background-color='data:backgroundColor' expr:g:text-color='data:textColor' expr:g:url='data:post.absoluteUrl' g:height='42' g:type='RatingPanel' g:width='280'/&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;

      &lt;span class='post-comment-link'&gt;
        &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
          &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
            &lt;b:if cond='data:post.allowComments'&gt;
              &lt;b:include data='post' name='comment_count_picker'/&gt;
            &lt;/b:if&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;

       &lt;!-- backlinks --&gt;
       &lt;span class='post-backlinks post-comment-link'&gt;
         &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
           &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
             &lt;b:if cond='data:post.showBacklinks'&gt;
               &lt;a class='comment-link' expr:href='data:post.url + &amp;quot;#links&amp;quot;'&gt;&lt;data:top.backlinkLabel/&gt;&lt;/a&gt;
             &lt;/b:if&gt;
           &lt;/b:if&gt;
         &lt;/b:if&gt;
       &lt;/span&gt;

      &lt;span class='post-icons'&gt;
        &lt;!-- email post links --&gt;
        &lt;b:if cond='data:post.emailPostUrl'&gt;
          &lt;span class='item-action'&gt;
          &lt;a expr:href='data:post.emailPostUrl' expr:title='data:top.emailPostMsg'&gt;
              &lt;img alt='' class='icon-action' height='13' src='http://img1.blogblog.com/img/icon18_email.gif' width='18'/&gt;
          &lt;/a&gt;
          &lt;/span&gt;
        &lt;/b:if&gt;

        &lt;!-- quickedit pencil --&gt;
        &lt;b:include data='post' name='postQuickEdit'/&gt;
      &lt;/span&gt;

      &lt;!-- share buttons --&gt;
      &lt;div class='post-share-buttons goog-inline-block'&gt;
        &lt;b:if cond='data:post.sharePostUrl'&gt;
          &lt;b:include data='post' name='shareButtons'/&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;

      &lt;/div&gt;

      &lt;div class='post-footer-line post-footer-line-2'&gt;
      &lt;span class='post-labels'&gt;
        &lt;b:if cond='data:post.labels'&gt;
          &lt;data:postLabelsLabel/&gt;
          &lt;b:loop values='data:post.labels' var='label'&gt;
            &lt;a expr:href='data:label.url' rel='tag'&gt;&lt;data:label.name/&gt;&lt;/a&gt;&lt;b:if cond='data:label.isLast != &amp;quot;true&amp;quot;'&gt;,&lt;/b:if&gt;
          &lt;/b:loop&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;
      &lt;/div&gt;

      &lt;div class='post-footer-line post-footer-line-3'&gt;
      &lt;span class='post-location'&gt;
        &lt;b:if cond='data:top.showLocation'&gt;
          &lt;b:if cond='data:post.location'&gt;
            &lt;data:postLocationLabel/&gt;
            &lt;a expr:href='data:post.location.mapsUrl' target='_blank'&gt;&lt;data:post.location.name/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;
      &lt;/div&gt;
      &lt;b:if cond='data:post.authorAboutMe'&gt;
        &lt;div class='author-profile' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
          &lt;b:if cond='data:post.authorPhoto.url'&gt;
            &lt;img expr:src='data:post.authorPhoto.url' itemprop='image' width='50px'/&gt;
          &lt;/b:if&gt;
          &lt;div&gt;
            &lt;a class='g-profile' expr:href='data:post.authorProfileUrl' itemprop='url' rel='author' title='author profile'&gt;
              &lt;span itemprop='name'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;span itemprop='description'&gt;&lt;data:post.authorAboutMe/&gt;&lt;/span&gt;
        &lt;/div&gt;
      &lt;/b:if&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='postQuickEdit' var='post'&gt;
  &lt;b:if cond='data:post.editUrl'&gt;
    &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:post.adminClass'&gt;
      &lt;a expr:href='data:post.editUrl' expr:title='data:top.editPostMsg'&gt;
        &lt;img alt='' class='icon-action' height='18' src='http://img2.blogblog.com/img/icon18_edit_allbkg.gif' width='18'/&gt;
      &lt;/a&gt;
    &lt;/span&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='shareButtons' var='post'&gt;
  &lt;b:if cond='data:top.showEmailButton'&gt;&lt;a class='goog-inline-block share-button sb-email' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=email&amp;quot;' expr:title='data:top.emailThisMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.emailThisMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showBlogThisButton'&gt;&lt;a class='goog-inline-block share-button sb-blog' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=blog&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=270,width=475\&amp;quot;); return false;&amp;quot;' expr:title='data:top.blogThisMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.blogThisMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showTwitterButton'&gt;&lt;a class='goog-inline-block share-button sb-twitter' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=twitter&amp;quot;' expr:title='data:top.shareToTwitterMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToTwitterMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showFacebookButton'&gt;&lt;a class='goog-inline-block share-button sb-facebook' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=facebook&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=430,width=640\&amp;quot;); return false;&amp;quot;' expr:title='data:top.shareToFacebookMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToFacebookMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showOrkutButton'&gt;&lt;a class='goog-inline-block share-button sb-orkut' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=orkut&amp;quot;' expr:title='data:top.shareToOrkutMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToOrkutMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showPinterestButton'&gt;&lt;a class='goog-inline-block share-button sb-pinterest' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=pinterest&amp;quot;' expr:title='data:top.shareToPinterestMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToPinterestMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showDummy'&gt;&lt;div class='goog-inline-block dummy-container'&gt;&lt;data:post.dummyTag/&gt;&lt;/div&gt;&lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='status-message'&gt;
  &lt;b:if cond='data:navMessage'&gt;
  &lt;div class='status-msg-wrap'&gt;
    &lt;div class='status-msg-body'&gt;
      &lt;data:navMessage/&gt;
    &lt;/div&gt;
    &lt;div class='status-msg-border'&gt;
      &lt;div class='status-msg-bg'&gt;
        &lt;div class='status-msg-hidden'&gt;&lt;data:navMessage/&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div style='clear: both;'/&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='threaded-comment-form' var='post'&gt;
  &lt;div class='comment-form'&gt;
    &lt;a name='comment-form'/&gt;
    &lt;b:if cond='data:mobile'&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/&gt;
    &lt;b:else/&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' width='100%'/&gt;
    &lt;/b:if&gt;
    &lt;data:post.friendConnectJs/&gt;
    &lt;data:post.cmtfpIframe/&gt;
    &lt;script type='text/javascript'&gt;
      BLOG_CMT_createIframe(&amp;#39;&lt;data:post.appRpcRelayPath/&gt;&amp;#39;);
    &lt;/script&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='threaded_comment_js' var='post'&gt;
  &lt;script async='async' expr:src='data:post.commentSrc' type='text/javascript'/&gt;

  &lt;script type='text/javascript'&gt;
    (function() {
      var items = &lt;data:post.commentJso/&gt;;
      var msgs = &lt;data:post.commentMsgs/&gt;;
      var config = &lt;data:post.commentConfig/&gt;;

// &lt;![CDATA[
      var cursor = null;
      if (items &amp;&amp; items.length &gt; 0) {
        cursor = parseInt(items[items.length - 1].timestamp) + 1;
      }

      var bodyFromEntry = function(entry) {
        if (entry.gd$extendedProperty) {
          for (var k in entry.gd$extendedProperty) {
            if (entry.gd$extendedProperty[k].name == 'blogger.contentRemoved') {
              return '&lt;span class="deleted-comment"&gt;' + entry.content.$t + '&lt;/span&gt;';
            }
          }
        }
        return entry.content.$t;
      }

      var parse = function(data) {
        cursor = null;
        var comments = [];
        if (data &amp;&amp; data.feed &amp;&amp; data.feed.entry) {
          for (var i = 0, entry; entry = data.feed.entry[i]; i++) {
            var comment = {};
            // comment ID, parsed out of the original id format
            var id = /blog-(\d+).post-(\d+)/.exec(entry.id.$t);
            comment.id = id ? id[2] : null;
            comment.body = bodyFromEntry(entry);
            comment.timestamp = Date.parse(entry.published.$t) + '';
            if (entry.author &amp;&amp; entry.author.constructor === Array) {
              var auth = entry.author[0];
              if (auth) {
                comment.author = {
                  name: (auth.name ? auth.name.$t : undefined),
                  profileUrl: (auth.uri ? auth.uri.$t : undefined),
                  avatarUrl: (auth.gd$image ? auth.gd$image.src : undefined)
                };
              }
            }
            if (entry.link) {
              if (entry.link[2]) {
                comment.link = comment.permalink = entry.link[2].href;
              }
              if (entry.link[3]) {
                var pid = /.*comments\/default\/(\d+)\?.*/.exec(entry.link[3].href);
                if (pid &amp;&amp; pid[1]) {
                  comment.parentId = pid[1];
                }
              }
            }
            comment.deleteclass = 'item-control blog-admin';
            if (entry.gd$extendedProperty) {
              for (var k in entry.gd$extendedProperty) {
                if (entry.gd$extendedProperty[k].name == 'blogger.itemClass') {
                  comment.deleteclass += ' ' + entry.gd$extendedProperty[k].value;
                } else if (entry.gd$extendedProperty[k].name == 'blogger.displayTime') {
                  comment.displayTime = entry.gd$extendedProperty[k].value;
                }
              }
            }
            comments.push(comment);
          }
        }
        return comments;
      };

      var paginator = function(callback) {
        if (hasMore()) {
          var url = config.feed + '?alt=json&amp;v=2&amp;orderby=published&amp;reverse=false&amp;max-results=50';
          if (cursor) {
            url += '&amp;published-min=' + new Date(cursor).toISOString();
          }
          window.bloggercomments = function(data) {
            var parsed = parse(data);
            cursor = parsed.length &lt; 50 ? null
                : parseInt(parsed[parsed.length - 1].timestamp) + 1
            callback(parsed);
            window.bloggercomments = null;
          }
          url += '&amp;callback=bloggercomments';
          var script = document.createElement('script');
          script.type = 'text/javascript';
          script.src = url;
          document.getElementsByTagName('head')[0].appendChild(script);
        }
      };
      var hasMore = function() {
        return !!cursor;
      };
      var getMeta = function(key, comment) {
        if ('iswriter' == key) {
          var matches = !!comment.author
              &amp;&amp; comment.author.name == config.authorName
              &amp;&amp; comment.author.profileUrl == config.authorUrl;
          return matches ? 'true' : '';
        } else if ('deletelink' == key) {
          return config.baseUri + '/delete-comment.g?blogID='
               + config.blogId + '&amp;postID=' + comment.id;
        } else if ('deleteclass' == key) {
          return comment.deleteclass;
        }
        return '';
      };

      var replybox = null;
      var replyUrlParts = null;
      var replyParent = undefined;

      var onReply = function(commentId, domId) {
        if (replybox == null) {
          // lazily cache replybox, and adjust to suit this style:
          replybox = document.getElementById('comment-editor');
          if (replybox != null) {
            replybox.height = '250px';
            replybox.style.display = 'block';
            replyUrlParts = replybox.src.split('#');
          }
        }
        if (replybox &amp;&amp; (commentId !== replyParent)) {
          document.getElementById(domId).insertBefore(replybox, null);
          replybox.src = replyUrlParts[0]
              + (commentId ? '&amp;parentID=' + commentId : '')
              + '#' + replyUrlParts[1];
          replyParent = commentId;
        }
      };

      var hash = (window.location.hash || '#').substring(1);
      var startThread, targetComment;
      if (/^comment-form_/.test(hash)) {
        startThread = hash.substring('comment-form_'.length);
      } else if (/^c[0-9]+$/.test(hash)) {
        targetComment = hash.substring(1);
      }

      // Configure commenting API:
      var configJso = {
        'maxDepth': config.maxThreadDepth
      };
      var provider = {
        'id': config.postId,
        'data': items,
        'loadNext': paginator,
        'hasMore': hasMore,
        'getMeta': getMeta,
        'onReply': onReply,
        'rendered': true,
        'initComment': targetComment,
        'initReplyThread': startThread,
        'config': configJso,
        'messages': msgs
      };

      var render = function() {
        if (window.goog &amp;&amp; window.goog.comments) {
          var holder = document.getElementById('comment-holder');
          window.goog.comments.render(holder, provider);
        }
      };

      // render now, or queue to render when library loads:
      if (window.goog &amp;&amp; window.goog.comments) {
        render();
      } else {
        window.goog = window.goog || {};
        window.goog.comments = window.goog.comments || {};
        window.goog.comments.loadQueue = window.goog.comments.loadQueue || [];
        window.goog.comments.loadQueue.push(render);
      }
    })();
// ]]&gt;
  &lt;/script&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='threaded_comments' var='post'&gt;
  &lt;div class='comments' id='comments'&gt;
    &lt;a name='comments'/&gt;
    &lt;h4&gt;&lt;data:post.commentLabelFull/&gt;:&lt;/h4&gt;

    &lt;div class='comments-content'&gt;
      &lt;b:if cond='data:post.embedCommentForm'&gt;
        &lt;b:include data='post' name='threaded_comment_js'/&gt;
      &lt;/b:if&gt;
      &lt;div id='comment-holder'&gt;
         &lt;data:post.commentHtml/&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;p class='comment-footer'&gt;
      &lt;b:if cond='data:post.allowNewComments'&gt;
        &lt;b:include data='post' name='threaded-comment-form'/&gt;
      &lt;b:else/&gt;
        &lt;data:post.noNewCommentsText/&gt;
      &lt;/b:if&gt;
    &lt;/p&gt;

    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div id='comment-popup'&gt;
        &lt;iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'&gt;
        &lt;/iframe&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div id='backlinks-container'&gt;
    &lt;div expr:id='data:widget.instanceId + &amp;quot;_backlinks-container&amp;quot;'&gt;
       &lt;b:if cond='data:post.showBacklinks'&gt;
         &lt;b:include data='post' name='backlinks'/&gt;
       &lt;/b:if&gt;
    &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
          &lt;/b:widget&gt;
        &lt;/b:section&gt;
      &lt;/div&gt;

      &lt;div id='sidebar-wrapper'&gt;
        &lt;b:section class='sidebar' id='sidebar' preferred='yes'&gt;
          &lt;b:widget id='BlogArchive1' locked='false' title='Blog Archive' type='BlogArchive'&gt;
            &lt;b:includable id='main'&gt;
  &lt;b:if cond='data:title'&gt;
    &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
  &lt;div id='ArchiveList'&gt;
  &lt;div expr:id='data:widget.instanceId + &amp;quot;_ArchiveList&amp;quot;'&gt;
    &lt;b:if cond='data:style == &amp;quot;HIERARCHY&amp;quot;'&gt;
     &lt;b:include data='data' name='interval'/&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:style == &amp;quot;FLAT&amp;quot;'&gt;
      &lt;b:include data='data' name='flat'/&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:style == &amp;quot;MENU&amp;quot;'&gt;
      &lt;b:include data='data' name='menu'/&gt;
    &lt;/b:if&gt;
  &lt;/div&gt;
  &lt;/div&gt;
  &lt;b:include name='quickedit'/&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='flat' var='data'&gt;
  &lt;ul class='flat'&gt;
    &lt;b:loop values='data:data' var='i'&gt;
      &lt;li class='archivedate'&gt;
        &lt;a expr:href='data:i.url'&gt;&lt;data:i.name/&gt;&lt;/a&gt; (&lt;data:i.post-count/&gt;)
      &lt;/li&gt;
    &lt;/b:loop&gt;
  &lt;/ul&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='interval' var='intervalData'&gt;
  &lt;b:loop values='data:intervalData' var='i'&gt;
      &lt;ul class='hierarchy'&gt;
        &lt;li expr:class='&amp;quot;archivedate &amp;quot; + data:i.expclass'&gt;
          &lt;b:include data='i' name='toggle'/&gt;
          &lt;a class='post-count-link' expr:href='data:i.url'&gt;&lt;data:i.name/&gt;&lt;/a&gt;
            &lt;span class='post-count' dir='ltr'&gt;(&lt;data:i.post-count/&gt;)&lt;/span&gt;
          &lt;b:if cond='data:i.data'&gt;
            &lt;b:include data='i.data' name='interval'/&gt;
          &lt;/b:if&gt;
          &lt;b:if cond='data:i.posts'&gt;
            &lt;b:include data='i.posts' name='posts'/&gt;
          &lt;/b:if&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
  &lt;/b:loop&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='menu' var='data'&gt;
  &lt;select expr:id='data:widget.instanceId + &amp;quot;_ArchiveMenu&amp;quot;'&gt;
    &lt;option value=''&gt;&lt;data:title/&gt;&lt;/option&gt;
    &lt;b:loop values='data:data' var='i'&gt;
      &lt;option expr:value='data:i.url'&gt;&lt;data:i.name/&gt; (&lt;data:i.post-count/&gt;)&lt;/option&gt;
    &lt;/b:loop&gt;
  &lt;/select&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='posts' var='posts'&gt;
  &lt;ul class='posts'&gt;
    &lt;b:loop values='data:posts' var='i'&gt;
      &lt;li&gt;&lt;a expr:href='data:i.url'&gt;&lt;data:i.title/&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/b:loop&gt;
  &lt;/ul&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='toggle' var='interval'&gt;
  &lt;b:if cond='data:interval.toggleId'&gt;
  &lt;b:if cond='data:interval.expclass == &amp;quot;expanded&amp;quot;'&gt;
    &lt;a class='toggle' href='javascript:void(0)'&gt;
      &lt;span class='zippy toggle-open'&gt;&amp;#9660;&amp;#160;&lt;/span&gt;
    &lt;/a&gt;
  &lt;b:else/&gt;
    &lt;a class='toggle' href='javascript:void(0)'&gt;
      &lt;span class='zippy'&gt;
        &lt;b:if cond='data:blog.languageDirection == &amp;quot;rtl&amp;quot;'&gt;
          &amp;#9668;&amp;#160;
        &lt;b:else/&gt;
          &amp;#9658;&amp;#160;
        &lt;/b:if&gt;
      &lt;/span&gt;
    &lt;/a&gt;
  &lt;/b:if&gt;
 &lt;/b:if&gt;
&lt;/b:includable&gt;
          &lt;/b:widget&gt;
          &lt;b:widget id='LinkList1' locked='false' title='Links' type='LinkList'&gt;
            &lt;b:includable id='main'&gt;

&lt;b:if cond='data:title'&gt;&lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;&lt;/b:if&gt;
 &lt;div class='widget-content'&gt;
   &lt;ul&gt;
     &lt;b:loop values='data:links' var='link'&gt;
       &lt;li&gt;&lt;a expr:href='data:link.target'&gt;&lt;data:link.name/&gt;&lt;/a&gt;&lt;/li&gt;
     &lt;/b:loop&gt;
   &lt;/ul&gt;
   &lt;b:include name='quickedit'/&gt;
 &lt;/div&gt;
&lt;/b:includable&gt;
          &lt;/b:widget&gt;
          &lt;b:widget id='Profile1' locked='false' title='About Me' type='Profile'&gt;
            &lt;b:includable id='main'&gt;
    &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
      &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
    &lt;/b:if&gt;
    &lt;div class='widget-content'&gt;
    &lt;b:if cond='data:team == &amp;quot;true&amp;quot;'&gt; &lt;!-- team blog profile --&gt;
      &lt;ul&gt;
        &lt;b:loop values='data:authors' var='i'&gt;
          &lt;li&gt;&lt;a class='profile-name-link g-profile' expr:href='data:i.userUrl' expr:style='&amp;quot;background-image: url(&amp;quot; + data:i.profileLogo + &amp;quot;);&amp;quot;'&gt;&lt;data:i.display-name/&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;/b:loop&gt;
      &lt;/ul&gt;

    &lt;b:else/&gt; &lt;!-- normal blog profile --&gt;

      &lt;b:if cond='data:photo.url != &amp;quot;&amp;quot;'&gt;
        &lt;a expr:href='data:userUrl'&gt;&lt;img class='profile-img' expr:alt='data:photo.alt' expr:height='data:photo.height' expr:src='data:photo.url' expr:width='data:photo.width'/&gt;&lt;/a&gt;
      &lt;/b:if&gt;

      &lt;dl class='profile-datablock'&gt;
        &lt;dt class='profile-data'&gt;
          &lt;a class='profile-name-link g-profile' expr:href='data:userUrl' expr:style='&amp;quot;background-image: url(&amp;quot; + data:profileLogo + &amp;quot;);&amp;quot;' rel='author'&gt;
            &lt;data:displayname/&gt;
          &lt;/a&gt;
          &lt;b:if cond='data:hasgoogleprofile'&gt;
            &lt;br/&gt;
            &lt;div class='g-follow' data-annotation='bubble' data-height='20' expr:data-href='data:userUrl'/&gt;
          &lt;/b:if&gt;
        &lt;/dt&gt;

        &lt;b:if cond='data:showlocation == &amp;quot;true&amp;quot;'&gt;
          &lt;dd class='profile-data'&gt;&lt;data:location/&gt;&lt;/dd&gt;
        &lt;/b:if&gt;

        &lt;b:if cond='data:aboutme != &amp;quot;&amp;quot;'&gt;&lt;dd class='profile-textblock'&gt;&lt;data:aboutme/&gt;&lt;/dd&gt;&lt;/b:if&gt;
      &lt;/dl&gt;
      &lt;a class='profile-link' expr:href='data:userUrl' rel='author'&gt;&lt;data:viewProfileMsg/&gt;&lt;/a&gt;
    &lt;/b:if&gt;

     &lt;b:include name='quickedit'/&gt;
    &lt;/div&gt;
  &lt;/b:includable&gt;
          &lt;/b:widget&gt;
        &lt;/b:section&gt;
      &lt;/div&gt;

      &lt;!-- spacer for skins that want sidebar and main to be the same height--&gt;
      &lt;div class='clear'&gt;&amp;#160;&lt;/div&gt;

    &lt;/div&gt; &lt;!-- end content-wrapper --&gt;

    &lt;div id='footer-wrapper'&gt;
      &lt;b:section class='footer' id='footer'/&gt;
    &lt;/div&gt;

  &lt;/div&gt;&lt;/div&gt; &lt;!-- end outer-wrapper --&gt;
&lt;/body&gt;
&lt;/html&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/18002060/template/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/18002060/template/default'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_PUBLISHING_MODE</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of publishing done for this blog.</title><content type='text'>PUBLISH_MODE_BLOGSPOT</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_PUBLISHING_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_PUBLISHING_MODE'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_ADMIN_PERMISSION</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of administrators' emails for the blog.</title><content type='text'>andy.seaborne@gmail.com</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_ADMIN_PERMISSION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_ADMIN_PERMISSION'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_ADULT_CONTENT</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog contains adult content</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_ADULT_CONTENT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_ADULT_CONTENT'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_ALTERNATE_JSRENDER_ALLOWED</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether alternative JS renderings are allowed</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_ANALYTICS_ACCOUNT_NUMBER</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog's Google Analytics account number</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_ARCHIVE_DATE_FORMAT</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the archive index date format</title><content type='text'>9</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_ARCHIVE_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_ARCHIVE_DATE_FORMAT'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_ARCHIVE_FREQUENCY</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>How frequently this blog should be archived</title><content type='text'>MONTHLY</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_ARCHIVE_FREQUENCY'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_ARCHIVE_FREQUENCY'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_AUTHOR_PERMISSION</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of authors' emails who have permission to publish.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_AUTHOR_PERMISSION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_AUTHOR_PERMISSION'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_BACKLINKS_ALLOWED</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show comment backlinks on the blog</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_BACKLINKS_ALLOWED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_BACKLINKS_ALLOWED'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_BY_POST_ARCHIVING</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to provide an archive page for each post</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_BY_POST_ARCHIVING'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_BY_POST_ARCHIVING'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_COMMENT_ACCESS</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Who can comment</title><content type='text'>REGISTERED</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_ACCESS'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_ACCESS'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_COMMENT_CAPTCHA</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to require commenters to complete a Captcha</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_CAPTCHA'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_CAPTCHA'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_COMMENT_EMAIL</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>List of email addresses to which notifications of new comments are sent</title><content type='text'>andy.seaborne@gmail.com</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_EMAIL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_EMAIL'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_COMMENT_FEED</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for blog comments</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_FEED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_FEED'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_COMMENT_FORM_LOCATION</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog comment form location</title><content type='text'>FULL_PAGE</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_FORM_LOCATION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_FORM_LOCATION'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_COMMENT_MESSAGE</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog comment message</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_MESSAGE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_MESSAGE'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_COMMENT_MODERATION</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to enable comment moderation</title><content type='text'>DISABLED</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_MODERATION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_MODERATION'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_COMMENT_MODERATION_DELAY</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Number of days after which new comments are subject to moderation</title><content type='text'>14</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_MODERATION_DELAY'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_MODERATION_DELAY'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_COMMENT_MODERATION_EMAIL</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Email address for receiving notifications of new comments that require moderation</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_MODERATION_EMAIL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_MODERATION_EMAIL'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_COMMENT_PROFILE_IMAGES</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show profile images in comments</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_PROFILE_IMAGES'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENT_PROFILE_IMAGES'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_COMMENTS_ALLOWED</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show comments</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENTS_ALLOWED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENTS_ALLOWED'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_COMMENTS_TIME_STAMP_FORMAT</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Comment time stamp format number</title><content type='text'>4</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_CONVERT_LINE_BREAKS</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to convert line breaks into &lt;br /&gt; tags in post editor</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_CONVERT_LINE_BREAKS'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_CONVERT_LINE_BREAKS'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_CUSTOM_PAGE_NOT_FOUND</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The content served when the requested post or page is not found.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_CUSTOM_PAGE_NOT_FOUND'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_CUSTOM_PAGE_NOT_FOUND'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_CUSTOM_ROBOTS_TXT</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The custom robots.txt content of the blog served to search engines.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_CUSTOM_ROBOTS_TXT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_CUSTOM_ROBOTS_TXT'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_CUSTOM_ROBOTS_TXT_ENABLED</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog serves custom robots.txt content to search engines.</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_DATE_FORMAT</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the date header format</title><content type='text'>18</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_DATE_FORMAT'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_DEFAULT_BACKLINKS_MODE</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Default backlinks mode for posts</title><content type='text'>DEFAULT_HAVE_BACKLINKS</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_DEFAULT_COMMENTS_MODE</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Default comment mode for posts</title><content type='text'>DEFAULT_HAVE_COMMENTS</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_DEFAULT_COMMENTS_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_DEFAULT_COMMENTS_MODE'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_DESCRIPTION</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>A description of the blog</title><content type='text'>A blog related to my work activities - SPARQL, RDF, ARQ, TDB, Jena, Fuseki.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_DESCRIPTION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_DESCRIPTION'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_EMAIL_POST_LINKS</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show a link for users to email posts</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_EMAIL_POST_LINKS'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_EMAIL_POST_LINKS'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_FEED_REDIRECT_URL</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>URL to redirect post feed requests to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_FEED_REDIRECT_URL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_FEED_REDIRECT_URL'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_FLOAT_ALIGNMENT</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether float alignment is enabled for the blog</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_FLOAT_ALIGNMENT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_FLOAT_ALIGNMENT'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_LOCALE</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Language for this blog</title><content type='text'>en_GB</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_LOCALE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_LOCALE'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_M2B_WHITELIST_EMAIL</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>List of email addresses that can post to the blog via email.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_M2B_WHITELIST_EMAIL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_M2B_WHITELIST_EMAIL'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_MAIL_PUBLISH</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether Mail-to-Blogger posts should be immediately published</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_MAIL_PUBLISH'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_MAIL_PUBLISH'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_MAIL_TO_BLOGGER</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Secret from which the Mail-to-Blogger email address is derived</title><content type='text'>email-ytd2</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_MAIL_TO_BLOGGER'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_MAIL_TO_BLOGGER'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_MAX_NUM</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Maximum number of things to show on the main page"</title><content type='text'>2</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_MAX_NUM'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_MAX_NUM'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_MAX_UNIT</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Unit of things to show on the main page</title><content type='text'>POSTS</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_MAX_UNIT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_MAX_UNIT'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_META_DESCRIPTION</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The meta description of the blog served to search engines.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_META_DESCRIPTION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_META_DESCRIPTION'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_META_DESCRIPTION_ENABLED</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog is served with meta descriptions.</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_META_DESCRIPTION_ENABLED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_META_DESCRIPTION_ENABLED'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_NAME</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The name of the blog</title><content type='text'>ARQtick</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_NAME'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_NAME'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_PER_POST_FEED</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for per-post comments</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_PER_POST_FEED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_PER_POST_FEED'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_POST_FEED</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for blog posts</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_POST_FEED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_POST_FEED'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_POST_FEED_FOOTER</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Footer to append to the end of each entry in the post feed</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_POST_FEED_FOOTER'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_POST_FEED_FOOTER'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_POST_TEMPLATE</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The template for blog posts</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_POST_TEMPLATE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_POST_TEMPLATE'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_PROMOTED</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog can be promoted on Blogger</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_PROMOTED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_PROMOTED'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_QUICK_EDITING</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether Quick Editing is enabled</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_QUICK_EDITING'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_QUICK_EDITING'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_READ_ACCESS_MODE</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The access type for the readers of the blog.</title><content type='text'>PUBLIC</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_READ_ACCESS_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_READ_ACCESS_MODE'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_READER_PERMISSION</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of emails for users who have permission to read the blog.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_READER_PERMISSION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_READER_PERMISSION'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_SEARCHABLE</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog should be indexed by search engines</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_SEARCHABLE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_SEARCHABLE'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_SEND_EMAIL</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Comma-separated list of emails to send new blog posts to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_SEND_EMAIL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_SEND_EMAIL'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_SHOW_TITLE</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show the title field</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_SHOW_TITLE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_SHOW_TITLE'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_SHOW_URL</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show a related link box in the post composer</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_SHOW_URL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_SHOW_URL'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_SUBDOMAIN</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The BlogSpot subdomain under which to publish your blog</title><content type='text'>seaborne</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_SUBDOMAIN'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_SUBDOMAIN'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_TIME_STAMP_FORMAT</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the time stamp format</title><content type='text'>4</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_TIME_STAMP_FORMAT'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_TIME_ZONE</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The time zone for this blog</title><content type='text'>Europe/London</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_TIME_ZONE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_TIME_ZONE'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.settings.BLOG_USE_LIGHTBOX</id><published>2007-02-02T15:40:37.310Z</published><updated>2014-10-03T07:50:09.118+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show images in the Lightbox when clicked</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_USE_LIGHTBOX'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/settings/BLOG_USE_LIGHTBOX'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-1214722059942542031</id><published>2011-05-19T15:16:00.002+01:00</published><updated>2011-05-19T15:16:30.316+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Importing SourceForge code into Apache for Jena</title><content type='html'>&lt;p&gt;
The Jena project now has the legal paperwork done for the vast majority
of the codebase.  It's now time to move the code from SourceForge, where's
it's been for almost 10 years (the project was registered November 2001).
&lt;/p&gt;
&lt;p&gt;
During that time, the SourceForge infrastructure has been excellent. We're
not moving because of dissatisfaction but because we want to put the
post-HP on a solid legal basis where the license and IP situation is
well-understood and completely clear.  We now have committers in 3 different
organisations, and contributions from yet more - it's slowly getting more
and more complicated.
&lt;/p&gt;
&lt;p&gt;
The way Apache works is that software is granted to Apache, which grants
Apache the right to re-license it.  Any software you use from Apache is a
license (with IP guarantees etc.) from Apache to you - not between you and
the original contributor, so you can when use the software commercially and
only need to check one Apache license.  
&lt;/p&gt;
&lt;p&gt;
Until now, we have had a setup where any contributions are simply
incorporated with the license and conditions of the contributor.  It so
happens that all the licensed code in the codebase is the same BSD-type license
but in using Jena you don't get a single license, you get one from every
contributor.  For some people who are going to depend on Jena for
commercial use or long term big deployment, this matters.  We've had a user
crawl the codebase to check each of the licenses (as they should but it's
just work).  With Apache it's different - one license, well-understood legal
situation.
&lt;/p&gt;
&lt;p&gt;
Contributors grant software two ways - either a software grant document
or when they upload code to a mailing list or to Jira.  When you add
something to Jira there's a tick box to say you are making the grant to
Apache, otherwise while it may illustrate some issue, we can't use it in
the codebase.
&lt;/p&gt;
&lt;p&gt;
Apache use &lt;a href="http://subversion.apache.org/"&gt;subversion&lt;/a&gt; so Jena
needs to import the code base to svn.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Subversion or git or Mercurial ...&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
Aside: one question I've been asked is why not a DVCS like git or mercurial. Aapche use Subversion.
As I understand it, there are legal matters to consider.  Suppose A pushes code to
B and B pushes to Apache.  A has not necessarily granted the software to
Apache - B could check but it's a new burden for B, and pushing to Apache
is B's responsibility but B does not own A's contribution.  Maybe this will
change sometime but at the moment, DVCS works for direct contributor
to user licensing (and the user "should" then check every license) but not
the consolidation offered by Apache.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Process&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
Jena has three repositories, Jena in CVS, Jena in SVN and Joseki in CVS.
There are active projects in all of them but theer is also a lot of history
and legacy.  We want to import everything as a record of ownerships, not
just copy the latest working copy.
&lt;/p&gt;
&lt;p&gt;
This is the process I have put together:
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;1. Grab the repositories&lt;/b&gt;  
&lt;/p&gt;
&lt;p&gt;
SourceForge offer &lt;a href="https://sourceforge.net/apps/trac/sourceforge/wiki/Using%20rsync%20for%20backups"&gt;rsync access for backup&lt;/a&gt;,
with history (the tarballs are just the current state).
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;2. Convert CVS to SVN&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
We have a multi-project layout so cvs2svn needs some arguments.
&lt;/p&gt;
&lt;pre&gt;
#!/bin/bash
MODS="ARQ BRQL DataGenerator Eyeball EyeballAcceptance Scratch extras grddl gvs iri jena jena-perf jena2 modeljeb owlsyntax rdf-html sparql2sql
tutorial"

SVN=ASF-Jena-CVS   # Destination
CVS=../Jena-CVS    # Local rsync backup

for in $MODS
do
    echo "==== $m"
    #ARGS="--dry-run"
    ARGS="$ARGS --encoding=utf8 --encoding=iso-8859-1"
    # Create trunk/branshes/tag structure per project
    ARGS="$ARGS --trunk=$m/trunk --branches=$m/branches --tags=$m/tags"
    cvs2svn $ARGS --existing-svnrepos --svnrepos "$SVN" $CVS/$m
done
&lt;/pre&gt;
&lt;p&gt;
and much the same for Joseki except the modules list is just "Joseki1 Joseki3
Joseki3" and it is much faster.
&lt;/p&gt;
&lt;p&gt;
Dry-run this first : it showed up two problems.
&lt;/p&gt;
&lt;p&gt;
The "--encoding=utf8 --encoding=iso-8859-1" to to get the translation of
some people's names right (non-ASCII characters).
&lt;/p&gt;
&lt;p&gt;
A name clash in Joseki couldn't be resolved.  Fortunately, it was with some old
intermediate binaries so simply deleting from CVS (the joy of CVS using the filesystem
layout) was simplest.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;3. Dump the repositories&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
Use "svnadmin dump" and gzip the files.  They are
going to uploaded to an Apache machine and they are quite large - 3.1G to
upload over from my home cable connection (1.5Mbit up).
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;4. Import to subversion&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
This step has been done by the Apache Infrastructure team as it requires svnadmin access to the respository.
See &lt;a href="https://issues.apache.org/jira/browse/INFRA-3628"&gt;INFRA-3628&lt;/a&gt; for the details.
&lt;/p&gt;
&lt;p&gt;
It's good to check it's going to do the right thing first.
We now have the files for three repositories.  We want the imported svn to look like:
&lt;/p&gt;
&lt;pre&gt;
   .../Import/Jena-CVS/...
   .../Import/Jena-SVN/...
   .../Import/Joseki-CVS/...
&lt;/pre&gt;
&lt;p&gt;
so we have a permanent record of the code state at the start of the Aapche
svn.  After import, active project can be "svn copy"ed out to give the working
versions going forward.
&lt;/p&gt;
&lt;p&gt;
To test it's going to work when the apache infrastrucure team so the actual
import, I built a local repo in the same layout.
&lt;/p&gt;
&lt;pre&gt;
# ---- Create the layout in Apache repository
mkdir -p Layout/incubator/jena/Import/Joseki-CVS
mkdir -p Layout/incubator/jena/Import/Jena-CVS
mkdir -p Layout/incubator/jena/Import/Jena-SVN
svnadmin create ApacheRepo
svn import Layout/ file://$PWD/ApacheRepo -m "Set layout"
rm -rf Layout

then it's juts a matter of inserting the code in the right place:

# --- Imports
REPO=ApacheRepo

# Joseki-CVS
gzip -d &amp;lt; Imports/ASF-Joseki-CVS.svn.gz | \
     svnadmin load --parent-dir incubator/jena/Import/Joseki-CVS $REPO

# Jena-CVS
gzip -d &amp;lt; Imports/ASF-Jena-CVS.svn.gz | \
     svnadmin load --parent-dir incubator/jena/Import/Jena-CVS $REPO

# Jena-SVN
gzip -d &amp;lt; Imports/ASF-Jena-SVN.svn.gz | \
     svnadmin load --parent-dir incubator/jena/Import/Jena-SVN $REPO
&lt;/pre&gt;
&lt;p&gt;
The slow bits where csv2svn (it's not bad but it's not instant : an hour or
so), the upload to Apache (a couple of hours) and the checking the
"svnadmin load" (another couple of hours).
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;5. Extract working copies&lt;/b&gt;
&lt;p&gt;
We're keeping the imports unchanged as a record of the starting point at Apache (revision 1124118)


&lt;p&gt;
The whole process has been done now - 

&lt;a href="https://svn.apache.org/repos/asf/incubator/jena/"&gt;Jena code at Apache&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/1214722059942542031/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=1214722059942542031' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/1214722059942542031'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/1214722059942542031'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2011/05/importing-sourceforge-code-into-apache.html' title='Importing SourceForge code into Apache for Jena'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-402986767525325932</id><published>2011-03-02T19:41:00.001Z</published><updated>2011-03-02T20:01:04.183Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Updating RDF Lists with SPARQL</title><content type='html'>&lt;p&gt;
Something the &lt;a href="http://www.w3.org/2009/sparql/wiki/Main_Page"&gt;SPARQL Working Group&lt;/a&gt; has been thinking about recently is updates to RDF lists.
&lt;/p&gt;
&lt;p&gt;
RDF lists are hard to deal with because they are not &lt;a href="http://en.wikipedia.org/wiki/First-class_object"&gt;first class objects&lt;/a&gt; in the RDF data model.  Instead they are "encoded" in triples.  The encoding using a &lt;a href="http://en.wikipedia.org/wiki/Cons"&gt;cons cell&lt;/a&gt; like structure whereby each element of the list is a blank node (not necessary a blank node but it nearly always is).
&lt;/p&gt;
&lt;p&gt;
RDF lists are correctly called "&lt;a href="http://www.w3.org/TR/rdf-primer/#collections"&gt;RDF collections&lt;/a&gt;" but as it's the list-nature (elements in order) that matters, I'll call them lists in this blog.
&lt;/p&gt;
&lt;p&gt;
Turtle and SPARQL has syntax for lists, but it's only surface syntax, and there are really triples in the RDF graph:
&lt;/p&gt;
&lt;pre&gt;
@prefix : &lt;http://example/&gt; .
:x :p (1 2 3) .
&lt;/pre&gt;
&lt;p&gt;is the RDF:&lt;/p&gt;
&lt;pre&gt;
:x    :p         _:b0 .
_:b0  rdf:first  1 .
_:b0  rdf:rest   _:b1 .
_:b1  rdf:first  2 .
_:b1  rdf:rest   _:b2 .
_:b2  rdf:first  3 .
_:b2  rdf:rest   rdf:nil
&lt;/pre&gt;

&lt;p&gt;
RDF toolkits help by presenting lists as progamming language lists.  This also helps in keeping the lists well formed.  In all those triples, there is one &lt;tt&gt;rdf:rest&lt;/tt&gt; and one &lt;tt&gt;rdf:first&lt;/tt&gt; per list element - but it's legal RDF to have several uses of the properties, or none, on one subject.
&lt;/p&gt;
&lt;p&gt;
As an addition quirk, the empty list isn't any RDF triples, so looking for lists isn't just looking for &lt;tt&gt;rdf:rest&lt;/tt&gt; properties.
&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
@prefix : &lt;http://example/&gt; .
:x :p () .
&lt;/pre&gt;
&lt;p&gt;is the RDF:&lt;/p&gt;
&lt;pre&gt;
:x :p rdf:nil .
&lt;/pre&gt;

&lt;h3&gt;Lists, Property Paths and Update&lt;/h3&gt;
&lt;p&gt;
&lt;a href="http://www.w3.org/TR/sparql11-query/"&gt;SPARQL 1.1 Query&lt;/a&gt; adds &lt;a href="http://www.w3.org/TR/sparql11-query/#propertypaths"&gt;property paths&lt;/a&gt;, which make working with lists a bit easier, but it's not perfect.  List elements do not necessarily come out in order.

&lt;pre&gt;
{ :list rdf:rest*/rdf:next ?element }
&lt;/pre&gt;

&lt;p&gt;
But what about &lt;a href="http://www.w3.org/TR/sparql11-update/"&gt;SPARQL 1.1 Update&lt;/a&gt;?  How can we work with RDF lists?  Here are some scripts for list operations.  By using property paths they work on arbitrary length lists.
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#add-first"&gt;Add an element to the start of a list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-last"&gt;Add an element to the end of a list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#del-first"&gt;Delete the element at the start of a list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#del-last"&gt;Delete an element to the end of a list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#del-all-1"&gt;Delete the whole list&lt;/a&gt; (version 1 - common case)&lt;/li&gt;
&lt;li&gt;&lt;a href="#del-all-2"&gt;Delete the whole list&lt;/a&gt; (version 2 - more general case)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the scripts are self-contained - they include tests data.&lt;/p&gt;

&lt;p&gt;
They are examples - they aren't necessarily fully general, for example, if lists are badly formed or the property &lt;tt&gt;:p&lt;/tt&gt; is also used to relate the subject to things that aren't lists.  The last example shows a way to address that by finding and marking relavent points in the graph, doing some work and going back and tidying up.  The graph updated is also being used as a scratch pad.
&lt;/p&gt;

&lt;h3 id="add-first"&gt;Add an element to the start of a list&lt;/h3&gt;

&lt;pre&gt;
PREFIX :    &amp;lt;http://example/&gt; 
PREFIX rdf: &amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; 

INSERT DATA {
  :x0 :p () .
  :x1 :p (1) .
  :x2 :p (1 2) .
  :x3 :p (1 2 3) .
} ;

DELETE { ?x :p ?list }
INSERT { ?x :p [ rdf:first 0 ; 
                 rdf:rest ?list ]
       }
WHERE
{
  ?x :p ?list .
}
&lt;/pre&gt;

&lt;p&gt;This one is relatively easy. Find the list start &lt;tt&gt;?x :p ?list&lt;/tt&gt;, which works
whether the list is zero length or already has elements, 
delete the old triple that connected to the start of the list,
put in a new cons cell (the &lt;tt&gt;[...]&lt;/tt&gt;) at the start, and link to it.
&lt;/p&gt;

&lt;h3 id="add-last"&gt;Add an element to the end of a list&lt;/h3&gt;

&lt;pre&gt;
PREFIX :    &amp;lt;http://example/&gt; 
PREFIX rdf: &amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; 

INSERT DATA {
  :x0 :p () .
  :x1 :p (1) .
  :x2 :p (1 2) .
  :x3 :p (1 2 3) .
} ;

# The order here is important.
# Must do list &gt;= 1 first.

# List of length &gt;= 1
DELETE { ?elt rdf:rest rdf:nil }
INSERT { ?elt rdf:rest [ rdf:first 98 ; rdf:rest rdf:nil ] }
WHERE
{
  ?x :p ?list .
  # List of length &gt;= 1
  ?list rdf:rest+ ?elt .
  ?elt rdf:rest rdf:nil .
  # ?elt is last cons cell
} ;

# List of length = 0
DELETE { ?x :p rdf:nil . }
INSERT { ?x :p [ rdf:first 99 ; rdf:rest rdf:nil ] }
WHERE
{
   ?x :p rdf:nil .
}
&lt;/pre&gt;

&lt;p&gt;
This is a bit harder - there are two cases, lists of length 0 and lists of length one or more.
The element before the insertion point needs changing and that can be a cons cell (list length &gt;= 1)
or the empty list (the triple pointing to it).
&lt;/p&gt;
&lt;p&gt;
Do the lists of length one or more first, otherwise the adding to a list of length zero will be caught again by the adding to a list of length one.
&lt;/p&gt;
&lt;p&gt;
For a list of length 1 or more: find the last element.  The &lt;tt&gt;WHERE&lt;/tt&gt; finds &lt;tt&gt;?elt&lt;/tt&gt; by finding all elements of the list &lt;tt&gt;rdf:rest+&lt;/tt&gt;, and checking it's the last element by looking for
&lt;tt&gt;?elt rdf:rest rdf:nil&lt;/tt&gt;.
&lt;/p&gt;
&lt;p&gt;
Then delete the &lt;tt&gt;rdf:rest&lt;/tt&gt;, and insert the new cons cell &lt;tt&gt;[ rdf:first 98 ; rdf:rest rdf:nil ]&lt;/tt&gt;.
&lt;/p&gt;
&lt;p&gt;
For a list of length 0, the style is the same but the finding the triple to delete-insert to attch the cons cell is different.
&lt;/p&gt;

&lt;h3 id="del-first"&gt;Delete the element at the start of a list&lt;/h3&gt;

&lt;pre&gt;
PREFIX :      &amp;lt;http://example/&gt; 
PREFIX rdf:   &amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; 

INSERT DATA {
  :x3 :p (1 2 3) .
  :x2 :p (1 2) .
  :x1 :p (1) .
  :x0 :p () .
} ;

DELETE { 
   ?x :p ?list .
   ?list rdf:first ?first ;
         rdf:rest  ?rest }
INSERT { ?x :p ?rest }
WHERE
{
  ?x :p ?list .
  ?list rdf:first ?first ;
        rdf:rest ?rest .
}
&lt;/pre&gt;

&lt;p&gt;
This can be done in one step - we are not interested in lists of length 0 because they have no element to delete.  So find the pattern at the start of the list, delete it (note the &lt;tt&gt;WHERE&lt;/tt&gt; pattern and &lt;tt&gt;DELETE&lt;/tt&gt; template are the same), and insert the new triple that links the list directly
to the previous &lt;tt&gt;rdf:rest&lt;/tt&gt;.
&lt;/p&gt;

&lt;h3 id="del-last"&gt;Delete the element at the end of a list&lt;/h3&gt;

&lt;pre&gt;
PREFIX :     &amp;lt;http://example/&gt; 
PREFIX rdf:  &amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; 

INSERT DATA {
  :x3 :p (1 2 3) .
  :x2 :p (1 2) .
  :x1 :p (1) .
  :x0 :p () .
} ;

# List of length 1
# Do before other lists.

DELETE { ?x :p ?elt .
         ?elt  rdf:first ?v .
         ?elt  rdf:rest  rdf:nil .
       }
INSERT { ?x :p rdf:nil . }
WHERE
{
  ?x :p ?elt .
  ?elt rdf:first ?v ;
       rdf:rest rdf:nil .
} ;

# List of length &gt;= 2
DELETE { ?elt1 rdf:rest ?elt .
         ?elt  rdf:first ?v .
         ?elt  rdf:rest  rdf:nil .
       }
INSERT { ?elt1 rdf:rest rdf:nil }
WHERE
{
  ?x :p ?list .
  ?list rdf:rest* ?elt1 .

  # Second to end.
  ?elt1 rdf:rest ?elt .
  # End.
  ?elt rdf:first ?v ;
       rdf:rest rdf:nil .
}&lt;/pre&gt;

&lt;p&gt;
The cases to consider are lists of exactly one and lists of two or more elements.  It's the treatment of the element before the element we're deleteing that is different.
&lt;/p&gt;
&lt;p&gt;
The style is the same though - find the place before the deleting, and the delete that cons cell.
&lt;/p&gt;
&lt;p&gt;
For the list of length 2 or more, &lt;tt&gt;rdf:rest*&lt;/tt&gt; is used which, is all elements including the &lt;tt&gt;?list&lt;/tt&gt; case of zero steps - then the structure beyond that is tested for being the end.  There are 2 &lt;tt&gt;rdf:rest&lt;/tt&gt; uses in the test for the end, hence list of length 2 or more.
&lt;/p&gt;

&lt;h3 id="del-all-1"&gt;Delete the whole list (common case)&lt;/h3&gt;

&lt;pre&gt;
PREFIX rdf:  &amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; 
PREFIX :     &amp;lt;http://example/&gt; 

INSERT DATA {
:x0 :p () .
:x0 :q "abc" .

:x1 :p (1) .
:x1 :q "def" .

:x2 :p (1 2) .
:x2 :q "ghi" .
} ;

# Delete the cons cells.
DELETE
    { ?z rdf:first ?head ; rdf:rest ?tail . }
WHERE { 
      [] :p ?list .
      ?list rdf:rest* ?z .
      ?z rdf:first ?head ;
         rdf:rest ?tail .
      } ;

# Delete the triples that connect the lists.
DELETE WHERE { ?x :p ?z . }

&lt;/pre&gt;

&lt;p&gt;
This version is not fully general because it assume that &lt;tt&gt;:p&lt;/tt&gt; is a link to the list and not also to any other RDF terms (non-lists) which we would want to keep.
&lt;/p&gt;
&lt;p&gt;
The first &lt;tt&gt;DELETE&lt;/tt&gt; finds and removes all cons cells.  The second &lt;tt&gt;DELETE&lt;/tt&gt; removes the triple with &lt;tt&gt;:p&lt;/tt&gt; connecting the list to the subject.
&lt;/p&gt;

&lt;h3 id="del-all-2"&gt;Delete the whole list (general case)&lt;/h3&gt;

&lt;pre&gt;
PREFIX rdf:  &amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; 
PREFIX :     &amp;lt;http://example/&gt; 

INSERT DATA {
:x0 :p () .
:x0 :p "String 0" .
:x0 :p [] .

:x1 :p (1) .
:x1 :p "String 1" .
:x1 :p [] .

:x2 :p (1 2) .
:x2 :p "String 2" .
:x2 :p [] .

# A list not connected.
(1 2) .

# Not legal RDF.
# () .

} ;

INSERT { ?list :deleteMe true . }
WHERE {
   ?x :p ?list . 
   FILTER (?list = rdf:nil || EXISTS{?list rdf:rest ?z} )
} ;

# Delete the cons cells.
DELETE
    { ?z rdf:first ?head ; rdf:rest ?tail . }
WHERE { 
      [] :p ?list .
      ?list rdf:rest* ?z .
      ?z rdf:first ?head ;
         rdf:rest ?tail .
      } ;

# Delete the marked nodes
DELETE 
WHERE { ?x :p ?z . 
        ?z :deleteMe true . 
} ;

## ------
## Unconnected lists.

DELETE
    { ?z rdf:first ?head ; rdf:rest ?tail . }
WHERE { 
      ?list rdf:rest ?z2 .
      FILTER NOT EXISTS { ?s ?p ?list }
      ?list rdf:rest* ?z .
      ?z rdf:first ?head ;
         rdf:rest ?tail .
      } 

&lt;/pre&gt;

&lt;p&gt;
Deep breath.
&lt;/p&gt;
&lt;p&gt;
This one is quite long.
&lt;/p&gt;
&lt;p&gt;
The first step is to find and mark all the triples from a subject to a list via &lt;tt&gt;:p&lt;/tt&gt;.
We will need to delete at the end of the process but the property might also be used for non-lists
and after the middle &lt;tt&gt;DELETE&lt;/tt&gt; step all evidence of the lists is lost.
The test:
&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;    FILTER (?list = rdf:nil || EXISTS{?list rdf:rest ?z} )&lt;/pre&gt;
&lt;p&gt;
catches both zero length lists and lists with elements.
&lt;/p&gt;
&lt;p&gt;
Second step: delete all list elements, any subjects with properties &lt;tt&gt;rdf:first&lt;/tt&gt; and &lt;tt&gt;rdf:rest&lt;/tt&gt;.
&lt;/p&gt;
&lt;p&gt;
Third step: remove the connecting triples and the markers.
&lt;/p&gt;
&lt;p&gt;
Finally, we delete any lists where the start isn't connected to anything, which is the
&lt;/p&gt;
&lt;pre&gt;    FILTER NOT EXISTS { ?s ?p ?list }&lt;/pre&gt;
&lt;p&gt;
test.
&lt;/p&gt;

&lt;h3&gt;License and Copyright&lt;/h3&gt;

&lt;p&gt;This page and the SPARQL 1.1 Update scripts are (c) &lt;a href=""&gt;Epimorphics Ltd&lt;/a&gt;
and licensed under a 
&lt;a href="http://creativecommons.org/licenses/by/3.0"&gt;Creative Commons Attribution 3.0 License&lt;/a&gt;.
&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/402986767525325932/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=402986767525325932' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/402986767525325932'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/402986767525325932'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2011/03/updating-rdf-lists-with-sparql.html' title='Updating RDF Lists with SPARQL'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5621962958219212868</id><published>2010-12-09T13:41:00.001Z</published><updated>2010-12-09T13:41:51.318Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Performance benchmarks for the TDB loader (version 2)</title><content type='html'>&lt;p&gt;CAVEAT&lt;/p&gt;

&lt;p&gt;There are "&lt;a href="http://en.wikipedia.org/wiki/Lies,_damned_lies,_and_statistics"&gt;Lies, damned lies, and statistics&lt;/a&gt;" but worse are probably performance measurements done by someone else.
The real test is what does it mean for any given application and is performance "fit for purpose". Database-related performance measurements are particular murky.  The shape of the data matters, the usage made of the data matters, all in ways that can wildly affect whether a system is for for purpose.&lt;/p&gt;

&lt;p&gt;Treat these figures with care - they are given to compare the TDB bulker (to version 0.8.7) loader and the new one (version 0.8.8 and later).  Even then, the new bulk loader is new, so it is subject to tweaking and tuning but hopefully just to improve performance, not worsen it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="#bsbm"&gt;BSBM&lt;/a&gt; &amp;ndash; Berlin SPARQL Benchmark&lt;/li&gt;
  &lt;li&gt;&lt;a href="#coins"&gt;COINS&lt;/a&gt; &amp;ndash; &lt;a href="http://data.gov.uk/dataset/coins"&gt;Combined Online Information System&lt;/a&gt; from the UK Treasury.&lt;/li&gt;
  &lt;li&gt;&lt;a href="#lubm"&gt;LUBM&lt;/a&gt;  &amp;ndash; Lehigh University Benchmark.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;b&gt;See also&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://esw.w3.org/RdfStoreBenchmarking"&gt;http://esw.w3.org/RdfStoreBenchmarking&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;font size="+2"&gt;&lt;b&gt;&lt;a name="summary"&gt;Summary&lt;/a&gt;&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;The new bulk loader is faster by x2 or more depending on the characteristics of the data.  
As loads can take hours, this saving is very useful.
It produces smaller databases and the databases are as good as or better in terms of performance
than the ones produced by the current bulk loader.&lt;/p&gt;

&lt;p&gt;&lt;font size="+2"&gt;&lt;b&gt;&lt;a name="setup"&gt;Setup&lt;/a&gt;&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;The tests were run on a small local server, not tuned or provisioned for database work, just a machine that happened to be easily accessible.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;8GB RAM&lt;/li&gt;
&lt;li&gt;4 core Intel i5 760 @2.8Ghz
&lt;li&gt;Ubuntu 10.10 - ext4 filing system&lt;/li&gt;
&lt;li&gt;Disk: WD 2 TB - SATA-300 7200 rpm and buffer Size 64 MB&lt;/li&gt;
&lt;li&gt;Java version Sun/Oracle JDK 1.6.0_22 64-Bit Server VM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;font size="+2"&gt;&lt;b&gt;&lt;a name="bsbm"&gt;BSBM&lt;/a&gt;&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://www4.wiwiss.fu-berlin.de/bizer/BerlinSPARQLBenchmark/results/V5/index.html"&gt;BSBM published results from Nov 2009&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The figures here are produced using a modified version of the &lt;a href="https://sourceforge.net/projects/bsbmtools/"&gt;BSBM tools set&lt;/a&gt; used for &lt;a href="http://www4.wiwiss.fu-berlin.de/bizer/BerlinSPARQLBenchmark/results/V5/"&gt;version 2 of BSBM&lt;/a&gt;. The modifications are to run the tests on a local database, not over HTTP. The code is &lt;a href="https://github.com/afs/BSBM-Local"&gt;available from github&lt;/a&gt;. See also &lt;a href="http://seaborne.blogspot.com/2009/10/bsbm-jena.html"&gt;this article&lt;/a&gt;.
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#bsbm-loader"&gt;Loader Performance for BSBM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bsbm-sizes"&gt;Database Sizes for BSBM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bsbm-query"&gt;Query Performance for BSBM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;font size="+1"&gt;&lt;b&gt;&lt;a name="bsbm-loader"&gt;BSBM - Loader performance&lt;/a&gt;&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;

&lt;table style="border-collapse: collapse; border-color: #000000" border="1" cellpadding="5"&gt;
  &lt;tr&gt;
    &lt;th align="right"&gt;BSBM dataset&lt;/th&gt;
    &lt;th align="right"&gt;Triples&lt;/th&gt;
    &lt;th align="right"&gt;Loader 1&lt;/th&gt;
    &lt;th align="right"&gt;Rate&lt;/th&gt;
    &lt;th align="right"&gt;Loader 2&lt;/th&gt;
    &lt;th align="right"&gt;Rate&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align="right"&gt;50k&lt;/td&gt;
    &lt;td align="right"&gt;50,057&lt;/td&gt;
    &lt;td align="right"&gt;3s&lt;/td&gt;
    &lt;td align="right"&gt;18,011 TPS&lt;/td&gt;
    &lt;td align="right"&gt;7s&lt;/td&gt;
    &lt;td align="right"&gt;7,151 TPS&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align="right"&gt;250k&lt;/td&gt;
    &lt;td align="right"&gt;250,030&lt;/td&gt;
    &lt;td align="right"&gt;8s&lt;/td&gt;
    &lt;td align="right"&gt;31,702 TPS&lt;/td&gt;
    &lt;td align="right"&gt;11s&lt;/td&gt;
    &lt;td align="right"&gt;22,730 TPS&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align="right"&gt;1m&lt;/td&gt;
    &lt;td align="right"&gt;1,000,313&lt;/td&gt;
    &lt;td align="right"&gt;26s&lt;/td&gt;
    &lt;td align="right"&gt;38,956 TPS&lt;/td&gt;
    &lt;td align="right"&gt;27s&lt;/td&gt;
    &lt;td align="right"&gt;37,049 TPS&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align="right"&gt;5m&lt;/td&gt;
    &lt;td align="right"&gt;5,000,339&lt;/td&gt;
    &lt;td align="right"&gt;121s&lt;/td&gt;
    &lt;td align="right"&gt;41,298 TPS&lt;/td&gt;
    &lt;td align="right"&gt;112s&lt;/td&gt;
    &lt;td align="right"&gt;44,646 TPS&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align="right"&gt;25m&lt;/td&gt;
    &lt;td align="right"&gt;25,000,250&lt;/td&gt;
    &lt;td align="right"&gt;666s&lt;/td&gt;
    &lt;td align="right"&gt;37,561 TPS&lt;/td&gt;
    &lt;td align="right"&gt;586s&lt;/td&gt;
    &lt;td align="right"&gt;42,663 TPS&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align="right"&gt;100m&lt;/td&gt;
    &lt;td align="right"&gt;100,000,112&lt;/td&gt;
    &lt;td align="right"&gt;8,584s&lt;/td&gt;
    &lt;td align="right"&gt;11,650 TPS&lt;/td&gt;
    &lt;td align="right"&gt;3,141s&lt;/td&gt;
    &lt;td align="right"&gt;31,837 TPS&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align="right"&gt;200m&lt;/td&gt;
    &lt;td align="right"&gt;200,031,413&lt;/td&gt;
    &lt;td align="right"&gt;30,348s&lt;/td&gt;
    &lt;td align="right"&gt;6,591 TPS&lt;/td&gt;
    &lt;td align="right"&gt;8,309s&lt;/td&gt;
    &lt;td align="right"&gt;24,074 TPS&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align="right"&gt;350m&lt;/td&gt;
    &lt;td align="right"&gt;350,550,000&lt;/td&gt;
    &lt;td align="right"&gt;83,232s&lt;/td&gt;
    &lt;td align="right"&gt;4,212 TPS&lt;/td&gt;
    &lt;td align="right"&gt;21,146s&lt;/td&gt;
    &lt;td align="right"&gt;16,578 TPS&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;


&lt;p&gt;&lt;font size="+1"&gt;&lt;b&gt;&lt;a name="bsbm-sizes"&gt;BSBM - Database sizes&lt;/a&gt;&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;

&lt;table style="border-collapse: collapse; border-color: #000000" border="1" cellpadding="5"&gt;
&lt;tr&gt;
  &lt;th&gt;Database&lt;/th&gt;
  &lt;th&gt;Size/loader1&lt;/th&gt;
  &lt;th&gt;Size/loader2&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;50k&lt;/td&gt;
  &lt;td&gt;10MB&lt;/th&gt;
  &lt;td&gt;7.2MB&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;250k&lt;/td&gt;
  &lt;td&gt;49MB&lt;/td&gt;
  &lt;td&gt;35MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;1m&lt;/td&gt;
  &lt;td&gt;198MB&lt;/td&gt;
  &lt;td&gt;137MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;5m&lt;/td&gt;
  &lt;td&gt;996MB&lt;/td&gt;
  &lt;td&gt;680MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;25m&lt;/td&gt;
  &lt;td&gt;4.9GB&lt;/td&gt;
  &lt;td&gt;3.3GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;100m&lt;/td&gt;
  &lt;td&gt;20GB&lt;/td&gt;
  &lt;td&gt;13GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;200m&lt;/td&gt;
  &lt;td&gt;39GB&lt;/td&gt;
  &lt;td&gt;26GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;350m&lt;/td&gt;
  &lt;td&gt;67GB&lt;/td&gt;
  &lt;td&gt;45GB&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;font size="+1"&gt;&lt;b&gt;&lt;a name="bsbm-query"&gt;BSBM - Query Performance&lt;/a&gt;&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;Numbers are "query mix per hour"; larger numbers are better.  The BSBM performance engine was run with 100 warmups and 100 timing runs over local databases.&lt;/p&gt;

&lt;table 
style="border-collapse: collapse; border-color: #000000" border="1" cellpadding="5"&gt;
&lt;tr&gt;
&lt;th&gt;Loader used&lt;/th&gt;&lt;th&gt;50k&lt;/th&gt;&lt;th&gt;250k&lt;/th&gt;&lt;th&gt;1m&lt;/th&gt;&lt;th&gt;5m&lt;/th&gt;&lt;th&gt;25m&lt;/th&gt;&lt;th&gt;100m&lt;/th&gt;&lt;th&gt;200m&lt;/th&gt;&lt;th&gt;350m&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width="29%"&gt;&lt;strong&gt;Loader 1&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;102389.1&lt;/td&gt;&lt;td&gt;87527.4&lt;/td&gt;&lt;td&gt;58441.6&lt;/td&gt;&lt;td&gt;5854.7&lt;/td&gt;&lt;td&gt;1798.4&lt;/td&gt;&lt;td&gt;673.0&lt;/td&gt;&lt;td&gt;410.7&lt;/td&gt;&lt;td&gt;250.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width="29%"&gt;&lt;strong&gt;Loader 2&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;106920.1&lt;/td&gt;&lt;td&gt;86726.1&lt;/td&gt;&lt;td&gt;62240.7&lt;/td&gt;&lt;td&gt;11384.5&lt;/td&gt;&lt;td&gt;3477.9&lt;/td&gt;&lt;td&gt;797.1&lt;/td&gt;&lt;td&gt;425.8&lt;/td&gt;&lt;td&gt;259.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;
What this does show is that for a narrow range of database sizes around 5m to 25m,
the databases produced by loader2 are faster.
This happens because the majority ogf the working set of databases due to loader1 didn't fit mostly in-memory but those produced by loader2 do.&lt;/p&gt;


&lt;p&gt;&lt;font size="+2"&gt;&lt;b&gt;&lt;a name="coins"&gt;COINS&lt;/a&gt;&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;COINS is the &lt;a href="http://data.gov.uk/dataset/coins"&gt;Combined Online Information System&lt;/a&gt; from the UK Treasury. 
It's a real-wolrd database that has been converted to RDF by my colleague, Ian - see &lt;a href="http://data.gov.uk/resources/coins"&gt;Description of the conversion to RDF&lt;/a&gt; done by Ian for &lt;a href="http://data.gov.uk/"&gt;data.gov.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.hm-treasury.gov.uk/psr_coins_data.htm"&gt;General information about COINS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;COINS is all named graphs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#coins-loader"&gt;Loader Performance for COINS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#coins-sizes"&gt;Database Sizes for COINS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;font size="+1"&gt;&lt;b&gt;&lt;a name="coins-loader"&gt;COINS - Loader Performance&lt;/a&gt;&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;

&lt;table style="border-collapse: collapse; border-color: #000000" border="1" cellpadding="5"&gt;
  &lt;tr&gt;
    &lt;th align="right"&gt;COINS dataset&lt;/th&gt;
    &lt;th align="right"&gt;Quads&lt;/th&gt;
    &lt;th align="right"&gt;Loader 1&lt;/th&gt;
    &lt;th align="right"&gt;Rate&lt;/th&gt;
    &lt;th align="right"&gt;Loader 2&lt;/th&gt;
    &lt;th align="right"&gt;Rate&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align="right"&gt;&lt;/td&gt;
    &lt;td align="right"&gt;417,792,897&lt;/td&gt;
    &lt;td align="right"&gt;26,425s&lt;/td&gt;
    &lt;td align="right"&gt;15,811 TPS&lt;/td&gt;
    &lt;td align="right"&gt;17,057s&lt;/td&gt;
    &lt;td align="right"&gt;24,494 TPS&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;b&gt;&lt;a name="coins-sizes"&gt;COINS - Database sizes&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;table style="border-collapse: collapse; border-color: #000000" border="1" cellpadding="5"&gt;
&lt;tr&gt;
  &lt;th&gt;Size/loader1&lt;/th&gt;
  &lt;th&gt;Size/loader2&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;152GB&lt;/th&gt;
  &lt;td&gt;77GB&lt;/th&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;font size="+2"&gt;&lt;b&gt;&lt;a name="lubm"&gt;LUBM&lt;/a&gt;&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://swat.cse.lehigh.edu/projects/lubm/"&gt;LUBM information&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;LUBM isn't a very representative benchmark for RDF and linked data applications - it is design more
for testing inference.  But there is some details of various systems published using this benchmark.
To check the new loader on this data, I ran loads for a couple of the larger generated.  These are
the 1000 and 5000 datasets, with inference applied during data creation. The 5000 dataset, just under
a billion triples, was only run through the new loader.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#lubm-loader"&gt;Loader Performance for LUBM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lubm-sizes"&gt;Database Sizes for LUBM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;font size="+1"&gt;&lt;b&gt;&lt;a name="lubm-loader"&gt;LUBM - Loader Performance&lt;/a&gt;&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;

&lt;table style="border-collapse: collapse; border-color: #000000" border="1" cellpadding="5"&gt;
  &lt;tr&gt;
    &lt;th align="right"&gt;LUBM dataset&lt;/th&gt;
    &lt;th align="right"&gt;Triples&lt;/th&gt;
    &lt;th align="right"&gt;Loader 1&lt;/th&gt;
    &lt;th align="right"&gt;Rate&lt;/th&gt;
    &lt;th align="right"&gt;Loader 2&lt;/th&gt;
    &lt;th align="right"&gt;Rate&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align="right"&gt;1000-inf&lt;/td&gt;
    &lt;td align="right"&gt;190,792,744&lt;/td&gt;
    &lt;td align="right"&gt;7,106s&lt;/td&gt;
    &lt;td align="right"&gt;26,849 TPS&lt;/td&gt;
    &lt;td align="right"&gt;3,965s&lt;/td&gt;
    &lt;td align="right"&gt;48,119 TPS&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align="right"&gt;5000-inf&lt;/td&gt;
    &lt;td align="right"&gt;953,287,749&lt;/td&gt;
    &lt;td align="right"&gt;N/A&lt;/td&gt;
    &lt;td align="right"&gt;N/A&lt;/td&gt;
    &lt;td align="right"&gt;86,644s&lt;/td&gt;
    &lt;td align="right"&gt;11,002 TPS&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;b&gt;&lt;a name="lubm-sizes"&gt;LUBM - Database sizes&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Database sizes:&lt;/p&gt;
&lt;table style="border-collapse: collapse; border-color: #000000" border="1" cellpadding="5"&gt;
&lt;tr&gt;
  &lt;th&gt;Dataset&lt;/th&gt;
  &lt;th&gt;Size/loader1&lt;/th&gt;
  &lt;th&gt;Size/loader2&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;1000-inf&lt;/td&gt;
  &lt;td&gt;25GB&lt;/th&gt;
  &lt;td&gt;16GB&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;5000-inf&lt;/td&gt;
  &lt;td&gt;N/A&lt;/th&gt;
  &lt;td&gt;80GB&lt;/th&gt;
&lt;/tr&gt;
&lt;/table&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/5621962958219212868/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=5621962958219212868' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/5621962958219212868'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/5621962958219212868'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2010/12/performance-benchmarks-for-tdb-loader.html' title='Performance benchmarks for the TDB loader (version 2)'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-8579801307519683733</id><published>2010-12-09T13:41:00.000Z</published><updated>2010-12-09T13:41:36.329Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>TDB bulk loader - version 2</title><content type='html'>&lt;p&gt;This article could be subtitled called "Good I/O and Bad I/O".

By arranging to use good I/O, the new TDB loader achieves faster

loading rates despite writing more data to disk.  "Good I/O"

is file operations that occurs in a buffered and streaming fashion.

"Bad I/O" is file operations that cause the disk to jump the heads

about randomly or work in small units of disk transfer.

&lt;/p&gt;



&lt;p&gt;

The new &lt;a href="http://openjena.org/TDB"&gt;TDB&lt;/a&gt;

loader "loader2" is a standalone program that bulk loads

data into a new TDB database. It does not support incremental loading,

and may destroy existing data. It has only been tested on Linux; it 

should run on Windows with Cygwin but what the performance will

be is hard to tell.

&lt;/p&gt;



&lt;p&gt;

Figures demonstrating the loader in action for various large datasets

are in a separate blog entry.  It is faster than the current loader

for datasets over about 1 million triples and comes into it's own

above 100 million triples.

&lt;/p&gt;



&lt;p&gt;

Like the current bulk loader ("loader1"), loader2 can load triple and quad RDF formats, 

and from gzipped files.  It runs fastest from N-triples or N-Quads

because the parser is fastest, and low overhead, for these formats. 

&lt;/p&gt;



&lt;p&gt;

The loader is a shell script that coordinates the various phases.

It's available in the TDB development code repository in 

&lt;tt&gt;bin/tdbloader2&lt;/tt&gt; and the current 0.8.8 snapshot build.

&lt;/p&gt;



&lt;p&gt;

Loader2 is based on the observation that the speed of loader1 can

drop sharply as the memory mapped files fill up RAM (the "can" is

because it does not always happen; slightly weird).  This fall off
is more than one would expect simply by having to use some disk and
sometimes the rate of loader1 becomes erratic.  This could be

due to the OS and the management of memory mapped files

but the effect is that the secondary index creation can

become rather slow.  loader1 tends to do "bad I/O" - as the

caches fill up, blocks are written back in what to the disk looks

like a random order causing the disk heads to jump round.

&lt;/p&gt;



&lt;p&gt;

Copying from the primary index to a secondary index involves a sort 

because TDB uses

&lt;a href="http://en.wikipedia.org/wiki/B%2Btree"&gt;B+trees&lt;/a&gt;

for it's triple and quad indexing.  A B+Tree keeps its

records in sorted order and each index is different orders.

&lt;/p&gt;



&lt;p&gt;Loader1 is much faster than simply loading all indexes at once because

in that case there is some much RAM being used for caching of parts of all the

indexes. Better is to do one index at a time, using the RAM for caching one

index at a time.

&lt;/p&gt;



&lt;p&gt;Loader2 similarly has an data loading phase and an index creation phase.&lt;/p&gt;



&lt;p&gt;

The first phase is to build the node table and write out the data for index building.

Loader2 takes the stream of triples and quads

from the parser and writes out the RDF terms (IRI, Literal, blank node)

into the internal node table.

It also writes out text files of tuples of NodeId (the internal 64 bit

number used to identify each RDF term. This is "good I/O" - the writes

of the tuples files are buffered up and the files are written append-only.

This phase is a Java program, which exits after the node table and working files have been written.
&lt;/p&gt;



&lt;p&gt;

The next phase is to produce the indexes, including the primary index.  Unlike

loader1, loader2 does not write the primary index during node loading.

Experimentation showed it was quicker to do it separately despite needing more I/O.  
This is slightly strange.

&lt;/p&gt;



&lt;p&gt;

To build indexes, loader2 uses the

&lt;a href="http://seaborne.blogspot.com/2010/12/repacking-btrees.html"&gt;B+Tree rebuidler&lt;/a&gt; 

and that requires the data in index-sorted order.  Index rebuilding is a sort followed

by B+tree building.  The sort is done by &lt;a href="http://en.wikipedia.org/wiki/Sort_%28Unix%29"&gt;Unix sort&lt;/a&gt;.

Unix sort is very easy to use and it smoothly scales from a few lines to gigabytes of data.

Having written the tuple data out as text files in the first phase (and fixed width hex numbers at that - quite wasteful)

Unix sort can do a text sort on the files.  Despite that meaning lots of I/O, it's good I/O

and the sort program really knows how to best manage temporary files.

&lt;/p&gt;



&lt;p&gt;

For each index, a Unix sort is done to get a temporary file of tuple data in the right sort order.

The B+Tree rebuilder is called with this file as the stream of sorted data it needs to

create an index.

&lt;/p&gt;



&lt;p&gt;

There are still opportunities to tune the new loader and to see if the output of the sorts

being piped directly into the rebuilder is better or worse than the two step approach

using temporary file used at the moment.  Using different disks for different temporary files

should also help.

&lt;/p&gt;



&lt;p&gt;

The index building phase is parallelisable. Because I/O and memory usage are the bottlenecks, not CPU cycles,
the crossover point for this to become effective might be quite high.

&lt;/p&gt;



&lt;p&gt;

To find out whether loader2 is better than loader1, I've run a number of tests. 

Load and query tests with the &lt;a href="http://www4.wiwiss.fu-berlin.de/bizer/BerlinSPARQLBenchmark/results/V5/index.html"&gt;Berlin SPARQL Benchmark (2009 version)&lt;/a&gt;, a load test on the RDF version of

&lt;a href="http://data.gov.uk/dataset/coins"&gt;COINS&lt;/a&gt; (UK Treasury Combined Online Information System - about 420 million quads and it's real data) and a load test using the &lt;a href="http://swat.cse.lehigh.edu/projects/lubm/"&gt;Lehigh University Benchmark&lt;/a&gt; with some inferencing.  Details, figures and tables in the next article.

&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/8579801307519683733/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=8579801307519683733' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/8579801307519683733'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/8579801307519683733'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2010/12/tdb-bulk-loader-version-2.html' title='TDB bulk loader - version 2'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5992332643212350594</id><published>2010-12-03T19:29:00.000Z</published><updated>2010-12-03T19:29:19.213Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Repacking B+Trees</title><content type='html'>&lt;p&gt;
&lt;a href="http://openjena.org/TDB"&gt;TDB&lt;/a&gt; uses
&lt;a href="http://en.wikipedia.org/wiki/B%2Btree"&gt;B+trees&lt;/a&gt;
for it's triple and quad indexing. 
&lt;/p&gt;

&lt;p&gt;
The indexes hold 3 or 4 NodeIds, where a NodeId is a fixed length 64 bit unique
number for each RDF term in the database. Numbers, dates and times are encoded directly
into the 64 bits where possible, otherwise the NodeId refers to the location in a separate NodeId to RDF term table like all other types,including IRIs.
&lt;/p&gt;

&lt;p&gt;
The B+Trees have a number of leaf blocks, each of which holds only records (key, value pairs, except there's no "value" part in a triple index - just the key of S,P and O in various orders).
TDB threads these blocks together so that a scan does not need to touch the
rest of the tree - scans happen when you look up, say S?? for known subject and unknown property and object.
The scan returns all the triples with a particular S. Counting all the triples only touches the leaves of the B+Tree, not the branches.
&lt;/p&gt;

&lt;p&gt;
B+Trees provide performant indexing over a wide range of memory situations,
ranging from very little caching of disk structures in memory, through to 
being able to cache substantial portions of the tree.
&lt;/p&gt;

&lt;p&gt;
The TDB B+Trees have a number of
&lt;a href="http://en.wikipedia.org/wiki/Block_%28data_storage%29"&gt;block storage layers&lt;/a&gt;;
an in-JVM block caching for use on 32 bit JVMs, memory mapped files, 
for 64 bit JVMs, and an in-memory RAM-disk for testing. The in-memory RAM disk is
not efficient but it is a very good simulation of a disk - it 
really does copy the blocks used by a client when written to another area
so there is no possibility of updating blocks through references held by the
client after the block has been written to "disk".
&lt;/p&gt;

&lt;p&gt;
However, one disadvantage can be that the index isn't very well packed. The B+Trees
guarantee that each block is at least 50% full. In practice, the blocks are 60-70% full for indexes POS and OSP.
But a worse case can arise happens when inserting into the SPO index because data typically arrives with all the triples for one subject, then all the triples for another subject, meaning the data is nearly sorted. While this makes the processing faster, it makes the resulting B+Tree about 50%-60% packed.
&lt;/p&gt;

&lt;p&gt;
Packing density matters because it influences how much of the tree is cached in a fixed amount of computer memory. If it's 50% packed, then it's only 50% efficient in the cache.
&lt;/p&gt;

&lt;p&gt;
There are various ways to improve on this (compress blocks,
&lt;a href="http://en.wikipedia.org/wiki/B_sharp_tree"&gt;B#Trees&lt;/a&gt;,
and many more besides - B-tree variations are very extensively studied data-structures).
&lt;/p&gt;

&lt;p&gt;
I have been working on a B+Tree repacking programme that takes an existing B+Tree and produces a maximumally packed B+Trees. The database is then smaller on disk and the in-memory caches are more efficiently used. The trees produces are legal B+Trees, and have a packing density of close to 100%. Rebuilding indexes is fast and scales linearly.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;The Algorithm&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;
Normally, B+Trees grow at the root. A B+tree is the same depth everywhere in the tree and the tree
only gets deeper if the root node of the tree is split and a new root is created pointing to down the two blocks formed by splitting the old root. This algorithm, building a
tree from a stream of records, grows the tree from the leaves towards the root.
While the algorithm is running there isn't a legal tree - it's only when the algorithm
finishes, does a legal B+Tree emerge.
&lt;/p&gt;

&lt;p&gt;
All the data of a B+tree resides in the leaves - the branches above tell you
which leaf block to look in (this is the key difference between B-Trees and B+Trees).
The first stage of repacking takes a stream of records (key and value) from the initial tree. 
This stream will be in sorted order because it's being read out of a B+Tree and 
for a TDB B+tree, it's a scan tracing the threading of the leaf blocks together.
In other words, it's not memory intensive.
&lt;/p&gt;

&lt;p&gt;
In the first stage, new leaf blocks are produces, one at a time. A block is filled
completely, a new block allocated, the threading pointers completed and the full
block written out. In addition, the block number and highest key in the block are emitted.
The leaf block is not touched again.
&lt;/p&gt;

&lt;p&gt;The exception is the last two blocks of the leaf layer. A B+Tree must have blocks
at least 50% full to be a legal tree. Although the TDB B+Tree code can cope with blocks
that are smaller than the B+tree guarantee, it's neater to rebalance the last two blocks in the case the last block is below the minimum size. Because the second-to-last block is
completely full, it's always possible to rebalance in just two blocks.
&lt;/p&gt;

&lt;p&gt;
Phase two takes as input the stream of block number and highest key from the level below
and builds branch nodes for the B+Tree pointing, by block number, to the blocks produced
in the phase before. When a block is finished, the block can be written out
and a block number and split key emitted. This split key isn't the highest key
in the block - it's the highest key of the entire sub-tree at that point
but this the key passed. A B+tree branch node has N block pointers and N-1
keys and the split key is the last key from making the full block, and is
the Nth key from below.
&lt;/p&gt;

&lt;p&gt;
Once again, the last two blocks are rebalanced to maintain then B+Tree invariant of all blocks
being at least half full. For large trees, there are quite a few blocks, so the rebalance of 
just two of them is insignificant. For small trees, it not really worth repacking the tree - 
block caching at runtime hides any advantages there might be.
&lt;/p&gt;

&lt;p&gt;
The second phase is repeated applied to the block number and split key stream from the layer below
until a layer in the tree is only one block (it can't be zero blocks). This single block
is the new root block. The third phase is to write out the B+Tree details to disk
and put the root block somewhere where it can be found when the B+Tree is reopened.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Consequences&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;
The repacking algorithm produces B+Trees that are the approaching half the size of the
original trees. For a large dataset, that's several gigabytes.
&lt;/p&gt;

&lt;p&gt;
The repacked trees perform a bit faster than trees formed by normal use except
in one case where they are faster. If the tree is small, the majority fits in the RAM caches,
then repacking means less RAM is used but the speed is much the same (in fact as few percent slower,
hard to measure but less than 5%, presumably because there is a difference ratio of tree decent and in-block binary search being done by the CPU.
This may be no more than a RAM cache hierarchy effect).
&lt;/p&gt;

&lt;p&gt;
However, if the tree was large, and repacked now fits mostly in memory, the repacked trees are faster.
As the indexes for an RDF dataset grows much large than the cacheable space, then this effect
slowly declines. Some figures to show this are in preparation.
&lt;/p&gt;

&lt;p&gt;
The biggest benefit however, is not directly the speed of access or the reduced disk space.
It's the fact here is a fast and linear growth way to build a B+Tree from 
a stream of sorted records. It's much faster than simply using the
regular insertion into the B+Tree.
&lt;/p&gt;

&lt;p&gt;
This is part of the new bulk loader for TDB. It uses external sorting to
produce the input to index creation using this B+Tree repacking algorithm.
The new bulk loader can save hours on large data loads.
&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/5992332643212350594/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=5992332643212350594' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/5992332643212350594'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/5992332643212350594'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2010/12/repacking-btrees.html' title='Repacking B+Trees'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-7422183453004462231</id><published>2010-08-28T22:29:00.001+01:00</published><updated>2010-08-28T22:31:01.347+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Migrating from the SPARQL Update submission language to the emerging SPARQL 1.1. Update  standard</title><content type='html'>&lt;p&gt;
&lt;a href="http://www.w3.org/TR/sparql11-update/"&gt;SPARQL 1.1 Update&lt;/a&gt; is work-in-progress by
the &lt;a href="http://www.w3.org/2001/sw/DataAccess/"&gt;SPARQL Working Group&lt;/a&gt; but the general
design and language is reasonably stable. There is also the W3C submission
&lt;a href="http://www.w3.org/Submission/SPARQL-Update/"&gt;SPARQL Update&lt;/a&gt; from July 2008.
The language are similar in style but the details of the grammars differ.
So how to migrate from the syntax used in the submission to the upcoming SPARQL recommendation
for a SPARQL Update language?
&lt;/p&gt;

&lt;p&gt;
One way is to provide both languages behind a common API, with the application indicating which language
to use.  This maximises compatibility because if the submission is the chosen language, the parser for
the submission language will be used.  But the application has to be changed to move between the languages and conversion of update scripts has to be done for each script, so probably it's a "big bang" change over. The two languages are very close - is it possible to have a single language that covers both languages?  
Then the application can mix usages and when an update request is printed it can be printed in the soon-to-be standard language, helping people see how the language has changed.
&lt;/p&gt;

&lt;p&gt;It turns out that most, but no all, the submission language can be incorporated into 
the grammar for the emerging standard. The cases not covered don't seem to be ones likely
to be widely used although it would be good to know if they are.
&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;tt&gt;CREATE&lt;/tt&gt;, &lt;tt&gt;CLEAR&lt;/tt&gt;, &lt;tt&gt;LOAD&lt;/tt&gt;, &lt;tt&gt;DROP&lt;/tt&gt; are covered.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;INSERT DATA&lt;/tt&gt;, &lt;tt&gt;DELETE DATA&lt;/tt&gt; on the default graph covered or working on one a named graph
is covered but not on more than one graph at once.&lt;/li&gt;

&lt;li&gt;An extra grammar rule for &lt;tt&gt;MODIFY&lt;/tt&gt; is supported, again working on the default graph or one named graph. but with only a single, optional &lt;tt&gt;GRAPH &amp;lt;uri&amp;gt;&lt;/tt&gt;.

&lt;li&gt;The old style &lt;tt&gt;INSERT { :s :p :o }&lt;/tt&gt;, &lt;tt&gt;DELETE { :s :p :o }&lt;/tt&gt;, that is, insert or delete some data using just the &lt;tt&gt;INSERT&lt;/tt&gt; or &lt;tt&gt;DELETE&lt;/tt&gt; keyword, without &lt;tt&gt;DATA&lt;/tt&gt;, leads to ambiguity in the combined grammar.  These forms are not supported in the combined language. In fact, these forms pre-date the &lt;tt&gt;DATA&lt;/tt&gt; forms in the submission language.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;
The ability to work on only one named graph needs a little explanation. In the
combined grammar, the &lt;tt&gt;INTO&lt;/tt&gt; or &lt;tt&gt;FROM&lt;/tt&gt;
is used to set the &lt;tt&gt;WITH&lt;/tt&gt; part of an update. 
There can be at most one &lt;tt&gt;WITH&lt;/tt&gt;. In the submission,
&lt;/p&gt;
&lt;pre&gt;
INSERT INTO &amp;lt;g1&amp;gt; &amp;lt;g2&amp;gt; &amp;lt;g3&amp;gt; { ... } WHERE { ... }
&lt;/pre&gt;
&lt;p&gt;is legal.  In terms of language, this could be incorporated into the extended language but it introduces a capability not present in the upcoming working group language and it can't be written out again without repeating the operation, once for each named graph.  Operating on a single named graph, or the default graph, is covered by the standard.&lt;/p&gt;

&lt;p&gt;For old style &lt;tt&gt;INSERT&lt;/tt&gt; or &lt;tt&gt;DELETE&lt;/tt&gt; of data, conversion can be done by adding in the word DATA to the operation or adding WHERE {} to the update operation.  Both these conversions yield something that is legal and the same under the submission language so the conversation can be done and retain the use of old software.&lt;/p&gt;

&lt;p&gt;In summary: The accepted forms of the submission language are:
&lt;pre&gt;
  INSERT [INTO &amp;lt;uri&amp;gt;] {...} WHERE {...}
  DELETE [FROM &amp;lt;uri&amp;gt;] {...} WHERE {...}
  INSERT DATA [INTO &amp;lt;uri&amp;gt;] {...}
  DELETE DATA [FROM &amp;lt;uri&amp;gt;] {...}
&lt;/pre&gt;

&lt;p&gt;By using an extended grammar, the application can even mix syntax of the submission on SPARQL Update and SPARQL 1.1 Update in a single request or, indeed, single operation.  When printed the output can be in the equivalent SPARQL 1.1 Syntax.&lt;/p&gt;

&lt;p&gt;ARQ (currently, the development snapshot) includes a command line SPARQL 1.1 Update extended parser, "arq.uparse". arq.uparse reads the extended syntax and prints the equivalent strict SPARQL 1.1 Update form.  It can be used to translate from the submission language to W3C standards language. More on practical details: &lt;a href="http://tech.groups.yahoo.com/group/jena-dev/message/45040"&gt;jena-dev/message/45040&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Key points from the extended Grammar: The working group is not planning on including this published SPARQL 1.1 Update grammar.&lt;/p&gt;

&lt;pre&gt;
UpdateUnit  :=  Prologue Update &amp;lt;EOF&amp;gt;

Update  :=  ( Update1 )+

# As for SPARQL 1.1 Update with addition of "ModifyOld"
Update1 :=  ( Load | Clear | Drop | Create |
              InsertData | DeleteData | DeleteWhere |
              Modify | ModifyOld )
            ( &amp;lt;SEMICOLON&amp;gt; )?

Load    :=  &amp;lt;LOAD&amp;gt; IRIref ( &amp;lt;INTO&amp;gt; ( &amp;lt;GRAPH&amp;gt; )? IRIref )?

Clear   :=  &amp;lt;CLEAR&amp;gt; ( &amp;lt;SILENT&amp;gt; )? GraphRefAll

Drop    :=  &amp;lt;DROP&amp;gt; ( &amp;lt;SILENT&amp;gt; )? GraphRefAll

Create  :=  &amp;lt;CREATE&amp;gt; ( &amp;lt;SILENT&amp;gt; )? GraphRef

InsertData  :=  &amp;lt;INSERT_DATA&amp;gt; OptionalIntoTarget QuadPattern

DeleteData  :=  &amp;lt;DELETE_DATA&amp;gt; OptionalFromTarget QuadData

DeleteWhere :=  &amp;lt;DELETE_WHERE&amp;gt; QuadPattern

Modify  :=  ( &amp;lt;WITH&amp;gt; IRIref )?
            ( DeleteClause ( InsertClause )? | InsertClause )
            ( UsingClause )*
            &amp;lt;WHERE&amp;gt; GroupGraphPattern

# The MODIFY form from the submission
ModifyOld   :=  &amp;lt;MODIFY&amp;gt; ( IRIref )?
                ( DeleteClause )?
                ( InsertClause )?
                &amp;lt;WHERE&amp;gt; GroupGraphPattern

DeleteClause    :=  &amp;lt;DELETE&amp;gt; OptionalFromTarget QuadPattern

InsertClause    :=  &amp;lt;INSERT&amp;gt; OptionalIntoTarget QuadPattern

# Optional INTO: wraps the QuadPattern with a GRAPH
OptionalIntoTarget  :=  ( ( &amp;lt;INTO&amp;gt; )? IRIref )?

# Optional FROM; wraps the QuadPattern with a GRAPH
OptionalFromTarget  :=  ( ( &amp;lt;FROM&amp;gt; )? IRIref )?

UsingClause :=  &amp;lt;USING&amp;gt; ( IRIref | &amp;lt;NAMED&amp;gt; IRIref )
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/7422183453004462231/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=7422183453004462231' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/7422183453004462231'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/7422183453004462231'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2010/08/migrating-from-sparql-update-submission.html' title='Migrating from the SPARQL Update submission language to the emerging SPARQL 1.1. Update  standard'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-6242907008544496537</id><published>2010-07-30T10:42:00.003+01:00</published><updated>2010-07-30T12:01:33.751+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Moving to Epimorphics</title><content type='html'>&lt;p&gt;I'm moving to &lt;a href="http://www.epimorphics.com/"&gt;Epimorphics&lt;/a&gt;, starting there early next month. Epimorphics is now located in &lt;a href="http://en.wikipedia.org/wiki/Portishead,_Somerset"&gt;Portishead&lt;/a&gt; (as of &lt;a href="http://reference.data.gov.uk/id/day/2010-07-27"&gt;last Tuesday&lt;/a&gt;).&lt;/p&gt;


&lt;p&gt;As before, I will still be able to work on &lt;a href="http://openjena.org/"&gt;Jena&lt;/a&gt;, &lt;a href="http://openjena.org/ARQ"&gt;ARQ&lt;/a&gt; and &lt;a href="http://openjena.org/TDB"&gt;TDB&lt;/a&gt; and I also get to continue participating in the &lt;a href="http://www.w3.org/2009/sparql/wiki/Main_Page"&gt;W3C SPARQL working group&lt;/a&gt;, now as an Invited Expert.  The working group is making good progress on it's chosen &lt;a href="http://www.w3.org/TR/sparql-features/"&gt;list of features&lt;/a&gt;, and now it's just a "small" matter of doing the core work and getting out the Last Call documents to the community.
&lt;/p&gt;
&lt;p&gt;
More exciting times.
&lt;/p&gt;</content><link rel='related' href='http://www.epimorphics.com/' title='Moving to Epimorphics'/><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/6242907008544496537/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=6242907008544496537' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/6242907008544496537'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/6242907008544496537'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2010/07/moving-to-epimorphics.html' title='Moving to Epimorphics'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-3639590503256753015</id><published>2010-07-17T20:50:00.000+01:00</published><updated>2010-07-17T20:50:31.996+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Ubuntu on a Samsung N210</title><content type='html'>&lt;p&gt;I have Ubuntu 10.04 working on a Samsung N210, running Thunderbird, Firefox as well as all my Java development systems. It may not be a fast machine but it's very convenient. The process is now easy, easier than some older material (for 9.10 and very early 10.04) on the web might suggest.&lt;p&gt;

&lt;p&gt;When first turned on, the machine installed Windows 7 starter.  I let this finish even though I didn't want it so I could install Ubuntu 10.04 along side Windows in case it didn't work.  Once I was happy it would work, I repartitioned the disk (with gparted) to create a single partition, deleting Windows and the restore partition, then reinstalled.&lt;/p&gt;

&lt;p&gt;First, build a USB drive with the install on.  To get the machine to boot fro this I had to:

&lt;ul&gt;
&lt;li&gt;As the machine boots, keep F2 pressed to go into the BIOS.&lt;/li&gt;
&lt;li&gt;Make sure the machine will boot from a USB pendrive.&lt;/li&gt;
&lt;li&gt;Reboot with USB and install Ubuntu Netbook Remix&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You have to press F2 very early to get into the BIOS configuration screens. The boot through the BIOS is very fast so don't wait for machine to put the Samsung flash screen up.&lt;/p&gt;

&lt;p&gt;You can reset the BIOS to not boot from USB if you want to at this stage, or later.&lt;/p&gt;

&lt;p&gt;At this point the wireless does not work.  &lt;b&gt;Don't panic&lt;/b&gt;; plug in an Ethernet cable and update the system.&lt;/p&gt;

&lt;blockquote&gt;&lt;pre&gt;sudo apt-get update
sudo apt-get upgrade
sudo reboot
&lt;/pre&gt;&lt;/blockquote&gt;

&lt;p&gt;and now the wireless works.  There's quite a lot of advice on the web about this but it now seems that there is no need for any custom software - looks like the main Ubuntu repositories have a working version of the system.&lt;/p&gt;

&lt;p&gt;To get the function keys working I followed the advice in &lt;a href="https://bugs.launchpad.net/ubuntu/+bug/574250"&gt;https://bugs.launchpad.net/ubuntu/+bug/574250&lt;/a&gt;.

&lt;blockquote&gt;&lt;pre&gt;The missing function keys are due to the fact that Samsung N150/N210/N220 are missing from the udev rules:

/lib/udev/rules.d/95-keymap.rules
/lib/udev/rules.d/95-keyboard-force-release.rules

adding "|*N150/N210/N220*" to the product part of the rules for Samsung in BOTH files, will enable the Fn-up and Fn-down keys. The new product section will look like:

ENV{DMI_VENDOR}=="[sS][aA][mM][sS][uU][nN][gG]*", ATTR{[dmi/id]product_name}=="*NC10*|*NC20*|*N130*|*SP55S*|*SQ45S70S*|*SX60P*|*SX22S*|*SX30S*|*R59P/R60P/R61P*|*SR70S/SR71S*|*Q210*|*Q310*|*X05*|*P560*|*R560*|*N150/N210/N220*"

Now, you can map these keys to any program setting the backlight
&lt;/pre&gt;&lt;/blockquote&gt;

&lt;p&gt;and then install some Samsung tools - you need to add the repository to the package manager which you can do graphically or as:&lt;/p&gt;

&lt;blockquote&gt;&lt;pre&gt;sudo add-apt-repository ppa:voria/ppa
sudo apt-get update
sudo apt-get upgrade
sudo apt-get install samsung-tools samsung-backlight
sudo reboot&lt;/pre&gt;&lt;/blockquote&gt;

&lt;p&gt;at which point the N210 works a treat.&lt;/p&gt;

&lt;p&gt;Now - remove all the Windows stickers on the machine, front and back.&lt;/p&gt;

&lt;p&gt;If you are looking for software to try, &lt;a href="http://blog.thesilentnumber.me/2010/04/ubuntu-1004-post-install-guide-what-to.html"&gt;this blog&lt;/a&gt; is a good place to start.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/3639590503256753015/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=3639590503256753015' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/3639590503256753015'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/3639590503256753015'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2010/07/ubuntu-on-samsung-n210.html' title='Ubuntu on a Samsung N210'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-2552263859974412692</id><published>2010-06-02T10:57:00.003+01:00</published><updated>2010-12-31T16:51:20.150Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Standardising RDF Syntaxes</title><content type='html'>&lt;p&gt;
One area of interest at the &lt;a href="http://www.w3.org/2009/12/rdf-ws/"&gt;RDF Next Steps Workshop&lt;/a&gt; is 
other RDF-related syntaxes, ones that are not RDF/XML.  &lt;a href="http://www.w3.org/TR/REC-rdf-syntax/"&gt;RDF/XML&lt;/a&gt; is the standard 
syntax; &lt;a href="http://www.w3.org/TR/rdf-testcases/#ntriples"&gt;N-Triples&lt;/a&gt; is defined as part of the RDF test suite but not formally as a syntax on the same level as RDF/XML; there is &lt;a href="http://www.w3.org/TR/rdfa-syntax/"&gt;RDFa&lt;/a&gt; for embedding in XHTML.
&lt;/p&gt;
&lt;p&gt;
RDF/XML is not easy to read as RDF.  &lt;a href="http://www.w3.org/TeamSubmission/turtle/"&gt;Turtle&lt;/a&gt; appeals because it more clearly shows the triple structure of the data.  &lt;a href="http://sw.deri.org/2008/07/n-quads/"&gt;N-Quads&lt;/a&gt; is a proposal to extend RDF file format to named graphs and &lt;a href="http://www4.wiwiss.fu-berlin.de/bizer/TriG/"&gt;TriG&lt;/a&gt; is a Turtle-inspired named graph syntax.  There is &lt;a href="http://www.hpl.hp.com/techreports/2004/HPL-2004-56.html"&gt;TriX&lt;/a&gt; but I've never come across that in the wild.
&lt;/p&gt;
&lt;p&gt;
Using XML had several advantages, such as comprehensive character set support, neutrality of format 
and reuse of parsers.  However, it's complicated in it's entirety, even after using an XML parser and it is quite expensive to parse, making parsing large (and not some large) files a significant cost.  Because it can't, practically, be processed by XSLT there are 
nowadays few advantages.
&lt;/p&gt;
&lt;p&gt;
All the non-XML formats, which are much easier to read and process, would be good to standardise but they are not without the need for sorting out some details.
Details matter when you're dealing with anything over a trivial amount of data 
and when's it's millions of triples, it's just a friction point to get the data 
cleaned up if there is disagreement between information publisher and 
information consumer.&lt;/p&gt;
&lt;p&gt;
&lt;p&gt;&lt;b&gt;Turtle&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
Turtle takes the approach of using &lt;a href="http://en.wikipedia.org/wiki/UTF-8"&gt;UTF-8&lt;/a&gt; as the character set, rather than relying on character set control like XML.  Given that nowadays UTF-8 support is well understood and widely available, the internationalization issues of different scripts are best dealt with that way.  Parsers are both simple to write and fast. 
(The tricks needed to get Java to parser fast would be a subject for a separate discussion.)&lt;/p&gt;
&lt;p&gt;
As Turtle is the more mature of the possible syntaxes, it is also the best 
worked out. One issue I see is the migration from a one-standard-syntax world to a two-standard-syntax world 
and it's not without its practical problems.  What if system A speaks RDF/XML only, and system B speaks only Turtle?  How long will it take for uses of content negotiation take to catch up? Going from 
V-nothing to V1 of a system (which is where we are now) is usually quicker than 
going from V1 to V2 as the need to upgrade is much less.  If it ain't broke why change? 
&lt;/p&gt;
&lt;p&gt;
Turtle can write graphs that RDF/XML can't encode.  If the property can't be split into namespace and local name, then RDF/XML can't represent it.  An XML qname must have a local part of at least one alphabetic character. This isn't common but these details arise and cause problems (that is, costs) when exchanging data at scale.
&lt;/p&gt;
&lt;p&gt;
What would be useful would be a set of language tokens to build all sorts of languages, like rule languages but at the moment there some unnecessary restrictions in Turtle on prefixed name (Turtle calls them qnames but they are not exactly XML &lt;a href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames"&gt;qnames&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
Turtle disallows:
&lt;/p&gt;
&lt;pre&gt;employee:1234&lt;/pre&gt;
&lt;p&gt;
because the local part starts with a digit.  In data converted from existing (non-RDF) data this is a nuisance, and one that caused SPARQL to allow it, based on community feedback.
&lt;/p&gt;
&lt;p&gt;
But there are other forms that can be useful that are not allowed (and aren't in SPARQL):
&lt;/p&gt;
&lt;pre&gt;ex:xyz#abc&lt;/pre&gt;
&lt;pre&gt;ex:xyz/abc&lt;/pre&gt;
&lt;pre&gt;ex:xyz?parm=value&lt;/pre&gt;
&lt;p&gt;
The last one might be a bit extreme but the first two or just using the prefix 
to tidy up long IRIs. Partial alignment with XML qnames makes no sense in Turtle.  Extending the range of characters to include &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt; and maybe a few others, makes prefixed names more useful.  Issues just like this lead to the &lt;a href="http://www.w3.org/TR/curie/"&gt;CURIE syntax&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
While these URIs can be written in Turtle, it needs the long form, with &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt;, and the only way to abbreviate is via the base 
IRI, but you can only have one base URI. It's a workaround really that gets ugly 
when the advantage of Turtle is that it is readable. Extending the range of 
characters in the local part does not invalidate old data; it does create 
friction in interoperability so we have one last chance to sort this out if 
Turtle is to be standardised.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;N-Quads&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&amp;lt;s&amp;gt; &amp;lt;p&amp;gt; &amp;lt;o&amp;gt; .&lt;/pre&gt;
&lt;pre&gt;&amp;lt;s&amp;gt; &amp;lt;p&amp;gt; &amp;lt;o&amp;gt; &amp;lt;g&amp;gt; .&lt;/pre&gt;

&lt;p&gt;
What could be simpler? N-Quads is N-Triples with an optional 4th field to give the graph name (or context - it wasn't designed specifically for named graphs, but let's just consider 
IRIs in the 4th field, not blank nodes or literals which the syntax allows).
&lt;/p&gt;
&lt;p&gt;
But TriG puts the graph name before the triples, while N-Quads puts it after.  Maybe N-Quads should be like TriG so that TriG can make N-Quads a subset.  Parsing this modified N-Quads only takes buffing of the tokens on the line and counting to 3 or 4 to determine if it's a triple or a quad.  Making TriG more flexible, at the cost of the slightly less intuitive graph name first, in what is basically a dump format, seems to me to be a good trade-off.
&lt;/p&gt;
&lt;p&gt;
Blank nodes labels need to be clarified - is the scope the graph or the document? Both are workable.  I'd choose scope-to-the-document, if only to avoid the confusion of two identical labels referring to to different bnodes, and it's occasionally useful to say that a bnode 
in one graph really is the same as another when using it as a transfer syntax 
(for example, when one graph is a subgraph of another). TriG has the same issue but the use of nested forms for graphs makes scoped-graph more reasonable (except that graphs can be split over different &lt;code&gt;{} &lt;/code&gt;blocks).  Doing the same in N-Quads and TriG is important, and my preference is document-scoped labels.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;TriG&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
TriG is a Turtle-like syntax for named graphs.  It is useful for writing down &lt;a href="http://www.w3.org/TR/rdf-sparql-query/#rdfDataset"&gt;RDF datasets&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
It has some quirks though.  Turtle is not a subset of TriG because the default graph needs to be wrapped in &lt;code&gt;{}&lt;/code&gt; but the prefixes need to 
be outside the &lt;code&gt;{}&lt;/code&gt;.  The default graph needs to be given in a single block, but named graphs can be fragmented (that was just an oversight in the spec).   It would be helpful to allow the unnamed graph be specificed as Turtle and similarly if an N-Quads file were legal TriG.
&lt;/p&gt;
&lt;p&gt;
TriG allows the N3-ish form:
&lt;/p&gt;
&lt;pre&gt;&amp;lt;g&amp;gt; = { ... } .&lt;/pre&gt;
&lt;p&gt;
I've seen some confusion about this form in the &lt;a href="http://data.gov.uk/"&gt;data.gov.uk&lt;/a&gt; data.  The addition "=" and ".", which are optional, cause confusion and at least one parser does not accept them as it wasn't expected.
&lt;/p&gt;
&lt;p&gt;
In N3, &lt;code&gt;=&lt;/code&gt; is a synonym for owl:sameAs but the relationship isn't likely to be owl:sameAs, read as N3, it's more likely to be &lt;a href="http://www.w3.org/2000/10/swap/doc/Reach"&gt;log:semantics&lt;/a&gt;.  Now I like the uniformity of the N3 data model, with graph literals (formulae) because of the simplicity and completeness it introduces but it's not RDF, it's an extension and it breaks all RDF-only systems.
&lt;/p&gt;
&lt;p&gt;
If &amp;lt;g&amp;gt; is the IRI of a graph document, it would be more like the N3:
&lt;/p&gt;
&lt;pre&gt; &amp;lt;g&amp;gt; log:semantics { ... } .&lt;/pre&gt;
&lt;p&gt;
or 
&lt;/p&gt;
&lt;pre&gt;
&amp;lt;g&amp;gt; log:semantics ?v .
?v owlSameAs { ... } .
&lt;/pre&gt;
&lt;p&gt;
Avoiding the variability of syntax, which brings no benefit, is better. Drop the 
optional adornment.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Summary&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;
None of these issues are roadblocks; they are just details that need sorting out to move from the current 
&lt;i&gt;de facto&lt;/i&gt; formats to specifications. When exchanging data between systems 
that are not built together, details matter.
&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/2552263859974412692/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=2552263859974412692' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/2552263859974412692'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/2552263859974412692'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2010/06/standardising-rdf-syntaxes.html' title='Standardising RDF Syntaxes'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-1766675741312576170</id><published>2009-12-14T15:29:00.002Z</published><updated>2009-12-14T15:31:51.336Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Running TDB on a cloud storage system</title><content type='html'>&lt;p&gt;
&lt;a href="http://project-voldemort.com/"&gt;Project Voldemort&lt;/a&gt; is an open-source (Apache2 license) distributed, scalable, fault-tolerant,  key-value storage system for large scale data.  Being a key-value store the only operations it provides are:
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;get(key) -&amp;gt; value&lt;/li&gt;
&lt;li&gt;put(key, value)&lt;/li&gt;
&lt;li&gt;delete(key)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Key and value can be various custom types but at the lowest level, they are arrays of bytes.  Serialization schemes on top of byte arrays given structure but access is only via the key (so no filters or joins as part of the store.  It's built for scale and speed, and fault tolerance.&lt;/p&gt;

&lt;p&gt;TDB has internal APIS so that difefrentindexing scheme or different stroage technologies can be plugged in. A key-value store can be used as the storage layer for TDB.  
&lt;/p&gt;

&lt;p&gt;There are two areas of storage needed: the node table (a 2-way mapping between the data making up the RDF terms and the associated, fixed size NodeId) and the indexes, which provide the matching of triple patterns. See the &lt;a href="http://openjena.org/wiki/TDB/Architecture"&gt;TDB Design Notes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But a key-value store isn't an ideal backend. The node table is a pair of key-value stores because all that is needed is lookup between RDF term and the NodeId.  The issues that arise are the granularity of access.  TDB heavily caches the mapping in the query engine. 
&lt;/p&gt;

&lt;p&gt;
The indexes don't naturally map to key-value access because looking up a triple pattern results in all matches.  There are (at least) two ways of doing this.  Either store something like all PO pairs and use S as a key (a bit like Jena's memory model), or use the key-value store to hold part of a datastructure and access it like a disk.
&lt;/p&gt;

&lt;p&gt;
TDB uses threaded B+Trees with a pluggable disk block layer (this is used to switch between 32 and 64 bit modes) so the key-value store a block storage is a simple fit.  Because B+Trees store the entries in sorted order, caching means that a block probably contains all the PO for a given S if a look up is by S so these two schemes end up being similar even though at the design level they are quite different.
&lt;/p&gt;

&lt;p&gt;Both apects are relying on the query engine doing caching to work sensibly to compensate for the mismatch in requirements (triple match for joins) and interface granularity (for node access).&lt;/p&gt;

&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Taylor Cowan has explored the S-&amp;gt;PO in his work putting 
&lt;a href="http://tech.groups.yahoo.com/group/jena-dev/message/39575"&gt;Jena
on Google App engine&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://ig.semanticsupport.org/"&gt;Infinite Graph for Jena&lt;/a&gt; uses the Jena memory model and pages data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Does Project Voldemort work as storage for TDB? Yes, and with only a small amount of code.  Not surprisingly, the performance is limited in this experimental system (e.g. storing invidiual RDF terms in the node table needs better management to avoid latency and overhead in the round trip to the remote table).  Truncating to only the used space then compressing would be useful on teh indexes (see
&lt;a href="http://www.vldb.org/pvldb/1/1453927.pdf "&gt;RDF-3X&lt;/a&gt; for an interesting compression scheme).  But it's a workable scheme and the style of using a key-value store shows TDB can be ported to a wide variety of environments because key-value stores are currently a very active area - project Voldemort provides a cloud-centric stiorage fabric.&lt;/p&gt;

&lt;p&gt;
I've  started putting experimental systems on github.  This experiment is available in the &lt;a href="http://github.com/afs/TDB-V"&gt;TDB/V repository&lt;/a&gt;.  These are not released, supported systems; they are the source code and development setup (for Eclipse usually). I used Project Voldemort release v0.57. 
&lt;/p&gt;</content><link rel='related' href='http://github.com/afs/TDB-V' title='Running TDB on a cloud storage system'/><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/1766675741312576170/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=1766675741312576170' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/1766675741312576170'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/1766675741312576170'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2009/12/running-tdb-on-cloud-storage-system.html' title='Running TDB on a cloud storage system'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-3509662869351338066</id><published>2009-10-01T14:47:00.003+01:00</published><updated>2009-12-28T19:49:57.066Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>BSBM-Jena</title><content type='html'>&lt;p&gt;This a version of the
&lt;a href="http://www4.wiwiss.fu-berlin.de/bizer/BerlinSPARQLBenchmark/"&gt;Berlin 
SPARQL Benchmark&lt;/a&gt; tools, modified to allow the query benchmark driver to work 
with a local database, rather than a SPARQL endpoint. I've changed &lt;code&gt;
benchmark.testdriver.TestDriver&lt;/code&gt; to accept a Jena assembler description.&lt;/p&gt;
&lt;pre&gt; TestDriver -runs ... -w ... -idir ...-o ... local:assembler.ttl&lt;/pre&gt;
&lt;p&gt;Git clone
&lt;a href="git://github.com/afs/BSBM-Jena.git"&gt;
git://github.com/afs/BSBM-Jena.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the repository, there are versions of ARQ and TDB with significant performance improvements. It will the run benchmark in a reasonable time now. There are some shell scripts to help run the benchmark 
as well.&lt;/p&gt;

&lt;p&gt;Update:&lt;/p&gt;

&lt;p&gt;The GIT repository has been renamed as "BSBM-Local".  The Jena pseudo URI scheme is now "jena:". The project now includes support for running tests directly on a Sesame native repository using the pseudo URI scheme "sesame:&lt;i&gt;directory&lt;/i&gt;" - this could be easily extended to any Sesame repository implementation.&lt;/p&gt;</content><link rel='related' href='http://github.com/afs/BSBM-Jena/' title='BSBM-Jena'/><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/3509662869351338066/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=3509662869351338066' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/3509662869351338066'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/3509662869351338066'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2009/10/bsbm-jena.html' title='BSBM-Jena'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5212287068235135329</id><published>2009-09-14T15:00:00.001+01:00</published><updated>2009-09-14T15:00:59.628+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Moving to Talis</title><content type='html'>&lt;p&gt;I'll be leaving HP soon when the semantic web group winds down.  I'll be joining the the &lt;a href="http://www.talis.com/platform/"&gt;platform division&lt;/a&gt; at Talis, still living in Bristol, working from home much of the time then travelling to Birmingham as needed . This is one of the reasons why Talis is attractive as a place to work is beause they understand such working arrangements.  I'll get to continue support and development of my contributions to Jena.
&lt;/p&gt;
&lt;p&gt;
And the first question I have been getting is about what will happen to Jena.
&lt;/p&gt;
&lt;p&gt;
Jena has a BSD-style licence so there is no block to continuing any use by any users nor continued development by the Jena developers.  But we plan to go further and become an open source project with no one commercial backer.  After discussions with HP, our current plan is to transfer the ownership of the copyright to a commercially neutral body.  In immediate terms, there is no change to people/companies using Jena but this change will make it easier to continue and expand the core developer community and indeed it enables us to accept contributions more easily.  It has been a (cultural, not legal) barrier that HP was seen to have controlling interest despite the fact we have always acted openly.
&lt;/p&gt;
&lt;p&gt;
I also get to continue participating in the &lt;a href="http://www.w3.org/2009/sparql/wiki/Main_Page"&gt;W3C SPARQL working group&lt;/a&gt;. The list of things the WG has decided it has the time and resources to work on is &lt;a href="http://www.w3.org/2009/sparql/wiki/index.php?title=FeatureProposal"&gt;here&lt;/a&gt;.  The charter states that no queries from the spec of 2008 will change.  The new thing for the working group &lt;a href="http://www.w3.org/2009/sparql/track/issues/17"&gt;to address&lt;/a&gt; is update, both as &lt;a href="http://www.w3.org/Submission/SPARQL-Update/"&gt;a language&lt;/a&gt; but also some RESTful operations.
&lt;/p&gt;
&lt;p&gt;
Exciting times.
&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/5212287068235135329/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=5212287068235135329' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/5212287068235135329'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/5212287068235135329'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2009/09/moving-to-talis.html' title='Moving to Talis'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-2115284086667883569</id><published>2008-12-27T16:39:00.003Z</published><updated>2008-12-27T16:43:51.691Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>A small mystery about deletion in T-Trees</title><content type='html'>&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/T-tree"&gt;T-Trees&lt;/a&gt; are a generalisation of &lt;a href="http://en.wikipedia.org/wiki/AVL_tree"&gt;AVL trees&lt;/a&gt;.  They are useful for in-memory databases because they have better packing densities than AVL trees and need less rotations.  They provide a sorted index (so they are not good as the only index structure in an in-memory RDF store). This posting is only loosely triple store or SPARQL related.&lt;/p&gt;

&lt;p&gt;The paper &amp;quot;&lt;a href="http://www.vldb.org/conf/1986/P294.PDF"&gt;A Study of Index Structures for Main Memory Database Management Systems&lt;/a&gt;&amp;quot; (Tobin J. Lehman and Michael J. Carey, VLDB 1986) has the details.&lt;/p&gt;

&lt;p&gt;T-Trees keep an array of items per tree node (usually a short array) and have 3 pointers and 2 integers per tree node stored as opposed to 3 pointers, 1 number per single item stored for AVL. (both can be done with 2 pointers, with no parent but it&amp;#39;s more complicated and the code has to run it&amp;#39;s own stack to record it&amp;#39;s path through the tree).  Make the array a few entries long, and a T-Tree is a bit more more compact; rotations only happen when the tree structure after a leaf-array fills up.&lt;/p&gt;

&lt;p&gt;I understand these algorithms in depth if I code them up.  My implementation of T-Trees which includes consistency checking because I find it easier to write data structure algorithms this way - lots of internal checking, lots of test cases and then move to large scale randomized insertion and deletion patterns because I don&amp;#39;t trust myself to enumerate all possibilities in a hand-written test suite.  Run the randomized tests for a few million iterations checking the structure for internal consistency constraints on every insertions and deletion.  Then disable (but don&amp;#39;t remove!) the checking code, and rely on the fact that &amp;quot;if (false)&amp;quot; compiles to nothing in Java and statics tend to get in-lined by the JIT.&lt;/p&gt;

&lt;p&gt;But one area is puzzling me.  The mystery, to me, is in the delete algorithm.  One feature of a T-Tree is that the internal nodes (internal nodes have both a left and right subtree) should always be larger than some minimum amount.&lt;/p&gt;

&lt;p&gt;The delete algorithm, from the paper, is (section 3.2.1):&lt;/p&gt;

&lt;BLOCKQUOTE style="font-family: 'times new roman'"&gt;
&lt;p&gt;3) Delete Algorithm

&lt;/p&gt;

&lt;p&gt;The deletion algorithm is similar to the insertion algorithm in the sense that the element to be deleted is searched for, the operation is performed, and then re-balancing is done if necessary. The algorithm works as follows:

&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Search for the node that bounds the delete value. Search for the delete value within this node, reporting an error and stopping if it is not found.&lt;/li&gt;

&lt;li&gt;If the delete will not cause an underflow (i.e. if the node has more than the minimum allowable number of entries prior to the delete), then simply delete the value and stop; else, if this is an internal node, then delete the value and borrow the greatest lower bound of this node from a leaf or half-leaf to bring this node’s element count back up to the minimum; else, this is a leaf or a half-leaf, so just delete the element. (Leaves are permitted to underflow, and half-leaves are handled in step 3.&lt;/li&gt;

&lt;li&gt;If the node is a half-leaf and can be merged with a leaf, coalesce the two nodes into one node (a leaf) and discard the other node. Proceed to step 5.&lt;/li&gt;

&lt;li&gt;If the current node (a leaf) is not empty, then stop; else, free the node and proceed to step 5 to re-balance the tree.&lt;/li&gt; 

&lt;li&gt;For every node along the path from the leaf up to the root, if the two subtrees of the node differ in height by more than one, perform a rotation operation. Since a rotation at one node may create an imbalance for a node higher up in the tree, balance-checking for deletion must examine all of the nodes on the search path until a node of even balance is discovered.&lt;/li&gt;
&lt;/ol&gt;
&lt;/BLOCKQUOTE&gt;

&lt;p&gt;But what if a half-leaf, a node with just one sub-node as a leaf, becomes less than the minimum size of a node, yet can not be merged with it&amp;#39;s leaf?  The t-tree is still valid - the size constraint is on internal nodes only.  But a half-leaf can be become an internal node by a rotation of the tree.  So our less-than-min-sized half-leaf can become an invalid internal node and the constraint on internal nodes is validated.

&lt;/p&gt;

&lt;p&gt;Several possible solutions ocurr to me (and probably more than just these):

&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Just don&amp;#39;t worry (works for me because I&amp;#39;m expecting insertion if much more important in the any usage I might make of the T-Tree implementation).  The internal node that was too small may become larger due to a later insertion.  But my internal consistency checking code is now weakened because there is a condition on internal nodes that is no longer always true.&lt;/li&gt;

&lt;li&gt;Treat a half-leaf more like an internal node with respect to deletion and pull up an entry from its leaf to keep the half-leaf at the minimum size. If the half-leaf has a left-leaf, this is the same as the rule for deletion in an internal node.  If the half-leaf has a right-leaf, the lowest element of the leaf is required, which is a shift down of all the other elements in the leaf so is less than ideal.&lt;/li&gt;

&lt;li&gt;Have special code in the rotation operations to move elements around when rotating a half-leaf into an internal node position.  This is like possibility 2, except delaying it until it is know it will cause an invalid internal node.  T-Trees already have a special case rotation on insertion anyway.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I choose the second way for now - fix up during deletion - because the checking code can now check half-leaves as well as internal nodes for size constraints, so catching problems earlier in some insert/delete sequence.

&lt;/p&gt;

&lt;p&gt;A search of the web does not find any mention of this - most web pages are either a copy of the wikipedia page or reference the original paper.

&lt;/p&gt;

&lt;p&gt;If anyone can help me out with this, then please leave a comment or get in touch.  I&amp;#39;d be surprised if it isn&amp;#39;t that I&amp;#39;m missing something obvious (T-Trees are not new) but the situation of a small half-leaf becoming an internal node does occur as I found from the randomized testing.

&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/2115284086667883569/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=2115284086667883569' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/2115284086667883569'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/2115284086667883569'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/12/small-mystery-about-deletion-in-t-trees.html' title='A small mystery about deletion in T-Trees'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-621648220385793980</id><published>2008-10-29T20:29:00.004Z</published><updated>2008-10-29T20:33:25.619Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Walking the Web</title><content type='html'>It's nice to see Freebase providing an RDF interface:&amp;nbsp; &lt;a href="http://rdf.freebase.com/"&gt;http://rdf.freebase.com/. &lt;/a&gt;
The example they give is &amp;lt;&lt;a href="http://rdf.freebase.com/ns/en.blade_runner"&gt;http://rdf.freebase.com/ns/en.blade_runner&lt;/a&gt;&amp;gt; 
so let's see what is actually there and how we might use the information. 
&lt;p&gt;
Each graph describing something contains Freebase URLs to be explored.&amp;nbsp; What we want is the ability to load data into our local store while 
some query 
is running, enabling the dataset to be enlarged as the query makes choices about 
how to proceed.&lt;/p&gt;
&lt;p&gt;
This is similar to &lt;a href="http://www.w3.org/2000/10/swap/doc/Processing"&gt;cwm&lt;/a&gt;'s log:semantics.
&lt;a href="http://www.w3.org/2000/10/swap/doc/Reach"&gt;
http://ww.w3.org/2000/10/swap/doc/Reach&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href="http://www.w3.org/TR/rdf-sparql-query/"&gt;SPARQL&lt;/a&gt;, the dataset 
is fixed. No good if you want to write a graph-walking process without some glue 
in your favourite programming language. In one way, it's scripting for the web 
but in a special way.&amp;nbsp; It's not a sequence of queries and updates; it's changing the collection of graphs, expanding the
&lt;a href="http://www.w3.org/TR/rdf-sparql-query/#rdfDataset"&gt;RDF dataset&lt;/a&gt; 
known to the application.&lt;/p&gt;
&lt;p&gt;Query 1 : See what's in the graph&lt;/p&gt;
&lt;p&gt;Let's first look at what's available at the example URL.&amp;nbsp; That does not 
require anything special: it's just a FROM clause (which in ARQ will 
content-negotiate for RDF; if you use a web browser you will see an HTML page):&lt;/p&gt;
&lt;pre class="box"&gt;PREFIX fb: &amp;lt;http://rdf.freebase.com/ns/&amp;gt;
SELECT *
FROM fb:en.blade_runner
{ ?s ?p ?o }&lt;/pre&gt;
&lt;p&gt;Hmm - 294 triples.&lt;/p&gt;
&lt;p&gt;Query 2 : Look for interesting properties&lt;/p&gt;
&lt;pre class="box"&gt;PREFIX fb: &amp;lt;http://rdf.freebase.com/ns/&amp;gt;
SELECT DISTINCT ?p
FROM fb:en.blade_runner
{
  ?s ?p ?o
}&lt;/pre&gt;
&lt;p&gt;62 distinct properties used.&amp;nbsp; fb:film.film.starring looks interesting.&lt;/p&gt;
&lt;p&gt;Query 3 : Follow the links&lt;/p&gt;
&lt;p&gt;As an experimental feature, consider a new SPARQL keyword &amp;quot;&lt;code&gt;FETCH&lt;/code&gt;&amp;quot; which takes a URL, or 
a variable bound to a URL by the time that part of the query is reached, and 
fetches the graph at that location.&lt;/p&gt;
&lt;p&gt;Now we fetch the documents at each of the URLs that are objects of the &lt;i&gt;
blade runner, film.film.starring&lt;/i&gt; triples.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FETCH&lt;/code&gt; loads the graph and places it in the dataset as a named graph, the name 
being the URL is fetched it from. We use &lt;code&gt;GRAPH&lt;/code&gt; to access the loaded graph. Done 
this way, triples from different sources are kept separately which might be 
important in deciding what sources to believe.&lt;/p&gt;
&lt;p&gt;This also shows a critical limitation: just placing in a named graph is a 
basic requirement for deciding what to believe but really there ought to be a 
lot more metadata about the graph, including when it was read, possibly why it 
was read (how we got here in the query) etc etc. But we are not an agent system 
so we will note this and move on.&lt;/p&gt;
&lt;p&gt;By poking around with &lt;code&gt;GRAPH ?personUUID { ?s ?p ?o}&lt;/code&gt; (60 triples) the property film.performance.actor looks hopeful.&lt;/p&gt;
&lt;pre class="box"&gt;PREFIX fb: &amp;lt;http://rdf.freebase.com/ns/&amp;gt;
SELECT ?actor
FROM fb:en.blade_runner
{
  fb:en.blade_runner fb:film.film.starring ?personUUID
  FETCH ?personUUID
  GRAPH ?personUUID
    { ?personUUID fb:film.performance.actor ?actor }
}&lt;/pre&gt;
&lt;p&gt;12 results.&lt;/p&gt;
&lt;pre class="box"&gt;--------------------------------------------
| actor                                    |
============================================
| fb:en.james_hong                         |
| fb:en.brion_james                        |
| fb:en.edward_james_olmos                 |
| fb:en.joanna_cassidy                     |
| fb:en.william_sanderson                  |
| fb:en.rutger_hauer                       |
| fb:authority.netflix.role.20000077       |
| fb:guid.9202a8c04000641f80000000054cbccc |
| fb:en.sean_young                         |
| fb:en.joe_turkel                         |
| fb:en.harrison_ford                      |
| fb:en.daryl_hannah                       |
--------------------------------------------&lt;/pre&gt;
&lt;p&gt;and more URLs to follow.&lt;/p&gt;
&lt;p&gt;Looking in the next graph, there is &lt;code&gt;fb:type.object.name&lt;/code&gt; so let's 
guess and use that.&amp;nbsp; But each time we have chosen a property, we didn't 
have to guess, we can follow that property URL itself:&lt;/p&gt;
&lt;pre class="box"&gt;PREFIX fb: &amp;lt;http://rdf.freebase.com/ns/&amp;gt;
SELECT *
FROM &lt;b&gt;fb:type.object.name&lt;/b&gt;
{
  ?s ?p ?o
}&lt;/pre&gt;
&lt;p&gt;but it's easier to &lt;a href="http://rdf.freebase.com/ns/type.object.name"&gt;read 
the description in HTML&lt;/a&gt; (and freebase is link following internally to build 
the page).&lt;/p&gt;
&lt;p&gt;Query 3 : The names of actors in &lt;i&gt;Blade Runner&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;So a query to find the names of actors in &amp;quot;Blade Runner&amp;quot; is:&lt;/p&gt;
&lt;pre class="box"&gt;PREFIX fb: &amp;lt;http://rdf.freebase.com/ns/&amp;gt;
SELECT ?actor ?name
FROM fb:en.blade_runner
{
  fb:en.blade_runner fb:film.film.starring ?personUUID
  FETCH ?personUUID
  GRAPH ?personUUID
    { ?personUUID fb:film.performance.actor ?actor }
  FETCH ?actor
  GRAPH ?actor
    { ?actor fb:type.object.name ?name }
}
ORDER BY ?actor&lt;/pre&gt;
&lt;p&gt;which gives:&lt;/p&gt;
&lt;pre class="box"&gt;
-------------------------------------------------------------------
| actor                                    | name                 |
===================================================================
| fb:authority.netflix.role.20000077       | "M. Emmet Walsh"     |
| fb:authority.netflix.role.20000077       | "M&amp;#12539;&amp;#12456;&amp;#12513;&amp;#12483;&amp;#12488;&amp;#12539;&amp;#12454;&amp;#12457;&amp;#12523;&amp;#12471;&amp;#12517;"    |
| fb:en.brion_james                        | "Brion James"        |
| fb:en.daryl_hannah                       | "Daryl Hannah"       |
| fb:en.daryl_hannah                       | "&amp;#1061;&amp;#1072;&amp;#1085;&amp;#1085;&amp;#1072;, &amp;#1044;&amp;#1101;&amp;#1088;&amp;#1080;&amp;#1083;"       |
| fb:en.daryl_hannah                       | "&amp;#1491;&amp;#1512;&amp;#1497;&amp;#1500; &amp;#1492;&amp;#1488;&amp;#1504;&amp;#1492;"          |
| fb:en.daryl_hannah                       | "&amp;#12480;&amp;#12522;&amp;#12523;&amp;#12539;&amp;#12495;&amp;#12531;&amp;#12490;"         |
| fb:en.edward_james_olmos                 | "Edward James Olmos" |
| fb:en.harrison_ford                      | "Harrison Ford"      |
| fb:en.harrison_ford                      | "&amp;#1060;&amp;#1086;&amp;#1088;&amp;#1076; &amp;#1043;&amp;#1072;&amp;#1088;&amp;#1088;&amp;#1110;&amp;#1089;&amp;#1086;&amp;#1085;"      |
| fb:en.harrison_ford                      | "&amp;#1060;&amp;#1086;&amp;#1088;&amp;#1076;, &amp;#1061;&amp;#1072;&amp;#1088;&amp;#1088;&amp;#1080;&amp;#1089;&amp;#1086;&amp;#1085;"     |
| fb:en.harrison_ford                      | "&amp;#1061;&amp;#1072;&amp;#1088;&amp;#1080;&amp;#1089;&amp;#1086;&amp;#1085; &amp;#1060;&amp;#1086;&amp;#1088;&amp;#1076;"       |
| fb:en.harrison_ford                      | "&amp;#1061;&amp;#1072;&amp;#1088;&amp;#1080;&amp;#1089;&amp;#1098;&amp;#1085; &amp;#1060;&amp;#1086;&amp;#1088;&amp;#1076;"       |
| fb:en.harrison_ford                      | "&amp;#1492;&amp;#1488;&amp;#1512;&amp;#1497;&amp;#1505;&amp;#1493;&amp;#1503; &amp;#1508;&amp;#1493;&amp;#1512;&amp;#1491;"       |
| fb:en.harrison_ford                      | "&amp;#12495;&amp;#12522;&amp;#12477;&amp;#12531;&amp;#12539;&amp;#12501;&amp;#12457;&amp;#12540;&amp;#12489;"       |
| fb:en.harrison_ford                      | "&amp;#21704;&amp;#37324;&amp;#26862;·&amp;#31119;&amp;#29305;"         |
| fb:en.harrison_ford                      | "&amp;#54644;&amp;#47532;&amp;#49832; &amp;#54252;&amp;#46300;"          |
| fb:en.james_hong                         | "James Hong"         |
| fb:en.joanna_cassidy                     | "Joanna Cassidy"     |
| fb:en.joe_turkel                         | "Joe Turkel"         |
| fb:en.rutger_hauer                       | "Rutger Hauer"       |
| fb:en.rutger_hauer                       | "&amp;#1061;&amp;#1072;&amp;#1091;&amp;#1101;&amp;#1088;, &amp;#1056;&amp;#1091;&amp;#1090;&amp;#1075;&amp;#1077;&amp;#1088;"      |
| fb:en.rutger_hauer                       | "&amp;#12523;&amp;#12488;&amp;#12460;&amp;#12540;&amp;#12539;&amp;#12495;&amp;#12454;&amp;#12450;&amp;#12540;"      |
| fb:en.rutger_hauer                       | "&amp;#39791;&amp;#26684;·&amp;#35946;&amp;#29246;"           |
| fb:en.sean_young                         | "Sean Young"         |
| fb:en.sean_young                         | "&amp;#1064;&amp;#1086;&amp;#1085; &amp;#1049;&amp;#1098;&amp;#1085;&amp;#1075;"           |
| fb:en.sean_young                         | "&amp;#1071;&amp;#1085;&amp;#1075;, &amp;#1064;&amp;#1086;&amp;#1085;"           |
| fb:en.sean_young                         | "&amp;#12471;&amp;#12519;&amp;#12540;&amp;#12531;&amp;#12539;&amp;#12516;&amp;#12531;&amp;#12464;"        |
| fb:en.william_sanderson                  | "William Sanderson"  |
| fb:guid.9202a8c04000641f80000000054cbccc | "Morgan Paull"       |
-------------------------------------------------------------------&lt;/pre&gt;

&lt;p&gt;
&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
We are left with a question: why use (extended) SPARQL? If you're doing it once, 
then a web browser is easier. After all, I used one to choose the properties to 
follow.&lt;/p&gt;
&lt;p&gt;
But with a query you can send it to someone else for them to reuse your 
knowledge, you can rerun it to look for changes, you can generalise and let the 
computer do some brute force search to find things that would take you, the 
human, a long time.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/621648220385793980/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=621648220385793980' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/621648220385793980'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/621648220385793980'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/10/walking-web.html' title='Walking the Web'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-3726792826047677220</id><published>2008-07-12T20:00:00.003+01:00</published><updated>2008-07-12T20:04:03.888+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>ARQ Property Paths</title><content type='html'>&lt;p&gt;SPARQL basic graph patterns only allow fixed length routes through the graph 
being matched. Sometimes, the application wants a more general path so ARQ has 
acquired syntax and built-in evaluation for a path language as part of the ARQ's 
extensions to SPARQL. The path language is like string regular expressions, 
except it's over predicates, not string characters.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jena.sourceforge.net/ARQ/property_paths.html"&gt;Property path 
documentation&lt;/a&gt; for ARQ.&lt;/p&gt;
&lt;h3&gt;Simple Paths&lt;/h3&gt;
&lt;p&gt;The first operator for simple paths is &amp;quot;/&amp;quot;, which is path concatenation, or 
following property links between nodes, the other simple path operator is &amp;quot;^&amp;quot; 
which is like &amp;quot;/&amp;quot; except the graph connection is traversed (it's the inverse 
property).&lt;/p&gt;
&lt;pre class="box"&gt;# Find the names of people 2 &amp;quot;&lt;code&gt;foaf:knows&lt;/code&gt;&amp;quot; links away.
PREFIX &amp;lt;http://xmlns.com/foaf/0.1/&amp;gt;
SELECT ?name
{ ?x foaf:mbox &amp;lt;mailto:alice@example&amp;gt; .
  ?x foaf:knows/foaf:knows/foaf:name ?name .
}&lt;/pre&gt;
&lt;p&gt;This is the same as the strict SPARQL query:&lt;/p&gt;
&lt;pre class="box"&gt;{
  ?x  foaf:mbox &amp;lt;mailto:alice@example&amp;gt; .
  ?x  foaf:knows [ foaf:knows [ foaf:name ?name ]]. 
}&lt;/pre&gt;
&lt;p&gt;or, with explicit variables:&lt;/p&gt;
&lt;pre class="box"&gt;{
  ?x  foaf:mbox &amp;lt;mailto:alice@example&amp;gt; .
  ?x  foaf:knows ?a1 .
  ?a1 foaf:knows ?a2 .
  ?a2 foaf:name ?name .
}&lt;/pre&gt;
&lt;p&gt;And these two are the same:&lt;/p&gt;
&lt;pre class="box"&gt; ?x foaf:knows/foaf:knows/foaf:name ?name . &lt;/pre&gt;
&lt;pre class="box"&gt; ?name ^foaf:name^foaf:knows^foaf:knows ?x .&lt;/pre&gt;
&lt;h3&gt;Complex Paths&lt;/h3&gt;
&lt;p&gt;The simple paths don't change the expressivity; they are a shorthand for part 
of a basic graph pattern and ARQ compiles simple paths by generating the 
equivalent basic graph patterns then merging adjacent ones together.&lt;/p&gt;
&lt;p&gt;Alternation, the &amp;quot;|&amp;quot; operator does not change the expressivity either - the 
same thing could be done with a SPARQL UNION.&lt;/p&gt;
&lt;pre class="box"&gt;# Use with Dublin core 1.0 or Dublin Core 1.1 &amp;quot;title&amp;quot;
 :book (dc10:title|dc11:title) ?title&lt;/pre&gt;
&lt;p&gt;Some complex paths do change the expressivity of language; the query can 
match things that can't be matched in a strictly fixed length paths because they 
allow arbitrary length paths through the use of &amp;quot;*&amp;quot; (zero or more), &amp;quot;+&amp;quot; (one or 
more), &amp;quot;?&amp;quot; (zero or one) as well as the form &amp;quot;{N,}&amp;quot; (N or more).&lt;/p&gt;
&lt;p&gt;Two very useful cases are:&lt;/p&gt;
&lt;pre class="box"&gt; # All the types, chasing the subclass hierarchy
 &amp;lt;http://example/&amp;gt; rdf:type/rdfs:subClassOf* ?type&lt;/pre&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;pre class="box"&gt; # Members of a list
 ?someList rdf:rest*/rdf:first ?member .&lt;/pre&gt;
&lt;p&gt;because &amp;quot;*&amp;quot; includes the case of a zero length path - all nodes are 
&amp;quot;connected&amp;quot; to themselves by a zero-length path.&lt;/p&gt;
&lt;h3&gt;Strict SPARQL&lt;/h3&gt;
&lt;p&gt;The &lt;a href="http://jena.sourceforge.net/ARQ/property_paths.html"&gt;Property 
path documentation&lt;/a&gt; shows how to install paths and name them with a URI so 
you can use a path in strict SPARQL syntax.&lt;/p&gt;
&lt;h3&gt;Other&lt;/h3&gt;
&lt;p&gt;There have been some other path-related extensions to SPARQL:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://sig.biostr.washington.edu/projects/ontviews/gleen/index.html"&gt;
 GLEEN&lt;/a&gt; is a library that provides path-functionality in graph matching 
 via property functions.&amp;nbsp; It also provides subgraph extraction based on 
 pattern.&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://psparql.inrialpes.fr/"&gt;PSPARQL&lt;/a&gt; allows variables in 
 paths&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://www.eswc2007.org/pdf/eswc07-kochut.pdf"&gt;SPARQLeR&lt;/a&gt; 
 which has path value type&lt;/li&gt;
&lt;/ul&gt;</content><link rel='related' href='http://jena.sourceforge.net/ARQ/property_paths.html' title='ARQ Property Paths'/><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/3726792826047677220/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=3726792826047677220' title='8 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/3726792826047677220'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/3726792826047677220'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html' title='ARQ Property Paths'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>8</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-8678944746641761320</id><published>2008-06-08T20:59:00.005+01:00</published><updated>2008-06-08T21:04:13.322+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>TDB: Loading UniProt</title><content type='html'>&lt;p&gt;&lt;a href="http://jena.sf.net/TDB/"&gt;TDB&lt;/a&gt; passed a milestone this week - a 
load of the complete &lt;a href="http://dev.isb-sib.ch/projects/uniprot-rdf/"&gt;UniProt&lt;/a&gt; V13.3 dataset.&lt;/p&gt;

&lt;p&gt;UniProt V13.3 is 1,755,773,303 triples (1.7 billion) of which 1,516,036,125 
are unique after duplicate suppression.&lt;/p&gt;

&lt;p&gt;This dataset is interesting in a 
variety of ways. Firstly, it's quite large. Secondly, it is the composite of a 
small number of different, related databases and has some large literals (complete protein 
sequences - some over 70k characters in a single literal) as well as the full text of many abstracts. 
(&lt;a href="http://swat.cse.lehigh.edu/projects/lubm/"&gt;LUBM&lt;/a&gt; doesn't have 
literals at all. Testing using both synthetic data and real-world data is 
necessary.)&lt;/p&gt;

&lt;p&gt;UniProt comes as a number of RDF/XML files.&amp;nbsp; These had already been 
checked before the loading, by parsing to give
&lt;a href="http://www.w3.org/2001/sw/RDFCore/ntriples/"&gt;N-Triples&lt;/a&gt;, using 
it as a sort of dump format. The Jena RDF/XML parser does extensive checking, and the 
data had some bad URIs. I find that most large datasets do throw up some 
warnings on URIs.&lt;/p&gt;

&lt;p&gt;TDB also does value-based storage for
&lt;a href="http://www.w3.org/TR/xmlschema-2/"&gt;XSD datatypes&lt;/a&gt; decimals. integer, 
dates, and dateTimes. Except there aren't very many. For example, there 
are just 18 occurrences of the value &amp;quot;1&amp;quot;, in any form, in the entire dataset. 
They are just xsd:ints in some cardinality constraints. I was a bit 
surprised by this. Given the size of the dataset, I expected none or lots 
of uses of the value 1, so I grepped the input data to check - it's much, much quicker 
to use SPARQL than run grep on 1.7 billion triples in gzip'ed files but working 
with N-triples makes it easy to produce small tools you can be sure that work. And indeed they are the only 1 values.  Trust the SPARQL query next time.&lt;/p&gt;</content><link rel='related' href='http://jena.sf.net/TDB' title='TDB: Loading UniProt'/><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/8678944746641761320/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=8678944746641761320' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/8678944746641761320'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/8678944746641761320'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/06/tdb-loading-uniprot.html' title='TDB: Loading UniProt'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-6549625354185506284</id><published>2008-03-25T18:47:00.002Z</published><updated>2008-03-25T18:51:57.734Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Two more ARQ extensions</title><content type='html'>&lt;p&gt;I've implemented two new extensions for ARQ:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Assignment&lt;/li&gt;
 &lt;li&gt;Sub-queries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both these expose facilities that are already in the query algebra.&amp;nbsp; 
Sub-queries are done by simply allowing query algebra operators to appear 
anywhere in the query, not requiring solution modifiers to only be at the 
outer level of the query, so it allows extensions like counting, to 
be inside the query and available to the rest of the pattern matching. An 
assigment operator existed as an algebra extension for optimization and to 
support ARQ &lt;code&gt;&lt;a href="http://jena.sourceforge.net/ARQ/select_expr.html"&gt;SELECT&lt;/a&gt;&lt;/code&gt;&lt;a href="http://jena.sourceforge.net/ARQ/select_expr.html"&gt; 
expressions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Both are syntactic extensions and 
are available if the query is parsed 
with language &lt;code&gt;Syntax.syntaxARQ&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Currently available in
&lt;a href="http://jena.sourceforge.net/ARQ/download.html"&gt;ARQ SVN&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Assignment&lt;/h3&gt;
&lt;p&gt;This assigns a computed value to a variable in the middle of a pattern. &lt;/p&gt;
&lt;pre&gt;LET (?x := ?y + 5 )&lt;/pre&gt;
&lt;p&gt;The assignment operator is &amp;quot;&lt;code&gt;:=&lt;/code&gt;&amp;quot;. A single &amp;quot;&lt;code&gt;=&lt;/code&gt;&amp;quot; is 
already the test for equals in SPARQL.&lt;/p&gt;
&lt;p&gt;This means that a computed value can be used in other pattern matching:&lt;/p&gt;
&lt;pre class="box"&gt; SELECT ?y ?area
 {
    ?x rdf:type :Rectangle ;
       :height ?h ;
       :width ?w .
    LET (?area := ?h*?w )
    GRAPH &amp;lt;otherShapes&amp;gt;
    {
      ?y :area ?area . # Shapes with the same area
    }
 }&lt;/pre&gt;
&lt;p&gt;Application writer can provide their own functions, maybe to do a little data 
munging to map between different formats:&lt;/p&gt;
&lt;pre class="box"&gt;   ?x  foaf:name  ?name .          # &amp;quot;John Smith&amp;quot;
   # Convert to a different style: &amp;quot;Smith, John&amp;quot; for example.
   LET (?vcardName := my:convertName(?name) )
   ?y vCard:FN ?vcardName .&lt;/pre&gt;
&lt;p&gt;There are some rules for the assignment:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;if the expression does not evaluate (e.g. unbound variable in the 
 expression), no assignment occurs and the query continues.&lt;/li&gt;
 &lt;li&gt;if the variable is unbound, and the expression evaluates, the variable 
 is bound to the value.&lt;/li&gt;
 &lt;li&gt;if the variable is bound to the same value as the expression evaluates, 
 nothing happens and the query continues.&lt;/li&gt;
 &lt;li&gt;if the variable is bound to a different value as the expression 
 evaluates, an error occurs and the current solution will be excluded from 
 the results.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ARQ already has expressions in
&lt;a href="http://jena.sourceforge.net/ARQ/select_expr.html"&gt;&lt;code&gt;SELECT&lt;/code&gt; 
expressions&lt;/a&gt; so a combination of sub-query and expression can achieve the 
same effect but it's unnatural and verbose and sometimes requires parts of the 
pattern matching to be written twice, inside and outside the sub-query.&lt;/p&gt;
&lt;p&gt;One place where LET might be useful is in a &lt;code&gt;CONSTRUCT&lt;/code&gt; query. In 
strict SPARQL, only terms found in the original data can be used for variables 
in the construct template but with LET-assignment:&lt;/p&gt;
&lt;pre class="box"&gt;   CONSTRUCT { ?x :lengthInInches ?inch }
   WHERE
   { ?x :lengthInCM ?cm
     LET (?inch := ?cm/2.54 )
   }&lt;/pre&gt;
&lt;p&gt;This isn't a new idea - see for example:
&lt;a href="http://www.uni-koblenz.de/%7Esschenk/publications/2007/KI2007SparqlSemantics.pdf" class="external text" title="http://www.uni-koblenz.de/~sschenk/publications/2007/KI2007SparqlSemantics.pdf" rel="nofollow"&gt;"A SPARQL Semantics based on Datalog"&lt;/a&gt; 
- although the syntax in ARQ is designed to group the terms better.&lt;/p&gt;
&lt;h3&gt;Sub-queries&lt;/h3&gt;
&lt;p&gt;A sub-query can be used to apply some solution modifier to a sub-pattern.&amp;nbsp; 
Useful examples include aggregation, especially
&lt;a href="http://jena.sourceforge.net/ARQ/group-by.html"&gt;grouping and counting&lt;/a&gt;, and &lt;code&gt;LIMIT&lt;/code&gt; 
with &lt;code&gt;ORDER BY&lt;/code&gt; to get only some of the results of a pattern match.&lt;/p&gt;
&lt;pre class="box"&gt; { SELECT (COUNT(*) AS ?c) { ?s ?p ?o } }&lt;/pre&gt;
&lt;p&gt;A sub-query is enclosed by &lt;code&gt;{}&lt;/code&gt; and must be the only thing inside 
those braces, the same style as
&lt;a href="http://www.openlinksw.com/weblog/oerling/?id=1296"&gt;Virtuoso Subqueries&lt;/a&gt;. 
The sub-query will be combined, with
&lt;a href="http://www.w3.org/TR/rdf-sparql-query/#defn_algJoin"&gt;SPARQL join&lt;/a&gt;, 
with other patterns in the same group. In the example &lt;/p&gt;
&lt;p&gt;Find how many people all persons with two or more phones foaf:knows:&lt;/p&gt;
&lt;pre class="box"&gt; PREFIX foaf: &amp;lt;&lt;a href="http://xmlns.com/foaf/0.1/"&gt;http://xmlns.com/foaf/0.1/&lt;/a&gt;&amp;gt;

 SELECT ?person ?knowsCount
 {
   # ?person who have 2 or more phones
   { SELECT ?person
     WHERE { ?person foaf:phone ?phone } 
     GROUP BY ?person 
     HAVING (COUNT(?phone) &amp;gt;= 2) 
   }
   # Join on ?person with how many people they foaf:knows
   { SELECT ?person (COUNT(?x) AS ?knowsCount)
     WHERE { ?person foaf:knows ?x .}
     GROUP BY ?person
   }
}&lt;/pre&gt;
&lt;p&gt;Queries with sub-queries can become complicated quite quickly so I usually 
write each of the part separately then combining them. &lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/6549625354185506284/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=6549625354185506284' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/6549625354185506284'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/6549625354185506284'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/03/two-more-arq-extensions.html' title='Two more ARQ extensions'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-847156145423014824</id><published>2008-02-19T12:13:00.003Z</published><updated>2008-02-19T12:21:11.176Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>First time out for TDB (pt 2)</title><content type='html'>Follow-on from &lt;a href="http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb.html"&gt;previous testing&lt;/a&gt;: a larger load of 100 million triples from &lt;a href="http://dev.isb-sib.ch/projects/uniprot-rdf/"&gt;UniProt&lt;/a&gt; 7.0a performed as follows on the SDB1 machine:
&lt;ul&gt;&lt;li&gt;115,517,840 triples&lt;/li&gt;&lt;li&gt;3903s (which is 29594 triples/s) -- or about 65 minutes&lt;/li&gt;&lt;/ul&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/847156145423014824/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=847156145423014824' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/847156145423014824'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/847156145423014824'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb-pt-2.html' title='First time out for TDB (pt 2)'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5202510086940563523</id><published>2008-02-13T10:53:00.006Z</published><updated>2008-02-13T15:53:38.256Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>First time out for TDB</title><content type='html'>&lt;p&gt;In other work, I've needed with a storage and indexing components.&amp;nbsp; To 
test them out, I've built a persistent &lt;a href="http://jena.sf.net"&gt;
Jena&lt;/a&gt; graph that behaves like an &amp;quot;RDF VM&amp;quot; whereby an application 
can handle more triples than memory alone, and it flexes to use and release its 
cache space based on the other applications running on the machine.&amp;nbsp; 
Working name: TDB. Early days, having only just finished writing the 
core code, but the core is now working to the point where it can load and query 
reliably.&lt;/p&gt;
&lt;p&gt;The RDF VM uses indexing code (currently, classical 
&lt;a href="http://en.wikipedia.org/wiki/B-tree"&gt;B-Trees&lt;/a&gt;) but in a way 
that matches the model of implementation of RDF.&amp;nbsp; There is no translation 
between the indexing and the disk idea of data. To check that made sense, I 
also tried with the B-Trees replaced by
&lt;a href="http://www.oracle.com/database/berkeley-db/je/index.html"&gt;Berkeley DB 
Java Edition&lt;/a&gt;. The BDB version behaves similarly with a constant slowdown. Of 
course, BDB-JE is more sophisticated with variable sized data items and 
duplicates (and transactions but I wasn't using them) so some overhead isn't 
surprising.&lt;/p&gt;
&lt;p&gt;I have also tried some other indexing structures but B-Trees have proved to 
scale better, from situations where there isn't much free memory to 64-bit 
machines where there is. &lt;/p&gt;
&lt;h3&gt;Node Loads&lt;/h3&gt;
&lt;p&gt;The main area of difference between the custom and BDB-backed implementations is in loading 
speed.&amp;nbsp; They handle RDF node representations differently. 
Storing them in a BDB database, or &lt;a href="http://jdbm.sf.net."&gt;JDBM&lt;/a&gt; htable, 
was adequate, giving a load rate of around 12K triples/s but it does generate too many disk 
writes to disk in an asynchronous pattern. Changing to streaming writes in TDB 
fixed that.&amp;nbsp; Because all the implementations fit the same framework, this technique 
can be rolled back into the BDB-implemented code. And BDB supports 
transactions.&amp;nbsp; The node technique may also help with a SQL database backed 
system like &lt;a href="http://jena.sourceforge.net/SDB/"&gt;SDB&lt;/a&gt; as well.&lt;/p&gt;
&lt;p&gt;I did try &lt;a href="http://lucene.apache.org/"&gt;Lucene&lt;/a&gt; - not a good idea.&amp;nbsp; 
Loading is too slow, but 
then that's not what Lucene is designed for.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;For testing, I used the Jena test suite for functional tests and the &lt;a href="http://www4.wiwiss.fu-berlin.de/benchmarks-200801/"&gt;RDF Store Benchmarks with DBpedia&lt;/a&gt; 
dataset for performance.&lt;p&gt;TDB works and gives the right results for the queries. 
(It would be 
good to have the results published as well as described in the
&lt;a href="http://www.w3.org/2001/sw/DataAccess/tests/r2"&gt;DAWG test suite&lt;/a&gt; so 
testing can be done.)&lt;p&gt;Query 2 benefits hugely from caching.&amp;nbsp; If run 
completely cold, after a reboot, it can take up to 30s. Running cold is also a 
lot more variable on machine sdb1 because other projects use the disk array.&lt;p&gt;Still room for improvement 
though. The new index code doesn't quite pack the leaf nodes optimally yet and some more profiling may 
show up hotspots but for a first pass just getting the benchmark to run is fine.&amp;nbsp; 
Rewriting queries, as an optimizer should, lowers the execution time for queries 
3 and 5 to 0.48s and 1.46s respectively.&amp;nbsp;
&lt;p&gt;The results for query 4 show one possible hotspot.&amp;nbsp; This query churns 
nodes executing the filters but the node retrieval code does not benefit from 
co-locality of disk access.&amp;nbsp; Fortunately alternative code for the node 
table does make co-locality possible and still run almost as fast. Time to get 
out the profiler.
&lt;p&gt;To illustrate the &amp;quot;RDF VM&amp;quot; effect; when run with Eclipse, Firefox etc all 
consuming memory, then my home PC is 5-10% slower than when run without them 
hogging bytes even on a dataset as small as 16 million triples.&lt;h3&gt;First Results 
for TDB&lt;/h3&gt;
&lt;table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse; border: 1px solid black; padding: 1px" id="table2"&gt;
  &lt;tr style="font-size: 11.0pt; font-style: normal; text-decoration: none; font-family: Calibri, Verdana, sans-serif; text-align: right; vertical-align: bottom; margin: 2ex"&gt;
    &lt;th style="text-align: center; border: 1px solid black; padding: 1px; background: #DBE5F1"&gt;
    Machine&lt;/th&gt;
    &lt;th style="text-align: center; border: 1px solid black; padding: 1px; background: #DBE5F1"&gt;
    sdb1&lt;/th&gt;
    &lt;th style="text-align: center; border: 1px solid black; padding: 1px; background: #DBE5F1"&gt;
    Home PC&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr style="font-size: 11.0pt; font-style: normal; text-decoration: none; font-family: Calibri, Verdana, sans-serif; text-align: right; vertical-align: bottom; margin: 2ex"&gt;
    &lt;th style="text-align: center; border: 1px solid black; padding: 1px; background: #DBE5F1"&gt;
    Date&lt;/th&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;11/02/2008&lt;/td&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;11/02/2008&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr style="font-size: 11.0pt; font-style: normal; text-decoration: none; font-family: Calibri, Verdana, sans-serif; text-align: right; vertical-align: bottom; margin: 2ex"&gt;
    &lt;th style="text-align: center; border: 1px solid black; padding: 1px; background: #DBE5F1"&gt;
    &amp;nbsp;&lt;/th&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr style="font-size: 11.0pt; font-style: normal; text-decoration: none; font-family: Calibri, Verdana, sans-serif; text-align: right; vertical-align: bottom; margin: 2ex"&gt;
    &lt;th style="text-align: center; border: 1px solid black; padding: 1px; background: #DBE5F1"&gt;
    Load (seconds)&lt;/th&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;686.582&lt;/td&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;726.1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr style="font-size: 11.0pt; font-style: normal; text-decoration: none; font-family: Calibri, Verdana, sans-serif; text-align: right; vertical-align: bottom; margin: 2ex"&gt;
    &lt;th style="text-align: center; border: 1px solid black; padding: 1px; background: #DBE5F1"&gt;
    Load (triples/s)&lt;/th&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;23,478&lt;/td&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;22,961&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr style="font-size: 11.0pt; font-style: normal; text-decoration: none; font-family: Calibri, Verdana, sans-serif; text-align: right; vertical-align: bottom; margin: 2ex"&gt;
    &lt;th style="text-align: center; border: 1px solid black; padding: 1px; background: #DBE5F1"&gt;
    &amp;nbsp;&lt;/th&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr style="font-size: 11.0pt; font-style: normal; text-decoration: none; font-family: Calibri, Verdana, sans-serif; text-align: right; vertical-align: bottom; margin: 2ex"&gt;
    &lt;th style="text-align: center; border: 1px solid black; padding: 1px; background: #DBE5F1"&gt;
    Query 1 (seconds)&lt;/th&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;0.05&lt;/td&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;0.03&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr style="font-size: 11.0pt; font-style: normal; text-decoration: none; font-family: Calibri, Verdana, sans-serif; text-align: right; vertical-align: bottom; margin: 2ex"&gt;
    &lt;th style="text-align: center; border: 1px solid black; padding: 1px; background: #DBE5F1"&gt;
    Query 2 (seconds)&lt;/th&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;1.30&lt;/td&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;0.73&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr style="font-size: 11.0pt; font-style: normal; text-decoration: none; font-family: Calibri, Verdana, sans-serif; text-align: right; vertical-align: bottom; margin: 2ex"&gt;
    &lt;th style="text-align: center; border: 1px solid black; padding: 1px; background: #DBE5F1"&gt;
    Query 3 (seconds)&lt;/th&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;9.87&lt;/td&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;9.50&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr style="font-size: 11.0pt; font-style: normal; text-decoration: none; font-family: Calibri, Verdana, sans-serif; text-align: right; vertical-align: bottom; margin: 2ex"&gt;
    &lt;th style="text-align: center; border: 1px solid black; padding: 1px; background: #DBE5F1"&gt;
    Query 4 (seconds)&lt;/th&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;30.99&lt;/td&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;35.32&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr style="font-size: 11.0pt; font-style: normal; text-decoration: none; font-family: Calibri, Verdana, sans-serif; text-align: right; vertical-align: bottom; margin: 2ex"&gt;
    &lt;th style="text-align: center; border: 1px solid black; padding: 1px; background: #DBE5F1"&gt;
    Query 5 (seconds)&lt;/th&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;29.87&lt;/td&gt;
    &lt;td style="border: 1px solid black; padding: 1px"&gt;34.24&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Breakdown of the sdb1 load:&lt;/p&gt;
&lt;table border="0" cellpadding="0" cellspacing="0" width="394" style="border:1px solid black; padding:1px; border-collapse: collapse; width: 294pt" id="table3"&gt;
  &lt;tr height="40" style="margin:2ex; height: 30.0pt; font-size:11.0pt; font-style:normal; text-decoration:none; font-family:Calibri, Verdana, sans-serif; text-align:right; vertical-align:bottom"&gt;
    &lt;th style="border:1px solid black; padding:1px; background:#DBE5F1; vertical-align: top; margin-top: 0; text-align:center"&gt;
    Loading&lt;/th&gt;
    &lt;th width="75" style="border:1px solid black; padding:1px; background:#DBE5F1; vertical-align: top; text-align:center"&gt;
    Triples&lt;/th&gt;
    &lt;th style="border:1px solid black; padding:1px; background:#DBE5F1; vertical-align: top; text-align:center"&gt;
    Load time seconds&lt;/th&gt;
    &lt;th style="border:1px solid black; padding:1px; background:#DBE5F1; vertical-align: top; text-align:center"&gt;
    Load rate Triples/s&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height="20" style="margin:2ex; height: 15.0pt; font-size:11.0pt; font-style:normal; text-decoration:none; font-family:Calibri, Verdana, sans-serif; text-align:right; vertical-align:bottom"&gt;
    &lt;th style="border:1px solid black; padding:1px; background:#DBE5F1; vertical-align: top; text-align:center"&gt;
    Overall&lt;/th&gt;
    &lt;td align="right" style="border:1px solid black; padding:1px; vertical-align: top" width="75"&gt;
    16,120,177&lt;/td&gt;
    &lt;td style="border:1px solid black; padding:1px; vertical-align: top"&gt;
    &lt;p align="right"&gt;686.582s&lt;/td&gt;
    &lt;td align="right" style="border:1px solid black; padding:1px; vertical-align: top"&gt;
    23,478&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height="20" style="margin:2ex; height: 15.0pt; font-size:11.0pt; font-style:normal; text-decoration:none; font-family:Calibri, Verdana, sans-serif; text-align:right; vertical-align:bottom"&gt;
    &lt;th style="border:1px solid black; padding:1px; background:#DBE5F1; vertical-align: top; text-align:center"&gt;
    infoboxes&lt;/th&gt;
    &lt;td align="right" style="border:1px solid black; padding:1px; vertical-align: top" width="75"&gt;
    15,472,624&lt;/td&gt;
    &lt;td align="right" style="border:1px solid black; padding:1px; vertical-align: top"&gt;
    651.543&lt;/td&gt;
    &lt;td align="right" style="border:1px solid black; padding:1px; vertical-align: top"&gt;
    24.084&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height="20" style="margin:2ex; height: 15.0pt; font-size:11.0pt; font-style:normal; text-decoration:none; font-family:Calibri, Verdana, sans-serif; text-align:right; vertical-align:bottom"&gt;
    &lt;th style="border:1px solid black; padding:1px; background:#DBE5F1; vertical-align: top; text-align:center"&gt;
    geocordinates&lt;/th&gt;
    &lt;td align="right" style="border:1px solid black; padding:1px; vertical-align: top" width="75"&gt;
    447,517&lt;/td&gt;
    &lt;td align="right" style="border:1px solid black; padding:1px; vertical-align: top"&gt;
    24.084&lt;/td&gt;
    &lt;td align="right" style="border:1px solid black; padding:1px; vertical-align: top"&gt;
    18,581&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height="20" style="margin:2ex; height: 15.0pt; font-size:11.0pt; font-style:normal; text-decoration:none; font-family:Calibri, Verdana, sans-serif; text-align:right; vertical-align:bottom"&gt;
    &lt;th style="border:1px solid black; padding:1px; background:#DBE5F1; vertical-align: top; text-align:center"&gt;
    homepages&lt;/th&gt;
    &lt;td align="right" style="border:1px solid black; padding:1px; vertical-align: top" width="75"&gt;
    200,036&lt;/td&gt;
    &lt;td align="right" style="border:1px solid black; padding:1px; vertical-align: top"&gt;
    10.955&lt;/td&gt;
    &lt;td align="right" style="border:1px solid black; padding:1px; vertical-align: top"&gt;
    18,259&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;


&lt;h3&gt;Setup&lt;/h3&gt;
&lt;p&gt;My home PC is a media centre - quad core, 3Gbyte RAM, consumer grade disks, 
running Vista and Norton Internet Security anti-virus. I 
guess it's quicker on the short queries because there is less latency to getting 
to the disk - even if the disks are slower - but falls behind when the query 
requires some crunching or a lot of data drawn from the disk.&lt;/p&gt;
&lt;p&gt;sdb1 is a machine in a blade rack in the data centre - details below.&lt;/p&gt;
&lt;p&gt;(My work's desktop machine, running WindowsXP has various Symantec antivirus, 
anti-intrusion software components and is slower for database work generally.)&lt;/p&gt;
&lt;p&gt;Disk: Data centre disk array over fiber channel.&lt;/p&gt;
&lt;pre class="box"&gt;/proc/cpuinfo (abbrev):

processor : 0
vendor_id : AuthenticAMD
cpu family : 15
model : 37
model name : AMD Opteron(tm) Processor 252
stepping : 1
cpu MHz : 1804.121
cache size : 1024 KB
fpu : yes
fpu_exception : yes
cpuid level : 1
TLB size : 1088 4K pages
address sizes : 40 bits physical, 48 bits virtual

processor : 1
vendor_id : AuthenticAMD
cpu family : 15
model : 37
model name : AMD Opteron(tm) Processor 252
stepping : 1
cpu MHz : 1804.121
cache size : 1024 KB
fpu : yes
fpu_exception : yes
TLB size : 1088 4K pages
clflush size : 64
address sizes : 40 bits physical, 48 bits virtual&lt;/pre&gt;
&lt;pre class="box"&gt;/proc/meminfo (abbrev):

MemTotal: 8005276 kB
MemFree: 435836 kB
Buffers: 40772 kB
Cached: 7099840 kB
SwapCached: 0 kB
Active: 1165348 kB
Inactive: 6141392 kB
SwapTotal: 2048276 kB
SwapFree: 2048116 kB
Mapped: 202868 kB&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/5202510086940563523/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=5202510086940563523' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/5202510086940563523'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/5202510086940563523'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb.html' title='First time out for TDB'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-2853417911497794313</id><published>2008-01-05T20:20:00.001Z</published><updated>2008-01-05T20:21:52.390Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Jena-Mulgara : example of implementing a Jena graph</title><content type='html'>&lt;p&gt;In Jena, 
&lt;a href="http://jena.sourceforge.net/javadoc/com/hp/hpl/jena/graph/Graph.html"&gt;Graph&lt;/a&gt; is an interface. It abstracts anything that looks like RDF - 
storage options, inference, other legacy data sources.&lt;/p&gt;

&lt;p&gt;The main operations are &lt;code&gt;find(Triple)&lt;/code&gt;, &lt;code&gt;add(Triple)&lt;/code&gt; and
&lt;code&gt;remove(Triple)&lt;/code&gt;. In 
addition, there are a number of getters to access handlers of various features 
(query, statistics, reification, bulk update, event manager) . 
Having handlers, rather than directly including all the operations for each 
feature reduces the size of the interface and makes it easier to provide default 
implementations of each feature.&lt;/p&gt;
&lt;p&gt;Implementing a graph rarely needs to directly implement the interface.&amp;nbsp; 
More usually, an implementation starts by inheriting from the class GraphBase.&amp;nbsp; 
A minimal (read-only) implementation just needs to implement &lt;code&gt;graphBaseFind&lt;/code&gt;. 
Wrapping legacy data often only makes sense as a read-only graph. To provide update operations, just implement the methods &lt;code&gt;performAdd&lt;/code&gt; and &lt;code&gt;performDelete&lt;/code&gt;, 
which are the methods called from the base implementations of &lt;code&gt;add(Triple)&lt;/code&gt; and
&lt;code&gt;remove(Triple). &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then for testing with &lt;a href="http://www.junit.org/"&gt;JUnit&lt;/a&gt;, inherit 
from AbstractGraphTest (override tests that don't make sense in a particular circumstance) 
and provide the &lt;code&gt;getGraph&lt;/code&gt; operation to generate a graph instance to test. &lt;/p&gt;
&lt;h3&gt;Application APIs&lt;/h3&gt;
&lt;p&gt;Graph/Triple/Node provide the low level interface in Jena; 
Model/Statement/Resource/Literal provide the
&lt;a href="http://jena.sourceforge.net/tutorial/RDF_API/index.html"&gt;RDF API&lt;/a&gt; 
and the &lt;a href="http://jena.sourceforge.net/ontology/index.html"&gt;ontology API&lt;/a&gt; 
provides an OWL-centric view of the RDF data.&lt;/p&gt;
&lt;p&gt;Where the graph level is minimal and symmetric (e.g. literal as subjects, 
inclusion of named variables) for easy implementation, the RDF API enforces the 
RDF conditions and provides a wide variety of convenience operations so writing a 
program can be succinct, not requiring the application writer to write 
unnecessary boilerplate code sequences. The ontology API does the same for OWL.&amp;nbsp; 
If you look at the &lt;a href="http://jena.sourceforge.net/javadoc/index.html"&gt;javadoc&lt;/a&gt;, you'll see the APIs are large but the system level 
interface is small.&lt;/p&gt;
&lt;p&gt;A graph is turned into a Model by calling &lt;code&gt;
ModelFactory.createModelForGraph(Graph)&lt;/code&gt;. All the key application APIs 
are interface-based although it's rarely needed to do anything other that use the 
standard Model-Graph bridge.&lt;/p&gt;
&lt;p&gt;Data access to the graph all goes via &lt;i&gt;find&lt;/i&gt;. All the read operations of 
application APIs, directly or indirectly, come down to calling Graph.find or a 
graph query handler. And the default graph query handler works by calling 
Graph.find, so once &lt;i&gt;find&lt;/i&gt; is implemented everything (read-only) works.
&lt;a href="http://jena.sourceforge.net/ARQ/app_api.html"&gt;ARQ&lt;/a&gt;'s
&lt;a href="http://jena.sourceforge.net/ARQ/app_api.html"&gt;query API&lt;/a&gt;, 
which includes a &lt;a href="http://www.w3.org/TR/rdf-sparql-query/"&gt;SPARQL&lt;/a&gt; 
implementation, included. It may not be the most efficient way but importantly all functionality is 
available and so the graph implementer can quickly get a first implementation up 
and running, then decide where and when to spend further development time - or 
whether that's needed at all.&lt;/p&gt;
&lt;h3&gt;Jena-Mulgara&lt;/h3&gt;
&lt;p&gt;An example of this is a prototype
&lt;a href="http://jena.hpl.hp.com/wiki/JenaMulgara"&gt;Jena-Mulgara bridge&lt;/a&gt; (work 
in progress as of Jan'08). This maps the Graph API to a Mulgara session object, 
which can be a local Mulgara database or a remote Mulgara server. The prototype 
is a single class together with a set of factory operations for more convenient 
creation of a bridge graph wrapped in all Jena's APIs.&lt;/p&gt;
&lt;p&gt;Implementing graph nodes, for IRIs and for literals is straight forward.&amp;nbsp; 
Mulgara uses &lt;a href="http://jrdf.sourceforge.net/"&gt;JRDF&lt;/a&gt; to represent these 
nodes and to represent triples. Mapping to and from Jena versions of the same is 
just the change in naming.&lt;/p&gt;
&lt;p&gt;Blank nodes are more interesting. A blank node in Jena has an internal label 
(which is not a URI in disguise). When working at the lowest level of &lt;i&gt;Graph&lt;/i&gt;, 
the code is manipulating things at a concrete, syntactic level. &lt;/p&gt;
&lt;p&gt;A blank node in Mulgara has an internal id but it can change. It really is 
the internal node index as I found out by creating a blank node with id=1 and 
found it turned into rdf:type which was what was really at node slot 1.
&lt;a href="http://gearon.blogspot.com/"&gt;Paul&lt;/a&gt; has been (patiently!)
&lt;a href="http://mulgara.org/pipermail/mulgara-general/2008-January/000240.html"&gt;
explaining this&lt;/a&gt; to me on a Mulgara mailing list. The session interface is an 
interface onto the RDF data, not an interface to extend the graph details to the 
client. Both approaches are valid - it's just different levels of abstraction.&lt;/p&gt;
&lt;p&gt;If the Jena application is careful about blank nodes (not assuming they are 
stable across transactions, and not deleting all triples involving some blank 
node, then creating triples involving that blank node) then it all works out. 
The most important case of reading data within a transaction is safe. Bulk 
loading is better down via the native Mulgara interfaces anyway. The 
Jena-Mulgara bridge enables a Jena application to access a Mulgara server 
through the same interfaces as any other RDF data.&lt;/p&gt;</content><link rel='related' href='http://jena.hpl.hp.com/wiki/JenaMulgara' title='Jena-Mulgara : example of implementing a Jena graph'/><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/2853417911497794313/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=2853417911497794313' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/2853417911497794313'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/2853417911497794313'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/01/jena-mulgara-example-of-implementing.html' title='Jena-Mulgara : example of implementing a Jena graph'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-4691605369637965896</id><published>2007-09-08T20:06:00.001+01:00</published><updated>2007-09-08T20:09:57.783+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Counting and GROUP BY</title><content type='html'>&lt;p&gt;One thing people miss from SPARQL is counting. It's a feature that working 
group didn't have time for.&lt;/p&gt;
&lt;p&gt;There's an implementation, following the design in SQL, in ARQ SVN which will 
be in the next release (v2.1). v2.1 introductions the
&lt;a href="http://jena.sourceforge.net/ARQ/bgp-optimization.html"&gt;cost-based optimizer&lt;/a&gt; 
for in-memory basic graph patterns by
&lt;a href="http://www.ifi.uzh.ch/ddis/people/markus-stocker/"&gt;Markus&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;It's a syntactic extension, not strict SPARQL, so you have to tell the system 
to parse queries in the &amp;quot;ARQ&amp;quot; langauge by passing &lt;code&gt;Syntax.syntaxARQ&lt;/code&gt; 
to the query factory.&lt;/p&gt;
&lt;p&gt;The following queries will work:&lt;/p&gt;
&lt;pre class="box"&gt;SELECT count(*) { ... }&lt;/pre&gt;
&lt;pre class="box"&gt;SELECT (count(*) AS ?count) { ... }&lt;/pre&gt;
&lt;p&gt;This is based on having SELECT expressions as well as grouping. Using AS to 
give a named variable is better style because the results can go into the 
SPARQLXML results format; otherwise, an internal variable is allocated and they 
have illegal SPARQL names.&lt;/p&gt;
&lt;p&gt;Other examples:&lt;/p&gt;
&lt;pre class="box"&gt;SELECT (count(*) AS ?rows)
{ ... }
GROUP BY ?x&lt;/pre&gt;
&lt;pre class="box"&gt;SELECT count(distinct *)
{ ... }
GROUP BY ?x&lt;/pre&gt;
&lt;pre class="box"&gt;SELECT count(?y)
{ ... }
GROUP BY ?x&lt;/pre&gt;
&lt;p&gt;What is being counted is solutions, in the case of &lt;code&gt;count(*)&lt;/code&gt; and 
names, in the case of &lt;code&gt;count(?var)&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;The current list of ARQ extensions is:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
 &lt;a href="http://seaborne.blogspot.com/2007/07/basic-federated-sparql-query.html"&gt;SERVICE&lt;/a&gt; - call-out from a query to a SPARQL endpoint over HTTP&lt;/li&gt;
 &lt;li&gt;SELECT expressions&lt;/li&gt;
 &lt;li&gt;GROUP BY&lt;/li&gt;
 &lt;li&gt;count()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So what features should be next?&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/4691605369637965896/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=4691605369637965896' title='9 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/4691605369637965896'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/4691605369637965896'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html' title='Counting and GROUP BY'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>9</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-4355336082245665237</id><published>2007-08-08T11:33:00.000+01:00</published><updated>2007-08-08T11:38:50.177+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Syntax Comparison of N3 and Turtle</title><content type='html'>&lt;p&gt;Some &lt;a href="http://jena.hpl.hp.com/wiki/Syntax_Comparison_of_N3_and_Turtle"&gt;notes on the syntax differences between N3 and Turtle&lt;/a&gt;, with a little
SPARQL thrown in.&lt;/p&gt;

&lt;p&gt;Some of the differences are low-level issues, which are enough to trip-up
machine reading of RDF data in these formats across the web.  It also
makes writing reliable RDF output writers harder because of variability of
parsers.&lt;/p&gt;

&lt;p&gt;RDF/XML really does win for web exchange but it is also a barrier to
people who find N3 or Turtle much easier to understand and produce.&lt;/p&gt;

&lt;p&gt;This collection of differences is not complete and I'll add and amend the
note. Please let know me of anything that should be added or corrected.&lt;/p&gt;</content><link rel='related' href='http://jena.hpl.hp.com/wiki/Syntax_Comparison_of_N3_and_Turtle' title='Syntax Comparison of N3 and Turtle'/><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/4355336082245665237/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=4355336082245665237' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/4355336082245665237'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/4355336082245665237'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/08/syntax-comparison-of-n3-and-turtle.html' title='Syntax Comparison of N3 and Turtle'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-8438016288800315387</id><published>2007-07-27T19:06:00.000+01:00</published><updated>2007-07-27T19:34:21.350+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Basic Federated SPARQL Query</title><content type='html'>&lt;p&gt;There are already ways to access remote RDF data. The simplest is to read a 
document which is an RDF graph and query it. Another way is with the
&lt;a href="http://www.w3.org/TR/rdf-sparql-protocol/"&gt;SPARQL protocol&lt;/a&gt; 
which 
allows a query to be sent to a remote service endpoint and the results sent back 
(in RDF, or an &lt;a href="http://www.w3.org/TR/rdf-sparql-XMLres/"&gt;XML-based results 
format&lt;/a&gt; or even a &lt;a href="http://www.w3.org/TR/rdf-sparql-json-res/"&gt;JSON one&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Several people writing on
&lt;a href="http://tech.groups.yahoo.com/group/jena-dev/messages"&gt;jena-dev&lt;/a&gt; have been attempting to created federated query 
applications where part of a query needs to sent to one or more remote services.&lt;/p&gt;
&lt;p&gt;Here's a basic building block for such federated query use cases. It adds the 
ability to make a SPARQL protocol call within a query, not just send the whole 
query to the remote service.&lt;/p&gt;
&lt;h4&gt;Syntax&lt;/h4&gt;
&lt;p&gt;A new keyword &lt;code&gt;SERVICE&lt;/code&gt; is added to the extended SPARQL query 
language in &lt;a href="http://jena.sf.net/ARQ/"&gt;ARQ&lt;/a&gt;. This keyword causes the 
sub-pattern to be sent to a named SPARQL service endpoint, and not matched 
against a local graph.&lt;/p&gt;
&lt;pre class="box"&gt;PREFIX : &amp;lt;http://example/&gt;
PREFIX  dc:     &amp;lt;http://purl.org/dc/elements/1.1/&gt;

SELECT ?a
FROM &amp;lt;mybooks.rdf&amp;gt;
{
  ?b dc:title ?title .
  &lt;b&gt;SERVICE&lt;/b&gt; &amp;lt;http://sparql.org/books&gt;
     { ?s dc:title ?title . ?s dc:creator ?a }
}&lt;/pre&gt;

&lt;h4&gt;Algebra&lt;/h4&gt;
&lt;p&gt;There is a new operator in the algebra.&lt;/p&gt;
&lt;pre class="box"&gt;(prefix ((dc: &amp;lt;http://purl.org/dc/elements/1.1/&gt;))
  (project (?a)
    (join
      (BGP [triple ?b dc:title ?title])
      (&lt;b&gt;service&lt;/b&gt; &amp;lt;http://sparql.org/books&gt;
          (BGP
            [triple ?s dc:title ?title]
            [triple ?s dc:creator ?a]
          ))
      )))&lt;/pre&gt;
&lt;h4&gt;Performance Considerations&lt;/h4&gt;
&lt;p&gt;This feature is a basic building block to allow remote access in the middle 
of a query, not a general solution to the issues in distributed query 
evaluation. The algebra operation is executed without regard to how selective the pattern 
is. So the order of the query will affect the speed of execution. Because it 
involves HTTP operations, asking the query in the right order matters a lot. 
Don't ask for the whole of a bookstore just to find book whose title comes from 
a local RDF file - ask the bookshop a query with the title already bound from 
earlier in the query.&lt;/p&gt;
&lt;h4&gt;Proper SPARQL&lt;/h4&gt;
&lt;p&gt;On top of this access operation, it would be possible to build a query 
processor that does what &lt;a href="http://darq.sf.net/"&gt;DARQ &lt;/a&gt;(the &lt;a href="http://darq.sf.net/"&gt;DARQ project&lt;/a&gt; 
is not active) does which is to read SPARQL query, analyse 
it, and build a query on the extended algebra.The execution order is chosen 
based on the selectivity of the triple patterns so it minimises network traffic.&lt;p&gt;
Hopefully, given the building block in ARQ, someone will add the necessary query 
execution analysis to give a query broker that accepts strict SPARQL and uses a 
number of SPARQL services to answer the query.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/8438016288800315387/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=8438016288800315387' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/8438016288800315387'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/8438016288800315387'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/07/basic-federated-sparql-query.html' title='Basic Federated SPARQL Query'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-6251326085246474191</id><published>2007-07-25T20:43:00.000+01:00</published><updated>2007-07-25T20:47:08.400+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>SSE</title><content type='html'>&lt;p&gt;Following on from
&lt;a href="http://seaborne.blogspot.com/2007/04/sparql-s-expressions.html"&gt;SPARQL 
S-Expressions&lt;/a&gt; :: &lt;a href="http://jena.hpl.hp.com/wiki/SSE"&gt;a description of SSE&lt;/a&gt;, a notation for RDF-related data structures (like the SPARQL algebra).&lt;/p&gt;</content><link rel='related' href='http://jena.hpl.hp.com/wiki/SSE' title='SSE'/><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/6251326085246474191/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=6251326085246474191' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/6251326085246474191'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/6251326085246474191'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/07/sse.html' title='SSE'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-2075516693155912005</id><published>2007-06-29T11:51:00.000+01:00</published><updated>2007-06-29T11:59:19.790+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Installing OracleXE</title><content type='html'>&lt;p&gt;We have been adding support for Oracle into &lt;a href="http://jena.sf.net/SDB"&gt;SDB&lt;/a&gt;.
As part of that, I installed Oracle XE ("Oracle Database 10g Express Edition")
on my WindowsXP machine at work, which is part of a Windows domain.&lt;/p&gt;

&lt;p&gt;It didn't go smoothly.  I hope these notes help someone else trying to do the same thing.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Summary&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install when logged in as administrator (NOT a domain user, even if in group Administrators).&lt;/li&gt;
&lt;li&gt;In order to use the command line SQL interface, you need to change
SQLNET.ORA from &lt;code&gt;(NTS)&lt;/code&gt; to &lt;code&gt;(none)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Account&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;The Oracle installation instructions say to
&lt;a href="http://download-uk.oracle.com/docs/cd/B25329_01/doc/install.102/b25143/toc.htm#CIHHJEHF"&gt;
log in with administrative privileges and be attached to the domain&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The installation proceeded with no errors, and the 5 Windows services start 
up OK. But I found that I could not connect to the database web-based admin 
interface.&lt;/p&gt;

&lt;p&gt;An additional symptom was that I can't change my domain password, nor
create Windows local user accounts.  In both cases, the error was that the password
does not meet the requirements on characters and length.  HP has tighter 
guidelines than the default for passwords but why installation of OracleXE broke a part of WindowsXP, I don't understand. After uninstalling OracleXE, I could change my password and create local user accounts as usual.&lt;/p&gt;

&lt;p&gt;There are lots of articles about not being about to contact the database home 
page but only a few were related to the situation I had:
&lt;a href="http://forums.oracle.com/forums/thread.jspa?messageID=1317065&amp;#1317065"&gt;
this one was most useful&lt;/a&gt;
 (that link is into the OracleXE forum which is not 
publicly readable - you have to register first).&lt;/p&gt;

&lt;p&gt;A way to see if your installation has been affected is to see if there is a 
file &lt;code&gt;server\dbs\SPFILEXE.ORA&lt;/code&gt;. If not, the installation is 
probably broken.&lt;/p&gt;

&lt;p&gt;Logging in as the local administrator account, uninstalling, reinstalling got 
an installation where I could get to the database home page and administer the 
database. I guess any local user account in group Administarors would work.&lt;/p&gt;

&lt;p&gt;But sqlplus.exe still didn't work. (The error is 
&amp;quot;ORA-12638: Credential retrieval failed&amp;quot;).
Following that thread again, I changed SQLNET.ORA to 
&lt;code&gt;&amp;nbsp;SQLNET.AUTHENTICATION_SERVICES = (none)&amp;nbsp;&lt;/code&gt; and could 
connect to the database from the SQL command prompt.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Afterwards ...&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Installing on Windows XP/Home worked fine but that is not a domained machine.&lt;/p&gt;
&lt;p&gt;And after all that, the &lt;a href="http://jena.sf.net/SDB"&gt;SDB&lt;/a&gt; &lt;a href="http://www.w3.org/TR/rdf-sparql-query/"&gt;SPARQL&lt;/a&gt; test suite 
runs perfectly with OracleXE.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/2075516693155912005/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=2075516693155912005' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/2075516693155912005'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/2075516693155912005'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/06/installing-oraclexe.html' title='Installing OracleXE'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-6856738701372728811</id><published>2007-06-22T13:51:00.000+01:00</published><updated>2007-06-22T14:15:10.486+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Joseki 3.1</title><content type='html'>&lt;p&gt;New version of &lt;a href="http://www.joseki.org/"&gt;Joseki&lt;/a&gt; released, primarily to
package together all the updated jars files for Jena and ARQ that Joseki uses.  At the same time, other jars have been upgraded so there are jar naming changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://downloads.sourceforge.net/joseki/joseki-3.1.zip"&gt;Joseki 3.1 download&lt;/a&gt;&lt;/p&gt;</content><link rel='related' href='http://downloads.sourceforge.net/joseki/joseki-3.1.zip' title='Joseki 3.1'/><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/6856738701372728811/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=6856738701372728811' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/6856738701372728811'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/6856738701372728811'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/06/joseki-31.html' title='Joseki 3.1'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-3873013516216914150</id><published>2007-06-10T16:22:00.001+01:00</published><updated>2007-06-10T16:22:42.886+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>SPARQL Papers at ESWC 2007</title><content type='html'>&lt;p&gt;There were 3 papers that particularly caught my SPARQL-driven attention at &lt;a href="http://www.eswc2007.org/"&gt;ESWC2007&lt;/a&gt;.
&lt;/p&gt;
&lt;hr/&gt;

&lt;p&gt;
&lt;a href="http://www.eswc2007.org/pdf/eswc07-kochut.pdf"&gt;SPARQLeR: Extended Sparql for Semantic Association Discovery&lt;/a&gt;&lt;br/&gt;
Krys J. Kochut, Maciej Janik
&lt;/p&gt;
&lt;p&gt;
This describes an extension to SPARQL for path variables.  A path is a regular expression of properties but in addition the paper describes the need for reverse properties and constraints on paths (like length).
&lt;/p&gt;
&lt;p&gt;
See also: PSPARQL: &lt;a href="http://psparql.inrialpes.fr/"&gt;
http://psparql.inrialpes.fr/&lt;/a&gt;
&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;
&lt;a href="http://www.eswc2007.org/pdf/eswc07-munoz.pdf"&gt;
Minimal Deductive Systems for RDF&lt;/a&gt;&lt;br/&gt;
Sergio Muñoz, Jorge Pérez  and Claudio Gutierrez.
&lt;/p&gt;
&lt;p&gt;
This is a proposal for reduced RDFS with just rdfs:domain, rdfs:range, rdfs:subClassOf, rdfs:subPropertyOf and rdf:type.
&lt;/p&gt;
&lt;p&gt;
This results in (on page 8) a small set of rules that have to be applied to the data but there is no core vocabulary. The rules can be applied to a streaming data stream, if the RDFS schema is known, because each rule only refers to at most one data triple.
&lt;/p&gt;
&lt;p&gt;
There are no containers, which may be inconvenient, but that might more usefully be covered by not using typing, but having a different property just to match these syntactic constructs. That removes the container vocabulary from interacting with the application vocabulary.
&lt;/p&gt;
&lt;p&gt;
A colleague here, Nipun Bhatia, has been working on streaming checking and rule application based on extending &lt;a href="http://jena.sourceforge.net/Eyeball/"&gt;Eyeball&lt;/a&gt;.  Nipun even adds cardinality validation by preprocessing the data to get
the triples in subject order.  Unix sort(1) is quite capable of sorting very large N-triples files in sensible amounts of time.
&lt;/p&gt;
&lt;p&gt;
&lt;hr/&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://www.eswc2007.org/pdf/eswc07-kiefer.pdf"&gt;
Semantic Process Retrieval with iSPARQL&lt;/a&gt;&lt;br/&gt;
Christoph Kiefer, Abraham Bernstein, Hong Joo Lee, Mark Klein and Markus Stocker.
&lt;/p&gt;
&lt;p&gt;
((Non) interest declaration: Markus is now spending a few months working with us in Bristol - this work was done before that.)
&lt;/p&gt;
&lt;p&gt;
The core of this paper is an example where statistical techniques beats logic.  There is a strong message to us all here - don't think logic and perfect organization is
necessarily the best solution to actual problems.
&lt;/p&gt;
&lt;p&gt;
As part of this work, but not the main argument of the paper, they created iSPARQL (&lt;em&gt;i&lt;/em&gt;=inprecise) which is an embedding of access to similarity metrics inside standard SPARQL without syntax changes.  They use property functions (they are using ARQ but the principle is quite general) to access the similarity engine. 
&lt;/p&gt;
&lt;p&gt;
The idea of embedding some index or other functionality that can provide bindings of variables for some expression seems like a general extension technique for SPARQL.  &lt;a href="http://jena.sourceforge.net/ARQ/lucene-arq.html"&gt;LARQ&lt;/a&gt; provides free-texting matching, using &lt;a href="http://lucene.apache.org/java/"&gt;
Lucene&lt;/a&gt; to do matching, and can include all the Lucene loose matching
&lt;/p&gt;</content><link rel='related' href='http://www.eswc2007.org/' title='SPARQL Papers at ESWC 2007'/><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/3873013516216914150/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=3873013516216914150' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/3873013516216914150'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/3873013516216914150'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/06/sparql-papers-at-eswc-2007.html' title='SPARQL Papers at ESWC 2007'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-3090000320201971796</id><published>2007-04-09T19:45:00.001+01:00</published><updated>2007-04-09T19:52:27.048+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>SPARQL S-expressions</title><content type='html'>&lt;p&gt;I'm interested in exposing the
&lt;a href="http://www.w3.org/TR/rdf-sparql-query/#sparqlAlgebra"&gt;SPARQL algebra&lt;/a&gt; 
support in ARQ for others (and me!) to experiment with
&lt;a href="http://www.w3.org/TR/rdf-sparql-query/"&gt;SPARQL&lt;/a&gt; and SPARQL
extensions. &lt;/p&gt;
&lt;p&gt;Having a syntax to be able to write algebra expressions is useful and makes 
writing test cases of the algebra easier. ARQ already uses
&lt;a href="http://en.wikipedia.org/wiki/S-expressions"&gt;S-expressions&lt;/a&gt; to detail 
the syntax tree so it was natural to use S-expressions for algebra expressions.&lt;/p&gt;
&lt;p&gt;I split the lowest levels of syntax out, to avoid having to write a many parsers. 
The result - SSE (SPARQL S-Expressions), a vaguely lisp-ish syntax. It consists 
of lists, RDF terms (IRIs, blank nodes, prefixed names and literals) in SPARQL 
syntax, and also words which are plain symbols without colon.&lt;/p&gt;
&lt;p&gt;Given this universal syntax, it's a matter of building code libraries to 
build the Java data structures from SSE. This is mundane but being able to do this without rebuilding a parser each time is easier.&lt;/p&gt;

&lt;p&gt;Example query:&lt;/p&gt;
&lt;pre class="box"&gt; PREFIX : &amp;lt;http://example/&amp;gt; 

 SELECT ?x ?v
 { ?x :p ?v 
   OPTIONAL { ?v :q ?w }
 }&lt;/pre&gt;
&lt;p&gt;which is the algebra expression:&lt;/p&gt;
&lt;pre class="box"&gt; (project (?x ?v)
   (leftjoin
     (bgp [triple ?x &amp;lt;http://example/p&amp;gt; ?v])
     (bgp [triple ?v &amp;lt;http://example/q&amp;gt; ?w])))&lt;/pre&gt;
&lt;p&gt;The use of either () or [] for lists, where beginning and end must match, aids 
readability but has no other significance.&lt;/p&gt;
&lt;p&gt;Another example: 'prefix' defines namespaces for the enclosed body:&lt;/p&gt;
&lt;pre class="box"&gt; (prefix ((: &amp;lt;http://example/&amp;gt;))
   (project (?c)
     (filter (= ?c &amp;quot;world&amp;quot;)
       (bgp [triple ?s :p ?c]) )))&lt;/pre&gt;
&lt;p&gt;It doesn't just capture strict SPARQL: tables-as-constants mean an SSE file 
can contain data as well&lt;/p&gt;
&lt;pre class="box"&gt;(prefix ((x: &amp;lt;http://example/&amp;gt;))
  (join
    (table
      (row [?x 1] [?y x:g])
      (row [?x 2] ))
    (table 
      (row [?y x:g])
      (row [?x 2] ))
  ))&lt;/pre&gt;
&lt;p&gt;evaluating to:&lt;/p&gt;
&lt;pre class="box"&gt; --------------------------
 | y                  | x |
 ==========================
 | &amp;lt;http://example/g&amp;gt; | 1 |
 | &amp;lt;http://example/g&amp;gt; | 2 |
 |                    | 2 |
 --------------------------&lt;/pre&gt;
&lt;p&gt;It's still &amp;quot;work in progress&amp;quot; and a bit rough - it can be inconsistent in 
layout, mainly due to slipping in a 
quick bit of hacking between doing other things; and also this leads to 
different coding styles in different places. But it's already proved to be an 
efficient way to write SPARQL algebra expressions and evaluate them for testing.&lt;/p&gt;
&lt;p&gt;And doing an Emacs mode for SSE is trivial.&lt;/p&gt;
&lt;p&gt;As an aside - I did a little web-trawling for the lisp information and 
&lt;a href="http://seaborne.blogspot.com/2007/04/some-lisp-links.html"&gt;gathered my links together&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/3090000320201971796/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=3090000320201971796' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/3090000320201971796'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/3090000320201971796'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/04/sparql-s-expressions.html' title='SPARQL S-expressions'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-1421332953032439442</id><published>2007-04-09T19:38:00.000+01:00</published><updated>2007-04-11T09:22:02.028+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Some Lisp Links</title><content type='html'>&lt;p&gt;A partial, incomplete set of links to things about Lisp from a couple hours
of web wandering. It's a bit of a change to be linking to web pages from the
last millennium.&lt;/p&gt;
&lt;h4&gt;Lisp / General&lt;/h4&gt;
&lt;p&gt;The function/value namespace thing:: Scheme vs Common Lisp:
&lt;a href="http://www.nhplace.com/kent/Papers/Technical-Issues.html"&gt;http://www.nhplace.com/kent/Papers/Technical-Issues.html&lt;/a&gt;.
Some of the arguments look a bit dated by modern standards.&lt;/p&gt;
&lt;h4&gt;Scheme&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://swiss.csail.mit.edu/projects/scheme/"&gt;
http://swiss.csail.mit.edu/projects/scheme/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://en.wikipedia.org/wiki/Scheme_(programming_language)"&gt;
Wikipedia - Scheme&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.r6rs.org/"&gt;http://www.r6rs.org/&lt;/a&gt; - The latest Scheme
definition. The nice thing, from a purely practical point of view, in this round
of agreement is the definition of the library system.&lt;/p&gt;
&lt;p&gt;
Online books:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://mitpress.mit.edu/sicp/full-text/book/book.html"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;
 (THE book)&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://www.scheme.com/tspl3/"&gt;The Scheme Programming Language&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://www.htdp.org/2003-09-26/Book/"&gt;How to Design Programs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CMU Scheme repository:
&lt;a href="ftp://ftp.cs.cmu.edu/user/ai/lang/scheme/0.html"&gt;
ftp://ftp.cs.cmu.edu/user/ai/lang/scheme/0.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Community: &lt;a href="http://community.schemewiki.org/"&gt;
http://community.schemewiki.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Object-oriented programming and Scheme&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://www.faqs.org/faqs/scheme-faq/part1/section-6.html"&gt;http://www.faqs.org/faqs/scheme-faq/part1/section-6.html&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://www-spi.lip6.fr/~queinnec/WWW/Meroon.html"&gt;Meroon&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="ftp://ftp.parc.xerox.com/pub/mops/tiny/"&gt;TinyCLOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SLIB (A portable scheme library - &amp;quot;portable&amp;quot; seems to mean &amp;quot;it can be ported&amp;quot;).
Included in SISC.&lt;a href="http://swissnet.ai.mit.edu/~jaffer/SLIB"&gt;
http://swissnet.ai.mit.edu/~jaffer/SLIB&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Websites:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://www.schemers.org/"&gt;http://www.schemers.org/&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://srfi.schemers.org/"&gt;http://srfi.schemers.org/&lt;/a&gt;&lt;br&gt;
 SRFI - Scheme Requests for Implementation&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://readscheme.org/"&gt;http://readscheme.org/&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://library.readscheme.org/"&gt;http://library.readscheme.org/&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;Original lambda papers:
 &lt;a href="http://library.readscheme.org/page1.html"&gt;http://library.readscheme.org/page1.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Scheme / JVM Implementations&lt;/h4&gt;
&lt;p&gt;Access to access to &lt;a href="http://jena.sourceforge.net/ARQ/"&gt;ARQ&lt;/a&gt; for a
&lt;a href="http://www.w3.org/TR/rdf-sparql-query/"&gt;SPARQL&lt;/a&gt; engine is important.&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://sisc-scheme.org/"&gt;http://sisc-scheme.org/&lt;/a&gt;&amp;nbsp; (GPL 2 or
MPL 1.1)&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://jscheme.sourceforge.net/"&gt;http://jscheme.sourceforge.net/&lt;/a&gt;
(Apache, zlib)&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://www.gnu.org/software/kawa/"&gt;http://www.gnu.org/software/kawa/&lt;/a&gt;
(GPL 2)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Scheme / Eclipse&lt;/h4&gt;
&lt;p&gt;One of things that Java does have going for it is a free, sophisticated IDEs.&amp;nbsp;
&lt;a href="http://www.eclipse.org/"&gt;Eclipse&lt;/a&gt; makes refactoring easy enough so
as to encourage it as the project grows. For a project like ARQ, it's near
essential to keep the naming and structure aligned to current terminology.
Writing lisp in Emacs does not count as an IDE these days.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://schemeway.sourceforge.net/"&gt;http://schemeway.sourceforge.net/&lt;/a&gt;
- not investigated yet.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://schemeway.sourceforge.net/update-site/"&gt;
http://schemeway.sourceforge.net/update-site/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Other Eclipse plug-ins? Other free, refactoring IDEs for Lisp?&lt;/p&gt;
&lt;h4&gt;Common Lisp / CLOS&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Common_lisp"&gt;Wikipedia - Common Lisp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Common_Lisp_Object_System"&gt;Wikipedia - 
CLOS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Book: &lt;a href="http://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html"&gt;Common Lisp the Language, 2nd Edition&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="A%20Brief%20Guide%20to%20CLOS"&gt;A Brief Guide to CLOS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jatha.sourceforge.net/"&gt;http://jatha.sourceforge.net/&lt;/a&gt;
Common LISP library in Java (LGPL)&lt;/p&gt;
&lt;p&gt;Common Lisp Wiki - &lt;a href="http://www.cliki.net/index"&gt;http://www.cliki.net/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Lisp and .net&lt;/h4&gt;
&lt;p&gt; &lt;a href="http://jena.sourceforge.net/ARQ/"&gt;ARQ&lt;/a&gt; runs fine on .Net, so a CLR (.net and mono) lisp implementation is also
interesting.&lt;/p&gt;
&lt;p&gt;I didn't have time for much of a look around but did find
Common Larceny:
&lt;a href="http://www.ccs.neu.edu/home/will/Larceny/CommonLarceny/download.html"&gt;
http://www.ccs.neu.edu/home/will/Larceny/CommonLarceny/download.html&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Not scheme nor Common Lisp:
&lt;a href="http://dotlisp.sourceforge.net/dotlisp.htm"&gt;http://dotlisp.sourceforge.net/dotlisp.htm&lt;/a&gt; (BSD)
but last release: July 9, 2003. Patches from &lt;a href="http://members.ozemail.com.au/~markhurd/"&gt;the authors home page.&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Other&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www-sop.inria.fr/mimosa/fp/Bigloo/"&gt;Bigloo&lt;/a&gt;: can call Java.
Compiles scheme to the JVM (?? and CLR), can link in Java classes but
I couldn't find a clear statement as to how to use in a mixed
environment.&lt;/p&gt;
&lt;p&gt;Download link to Bigloo 2.9a for the JVM broken (2007-04-08)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www-sop.inria.fr/mimosa/fp/Bigloo/"&gt;http://www-sop.inria.fr/mimosa/fp/Bigloo/&lt;/a&gt;
(GPL/LGPL)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/1421332953032439442/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=1421332953032439442' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/1421332953032439442'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/1421332953032439442'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/04/some-lisp-links.html' title='Some Lisp Links'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-6833470415062129745</id><published>2007-03-09T11:55:00.000Z</published><updated>2007-03-09T12:02:51.295Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>ARQ 2.0 beta</title><content type='html'>Just released the first ARQ 2.0 beta.  This version is a complete implementation of the SPARQL query language, and also includes the ARQ featurs of custom property functions and &lt;a href="http://seaborne.blogspot.com/2006/11/larq-lucene-arq.html"&gt;free-text search&lt;/a&gt;.  The plan is that this is the only beta.

The big change is that it uses the SPARQL algebra for query execution, and there is a query optimizer to choose an execution strategy that makes this better than simple evaluation of the algebra operators.

This makes ARQ up to date with where the workign group is going - that includes some changes of results to some queries, but, hopefully, these are restricted to queries that don't appear in the wild.</content><link rel='related' href='http://jena.sourceforge.net/ARQ' title='ARQ 2.0 beta'/><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/6833470415062129745/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=6833470415062129745' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/6833470415062129745'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/6833470415062129745'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/03/arq-20-beta.html' title='ARQ 2.0 beta'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-6607168567587576974</id><published>2007-03-08T21:49:00.000Z</published><updated>2007-03-09T13:24:32.181Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>SPARQL/Update</title><content type='html'>Modern applications are not single programs. Whether web or enterprise
systems, they are a number of components running on different computers.
What they do have in common is that they cooperate to deliver the
application.

SPARQL makes publishing RDF data on the web possible, but what about
those applications that maintain and update that RDF Data? There
needs to be a way for the application components to update their data.

SPARQL/Update (also know as SPARUL, pronounced a bit like "spiral") is
a language that takes the SPARQL style, and much of the grammar, and
provides both graph update and graph management operations.

It means those application components can talk a common language between
themselves or to a database.  Having a common update language then means
the application developer can choose one RDF toolkit for one component,
and another RDF system for another component, rather than having to
choose one programming language and find one system that does
everything required.

This first draft of &lt;a href="http://jena.hpl.hp.com/~afs/SPARQL-Update.html"
&gt;SPARQL/Update&lt;/a&gt; is published for comments, comment away!</content><link rel='related' href='http://jena.hpl.hp.com/~afs/SPARQL-Update.html' title='SPARQL/Update'/><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/6607168567587576974/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=6607168567587576974' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/6607168567587576974'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/6607168567587576974'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/03/sparqlupdate.html' title='SPARQL/Update'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-334946577582047690</id><published>2007-02-12T15:17:00.000Z</published><updated>2007-02-12T15:18:28.679Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Jena SDB</title><content type='html'>&lt;p&gt;SDB was &lt;a href="http://tech.groups.yahoo.com/group/jena-dev/message/27512"&gt;released
for the first time&lt;/a&gt; last week. While this is the first alpha release, it's 
actually at least the second internal query architecture and second loader 
architecture (Damian did the work to get the loader working fast).&lt;/p&gt;
&lt;p&gt;SPARQL now has a
&lt;a href="http://seaborne.blogspot.com/2006/11/algebra-for-sparql.html"&gt;formal 
algebra&lt;/a&gt;. &lt;a href="http://jena.sf.net/ARQ"&gt;ARQ&lt;/a&gt; is used to turn the SPARQL 
query syntax into a algebra expression; SDB takes over and compiles it first to 
a relational algebra(ish) structure then generates SQL syntax. Now there is a 
SPARQL algebra, this is all quite a bit simpler for SDB which is why this is the second 
design for query generation; much of the work now comes naturally from ARQ.&lt;/p&gt;
&lt;h4&gt;Patterns&lt;/h4&gt;
&lt;p&gt;At the moment, SDB only translates basic graph patterns, join and leftjoin 
expressions to SQL and leaves anything else to ARQ to stitch back together. For 
the current patterns, there are two tricky cases to consider:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SPARQL join relationships aren't exactly SQL's because they may involve 
  unbound variables.&lt;/li&gt;
  &lt;li&gt;Multiple OPTIONALs may need to be COALESCEd.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the first, sometimes the join needs to involve more than equality 
relationships like &amp;quot;&lt;code&gt;if col1 = null or col1 = col2&lt;/code&gt;&amp;quot;, which is a bit 
of scope tracking, and for the second, if a variable can be bound in two or more 
OPTIONALs , you have to take the first binding. The scope tracking is needed 
anyway.&lt;/p&gt;
&lt;p&gt;Over time, more and more of the SPARQL algebra expression will be translated 
to SQL.&lt;/p&gt;
&lt;h4&gt;Layouts&lt;/h4&gt;SDB supports a number of databases layouts in two main 
classes:&lt;ul&gt;
  &lt;li&gt;Type 1 layouts have a single triple table, with all information encoded 
  into the columns of the table.&lt;/li&gt;
  &lt;li&gt;Type 2 layouts use a triple table with a separate RDF terms table&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Type 1 layouts are good at supporting fine-grained API calls where the need 
to join to get the actual RDF terms is removed because they are encoded into the 
triple tables columns. Jena's existing database layer, RDB, is an example of 
this. When the move was made from Jena1 to Jena2, the
&lt;a href="http://www.hpl.hp.com/techreports/2003/HPL-2003-266.html"&gt;DB layout 
changed&lt;/a&gt; to a type 1 layout and it went faster. The two type 1 layouts 
supported are Jena's existing RDB layout and a debug version which encodes RDF 
terms in SPARQL-syntax directly into the triples table so you can simple read 
the table with an SQL query browser.&lt;/p&gt;
&lt;p&gt;Type 2 layouts, where the triples table has pointers to a nodes table, are 
better as SPARQL queries gets larger. Databases prefer small, fixed width columns to 
variable string comparisons. SDB has two variations, one using 4 bytes integer 
indexes and one using 8 byte hashes. The hash form means that hash of query 
constants can be calculated and don't have to be looked up in the SQL.&lt;/p&gt;
&lt;p&gt;It seemed that the hash form would be better all round.&amp;nbsp; But it isn't 
- loading was 2x slower (sometimes worse) despite the fact that RDF terms don't 
have to be inserted into the nodes table first to get their auto-allocated 
sequence id. Databases we have tried are significant slower indexing 8 byte 
quantities than 4 byte quantities and this dominates the load performance.&lt;/p&gt;
&lt;h4&gt;Next&lt;/h4&gt;
&lt;p&gt;There are three directions to go:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Inference support&lt;/li&gt;
  &lt;li&gt;Application-specific layout control&lt;/li&gt;
  &lt;li&gt;Filters support&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(1) and (2) are linked by the fact it is looking at a query and deciding, for 
certain known predicates and part-patterns, that different database tables 
should be used instead.&amp;nbsp; See
&lt;a href="http://www.hpl.hp.com/techreports/2006/HPL-2006-140.html"&gt;Kevin's work 
on property tables&lt;/a&gt; which uses the approach to put some higher level 
understanding of the data back into the RDF store. (3) is &amp;quot;just&amp;quot; a matter of 
doing it.&lt;/p&gt;
&lt;p&gt;And if you have some feature request, do suggest it.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/334946577582047690/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=334946577582047690' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/334946577582047690'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/334946577582047690'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/02/jena-sdb.html' title='Jena SDB'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5633815229444545604</id><published>2007-02-02T15:45:00.000Z</published><updated>2007-02-02T15:51:12.773Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>ARQ : what next?</title><content type='html'>&lt;p&gt;In January, I got round to releasing a new version of &lt;a href="http://jena.sf.net/ARQ"&gt;
ARQ&lt;/a&gt; and also doing a first full release of SPARQL version of
&lt;a href="http://www.joseki.org/"&gt;Joseki&lt;/a&gt;. ARQ version 1.5 had a problem with 
a performance hit for certain database usages (boo, hiss) but this is fixed in 
version 1.5.1.&lt;/p&gt;

&lt;p&gt;A key feature of this version of ARQ is support for
&lt;a href="http://jena.sourceforge.net/ARQ/lucene-arq.html"&gt;free text search&lt;/a&gt;. The core indexing is done by &lt;a href="http://lucene.apache.org/java/"&gt;Lucene&lt;/a&gt; 
2. Searches bind matching resources to a variable and are done using a
&lt;a href="http://jena.sourceforge.net/ARQ/extension.html#propertyFunctions"&gt;
property function&lt;/a&gt;. This means they can be fast because it directly 
exploits the indexing capabilities of Lucene.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre class="box"&gt;PREFIX pf: &amp;lt;java:com.hp.hpl.jena.query.pfunction.library.&amp;gt;
  SELECT ?doc {
    ?lit pf:textMatch '+text' .
    ?doc ?p ?lit
  }&lt;/pre&gt;

&lt;p&gt;What next? This release matches the published DAWG working draft but the 
working group is considering a
&lt;a href="http://seaborne.blogspot.com/2006/11/algebra-for-sparql.html"&gt;SPARQL 
algebra&lt;/a&gt; the formalization of the semantic of SPARQL to be based on some like 
the &lt;a href="http://en.wikipedia.org/wiki/Relational_algebra"&gt;relational algebra&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This version of ARQ has a number of query engines:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;QueryEngine&lt;/code&gt; is the one used normally.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;QueryEngineHTTP&lt;/code&gt; is a
  &lt;a href="http://www.w3.org/TR/rdf-sparql-protocol/"&gt;SPARQL protocol&lt;/a&gt; client 
  for remote query.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;QueryEngineRef&lt;/code&gt; is a direct, simple implementation of the SPARQL 
  algebra.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;QueryEngineQuad&lt;/code&gt; is a modified version of the reference query 
  engine that compiles SPARQL to quads, not triples.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;QueryEngineRef&lt;/code&gt; compiles a SPARQL query into the SPARQL algebra 
and it also provides a very simple evaluation of that algebra expression. The 
evaluation can be slow because it calculates all sub-expressions, then 
joins/left-joins/unions them but it is written to be correct, rather than fast. 
It is much better to extend the reference engine and convert the algebra 
expression into something cleverer.&lt;/p&gt;
&lt;p&gt;If you use the &lt;code&gt;--engine=ref&lt;/code&gt; argument to
&lt;a href="http://jena.sourceforge.net/ARQ/cmds.html#arq.query"&gt;&lt;code&gt;arq.sparql&lt;/code&gt;&lt;/a&gt;, 
it will use the reference engine. To see the algebra expression, use
&lt;a href="http://jena.sourceforge.net/ARQ/cmds.html#arq.qparse"&gt;&lt;code&gt;arq.qparse&lt;/code&gt;&lt;/a&gt; 
with arguments &lt;code&gt;--engine=ref --print=op&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The original query engine, which is still the default one, uses a 
substitution algorithm to evaluate a query. This will exploit the indexes that 
Jena maintains for all graphs by replacing any variables already bound to some 
value with their current value and so giving more information to the basic graph 
pattern matcher. This is done in a steaming fashion which is why this query 
engine only takes a constant amount of memory regardless of the data size.&lt;/p&gt;

&lt;p&gt;The next version of ARQ will combine the two approaches in a new query engine 
- where possible (and, for real world, queries that means nearly always), it 
will use the streaming, indexed approach to execution and only resort to a 
potentially more memory-intensive approach for parts of the query that really 
need it. The good news is that while it might sound like writing a whole new 
subsystem from scratch, it isn't. The SPARQL algebra compiler is already part of 
the reference engine and new query engine extends that; in addition, much of the 
code of the streaming engine is unchanged and it's just the conversion from the 
algebra to the iterator structure that needs to be written. &lt;/p&gt;

&lt;p&gt;It's also a chance to go back and clean up some code that has been around for 
a long time and, with hindsight, can be structured better. My programming style 
has changed over the time ARQ has been in development as I try different 
patterns and designs then learn what works and what doesn't (makes me get 
frustrated at some of the design of Java as well). Some old-style code does the 
right thing; it just does it in a way I would not choose to do it now. Don't get 
that chance very often.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/5633815229444545604/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=5633815229444545604' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/5633815229444545604'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/5633815229444545604'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/02/arq-what-next.html' title='ARQ : what next?'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-116492527651752430</id><published>2006-11-30T22:20:00.000Z</published><updated>2006-11-30T22:21:43.340Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>SPARQL Basic Graph Pattern Matching</title><content type='html'>&lt;p&gt;
I &lt;a href="http://seaborne.blogspot.com/2006/11/algebra-for-sparql.html"
&gt;wrote about&lt;/a&gt; the &lt;a href="http://www.w3.org/2001/sw/DataAccess/rq23/rq24-algebra.html"&gt;SPARQL algebra&lt;/a&gt; last time, not with the idea of a regular update about DAWG work but noting a  significant issue being considered by the working.  
I hope that the wider community will comment and contribute; much of the ground work for the algebra is drawn from outside the working group anyway.&lt;/p&gt;

&lt;p&gt;
This week DAWG made a significant decision in a different, but nearby area, that of basic graph pattern matching 
(BGP).&lt;/p&gt;
&lt;h4&gt;
Basic Graph Patterns&lt;/h4&gt;
&lt;p&gt;Basic graph patterns (BGPs) are the building block in SPARQL. They are a 
sequence of adjacent triple patterns in the query string. A BGP is matched 
against whatever is being queried and the results of matching feed into the 
algebra.&lt;/p&gt;

&lt;p&gt;
The decision is that no change, or rather the &amp;quot;&lt;a
href="http://www.w3.org/TR/rdf-sparql-query/#BGPsparql"
&gt;implementation hint&lt;/a&gt;" for BGP matching, made more formal, becomes the basis 
of SPARQL. No queries will be changed by the decision.
&lt;/p&gt;

&lt;h4&gt;The Issue&lt;/h4&gt;

&lt;p&gt;
Having reveal the punch line, what's the joke?
The issue is whether blank nodes in BGP matching behave like hidden, named variables or do they behave as a different kind of variable all together.  This matters for counting - it does not matter for the logical meaning of a solution.
&lt;/p&gt;

&lt;p&gt;Example data:&lt;/p&gt;

&lt;pre class="box"&gt;  :a :p 1 .
  :a :p 2 .&lt;/pre&gt;

&lt;p&gt;Example query pattern:&lt;/p&gt;

&lt;pre class="box"&gt; { ?x :p [] }&lt;/pre&gt;

&lt;p&gt;How many answers?  Blank nodes are existential variables in RDF; named variables (the regular &lt;code&gt;?x&lt;/code&gt; ones) are universal variables.  Queries don't return the binding of an existential; queries can return the binding of a named variable and the bound value of a named variables can be passed to other parts of the query (FILTERs, OPTIONALs 
etc) via the algebra.&lt;/p&gt;

&lt;p&gt;In the absence of a DISTINCT in the query, are the solutions to this pattern:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;1 : ?x = :a&lt;/li&gt;
 &lt;li&gt;2 : ?x = :a , ?x = :a&lt;/li&gt;
 &lt;li&gt;Either 1 or 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In OWL-DL, existential variables give more expressivity: if there is a disjunction in the ontology, the reasoner can know that something exists, but not need to find an actual value - and it may not be able to 
find the value anyway - but the reasoner does know there is "something there&amp;quot;.&lt;/p&gt;


&lt;h4&gt;Users and Implementers&lt;/h4&gt;

&lt;p&gt;For application writers, the main use of blank nodes in queries that I've seen is 
the convenience of using &lt;code&gt;[]&lt;/code&gt;&lt;/p&gt;

&lt;pre class="box"&gt; {
   ?x :something [ :p ?v ; :q ?w ]
 } &lt;/pre&gt;

&lt;p&gt;&lt;code&gt;[]&lt;/code&gt; saves having to have a named variable and splitting the 
expression. It would be one more thing to learn if that causes different answers 
(duplicates) to the pattern using query variables:&lt;/p&gt;

&lt;pre class="box"&gt; {
   ?x :something ?z .
   ?z :p ?v ; 
      :q ?w .
 } &lt;/pre&gt;

&lt;p&gt;especially if the first pattern had been written: &lt;/p&gt;

&lt;pre class="box"&gt; {
   ?x  :something _:bnode .
   _:bnode :p ?v ; 
           :q ?w . 
 } &lt;/pre&gt;

&lt;p&gt;which is the &lt;code&gt;[]&lt;/code&gt; example written out with a labelled blank node. 
This is also why it's BGPs that are the building block, not triple patterns - 
blank nodes are scoped to BGPs.&lt;/p&gt;
&lt;p&gt;For implementers, having two kinds of variable that behave different in matching can make life a harder, especially if they using some existing technology, like an SQL database 
which has one preferred type (universal-like).  Work on SPARQL semantics suggests that there can be one (complicated) SQL statement for one SPARQL query.  Nice if it's true because all the work that has gone into SQL database optimizers is 
reusable. Having two types of variables would need extra SQL to be generated like 
nested SELECTs, or some post-processing done. &lt;/p&gt;

&lt;p&gt;More work for implementers is not good; many open source RDF toolkits are built by people in their own time or by people with other things to do at work.  So, it 
might be a 
noticeable dampener on toolkit development and hence deployment.  Not a good idea to do this without a reasonable need.&lt;/p&gt;


&lt;h4&gt;DAWG Resolution&lt;/h4&gt;
&lt;p&gt;Logically, duplicates don't make any difference. DAWG decided there are two 
solutions for simple entailment matching example above. It's what 
implementations currently do.&lt;/p&gt;

&lt;p&gt;
The
DAWG process is often test case driven.  We use test cases as both a concrete way to define what results we expect and also to make concrete decisions.  So once consensus was emerging to have duplicates, the 
working group decided to approve a test case that captured that.  In this case, the test is 
&lt;a href="http://www.w3.org/2001/sw/DataAccess/tests/#rdfsemantics-bnode-type-var"
&gt;rdfsemantics-bnode-type-var&lt;/a&gt; (the example above is the same idea, just 
shorter).
&lt;/p&gt;

&lt;h4&gt;Defining BGP Matching for SPARQL&lt;/h4&gt;

&lt;p&gt;
In &lt;a href="http://www.w3.org/TR/2006/WD-rdf-sparql-query-20060220/"&gt;Last Call 2&lt;/a&gt;, 
the &lt;a href="http://www.w3.org/TR/2006/CR-rdf-sparql-query-20060406/"&gt;first CR 
publication&lt;/a&gt; and the 
&lt;a href="http://www.w3.org/TR/2006/WD-rdf-sparql-query-20061004/"&gt;intermediate publication&lt;/a&gt; 
versions of SPARQL, BGP matching is a 
&lt;a href="http://www.w3.org/TR/2006/CR-rdf-sparql-query-20060406/#BasicGraphPatternMatching"&gt;complicated definition&lt;/a&gt; that allows for different entailment regimes for extensibility 
within a single entailment framework.  SPARQL is defined for simple entailment, and 
so for anything where there a virtual graph, but it allows for extension to more complicated entailment regimes, like OWL-DL.&lt;/p&gt;

&lt;p&gt;The trouble is the matching definition is that it has a bug in it; it allows too many solutions when the graph is redundant.  The bug has to be fixed. &lt;/p&gt;
&lt;p&gt;SPARQL is defined for &lt;a href="http://www.w3.org/TR/rdf-mt/#entail"&gt;simple 
entailment&lt;/a&gt;. With this decision on how blank nodes behave, the working group can now rework 
the BGP matching.&amp;nbsp; The options are outlined in the message
&lt;a href="http://lists.w3.org/Archives/Public/public-rdf-dawg/2006OctDec/0140.html"&gt;2006OctDec/0140&lt;/a&gt;


and either of the variable mapping approaches can be made to work. It's more 
akin to a formalised version of the
&lt;a href="http://www.w3.org/TR/2005/WD-rdf-sparql-query-20050721/"&gt;last call 1&lt;/a&gt; 
style and the &lt;a
href="http://www.w3.org/TR/rdf-sparql-query/#BGPsparql"
&gt;implementation hint&lt;/a&gt; of the complex version.&lt;/p&gt;
&lt;h4&gt;... and Extensibility&lt;/h4&gt;
&lt;p&gt;Extensibility comes by replacing the whole of BGP matching, with just a few 
natural conditions such as all named variables must be bound in a BGP match and there are no accidental 
clashes of blank nodes. &lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;(Vested interest declaration)&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;OK - &lt;a href="http://jena.sourceforge.net/ARQ"&gt;ARQ&lt;/a&gt; isn't built on SQL; it's a self contained query engine with various extension points - by default, it queries any 
&lt;a href="http://jena.sourceforge.net/"&gt;Jena&lt;/a&gt; graph and exploits Jena's direct connection to the storage layer but only for basic graph patterns, not more complex patterns. 
It could sort out the two types of variables quite easily.  &lt;/p&gt;

&lt;p&gt;But we also have a Jena SPARQL database engine (called SDB) that is built on SQL and is specifically designed for SPARQL, for large datasets 
and for named graphs.&lt;/p&gt;

&lt;p&gt;SDB fits in as an ARQ query engine and the more it can turn into a single SQL 
statement the better. All of the query being the ideal case (and hopefully the 
normal one).&amp;nbsp; So making the translation to a relational quad store simpler 
is helpful for SDB.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/116492527651752430/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=116492527651752430' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/116492527651752430'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/116492527651752430'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/11/sparql-basic-graph-pattern-matching.html' title='SPARQL Basic Graph Pattern Matching'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-116429409503210902</id><published>2006-11-23T15:00:00.000Z</published><updated>2006-11-24T15:58:56.253Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>An Algebra for SPARQL</title><content type='html'>&lt;p&gt;SPARQL, &lt;a href="http://la.wikipedia.org/wiki/Gallia"&gt;like Gaul&lt;/a&gt;,
is dividied into three parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Basic graph pattern matching&lt;/li&gt;
  &lt;li&gt;Graph expressions&lt;/li&gt;
  &lt;li&gt;Solution modifiers &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basic graph patterns (BGPs) are a block of adjacent triple patterns
that match, or don't match, all together.  In BGP matching every named
variable must have some value for the BGP to have been matched.  Filters
add restrictions on the values variables can take.&lt;/p&gt;

&lt;p&gt;They are also an extension point in SPARQL because you can plug in
a different BGP matcher (e.g. a DL reasoner or a wrapper for legacy
SQL data), then reuse the other two layers to form complex queries out
of the exact matches from BGP matching.&lt;/p&gt;

&lt;p&gt;Graph expressions (&lt;code&gt;OPTIONAL&lt;/code&gt;, &lt;code&gt;UNION&lt;/code&gt;, 
&lt;code&gt;GRAPH&lt;/code&gt;, Groups (things between {}) combine BGPs in various
 ways to give more complicated patterns. Graph expressions are recursive
 so you can have patterns within patterns.  A SPARQL query has one
 graph expression in the WHERE clause.&lt;/p&gt;

&lt;p&gt;Solution modifiers (Project, &lt;code&gt;DISTINCT&lt;/code&gt;, 
&lt;code&gt;ORDER BY&lt;/code&gt;, &lt;code&gt;LIMIT/OFFSET&lt;/code&gt;) take the output of
matching the query graph pattern and process it in various ways to
yield the result set.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Current Situation&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The semantics for SPARQL have, so far, been declarative and top-down.
A solution to a query passes if it meets all the conditions following
from the definitions of each of the SPARQL graph pattern forms and filters.
That means, in theory, the whole of the solution is available.&lt;/p&gt;

&lt;p&gt;In fact, ARQ builds solutions up by adding the
minimum necessary at each subpattern to make the solution match.
This is what gives ARQ 
streaming evaluation which keeps the total memory use down.  But the
effect is the same, whole solutions are available everywhere in the
pattern.&lt;/p&gt;

&lt;p&gt;Another way is to have a bottom-up algebra.  The 
&lt;a href="http://en.wikipedia.org/wiki/Relational_algebra"&gt;relational
algebra&lt;/a&gt; works this way. Subexpressions are evaluated
to give tables (relations) and then these tables combined together
to form new tables.&lt;/p&gt;

&lt;p&gt;It turns out that these are nearly the same as shown by
&lt;a href="http://dowhatimean.net/"&gt;Richard Cyganiak&lt;/a&gt; and
&lt;a href="http://ing.utalca.cl/~jperez/"&gt;Jorge Perez&lt;/a&gt; et al
(see references below).
The class of graph patterns that differ are a certain kind of
nested
&lt;code&gt;OPTIONAL&lt;/code&gt; where a variable is used on the outside,
fixed part, and in the inner &lt;code&gt;OPTIONAL&lt;/code&gt;, but not in
between.&lt;/p&gt;

&lt;pre class="box"&gt;SELECT *
{ :x1 :p &lt;b&gt;?v&lt;/b&gt; .
  OPTIONAL
  { :x3 :q ?w .
    OPTIONAL { :x2 :p &lt;b&gt;?v&lt;/b&gt; }
  }
}&lt;/pre&gt;

&lt;p&gt;Now that is a rather unusual query.
The tricky bit is the use of &lt;code&gt;?v&lt;/code&gt; at the outermost and
innermost levels but not in between.The query can be rewritten so
as not to nest (note the repeat of &lt;code&gt;:x3 :q ?w&lt;/code&gt;).&lt;/p&gt;

&lt;pre class="box"&gt;SELECT *
{ :x1 :p ?v .
  OPTIONAL
    { :x3 :q ?w }
  OPTIONAL 
    { :x3 :q ?w  . :x2 :p ?v }
}&lt;/pre&gt;

&lt;p&gt;A few references for work in this area:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.hpl.hp.com/techreports/2005/HPL-2005-170.html"&gt;A
relational algebra for SPARQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/cs.DB/0605124"&gt;Semantics and Complexity of SPARQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow up to the paper above:
&lt;a href="http://ing.utalca.cl/~jperez/papers/sparql_semantics.pdf"&gt;Semantics of SPARQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The paper 
"&lt;a href="http://www.cs.wayne.edu/~artem/main/research/TR-DB-052006-CLJF.pdf"&gt;Semantics Preserving SPARQL-to-SQL Query Translation
for Optional Graph Patterns&lt;/a&gt;"
includes doing the difficult case of nested optionals.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;A SPARQL Algebra&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href="http://www.w3.org/2001/sw/DataAccess/"&gt;DAWG&lt;/a&gt;, we're considering
an algebra for SPARQL, based on the paper
&lt;a href="http://ing.utalca.cl/~jperez/papers/sparql_semantics.pdf"&gt;Semantics
of SPARQL&lt;/a&gt;. This will mean a change of results in the case
above. I've never seen such a query in the wild, only in artificial test cases.&lt;/p&gt;

&lt;p&gt;The change from declarative semantics to a constructional algebra is
motivated primarily by the implementers in the working group wanting to
apply all the good stuff on relational algebra optimization to SPARQL
engines.  The complexity of the exact mapping to SQL in the
&lt;a href="http://www.cs.wayne.edu/~artem/main/research/TR-DB-052006-CLJF.pdf"&gt;
semantics preserving SPARQL-to-SQL&lt;/a&gt; is daunting.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Not &lt;i&gt;that&lt;/i&gt; simple!&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;But other things differ as well if a purely relational style is 
applied (and that's not being proposed currently) because
"&lt;a href="http://ing.utalca.cl/~jperez/papers/sparql_semantics.pdf"&gt;Semantics of SPARQL&lt;/a&gt;" 
does not consider the difference in treatment of filters (it's focus is on the 
combination of graph patterns).&lt;/p&gt;

&lt;p&gt;Two cases arise: one where filters are in &lt;code&gt;OPTIONAL&lt;/code&gt;s, and one 
where filters are nested inside groups.&lt;/p&gt;
&lt;pre class="box"&gt;SELECT * 
{ ?x :p &lt;b&gt;?v&lt;/b&gt; .
  OPTIONAL
  { 
    ?y :q ?w .
    FILTER(&lt;b&gt;?v&lt;/b&gt; = 2)
  }
}&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;FILTER&lt;/code&gt; uses a variable from the fixed part of
the &lt;code&gt;OPTIONAL&lt;/code&gt;. Under Jorge's semantics the variable
isn't in-scope, so the filter evaluation is an error (unbound variable),
otherwise known as false; the optional part never matches.
This form of query is realistic and does occur for real
so the current proposal for DAWG makes this work. Like SQL
and &lt;code&gt;LEFT OUTER JOIN&lt;/code&gt; with the &lt;code&gt;ON&lt;/code&gt; clause,
the LeftJoin operation in the SPARQL algebra can take a condition
which applies over the whole LeftJoin.&lt;/p&gt;

&lt;p&gt;The fixed
pattern could be repeated inside the optional part but such repetition
for something application might well use is bad, very bad.&lt;/p&gt;

&lt;p&gt;Application writers will have to take care about scope and
groups: putting &lt;code&gt;FILTER&lt;/code&gt;s inside &lt;code&gt;{}&lt;/code&gt; changes
their scope.&lt;/p&gt;

&lt;p&gt;Currently,&lt;/p&gt;

&lt;pre class="box"&gt;{ :x :p ?v . FILTER(?v &amp;lt; 5) }&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre class="box"&gt;{ :x :p ?v . { FILTER(?v &amp;lt; 5) } }&lt;/pre&gt;

&lt;p&gt;have the same effect. But they aren't in the algebraic form
because &lt;code&gt;{ FILTER(?v &amp;lt; 5) }&lt;/code&gt; evaluates on the empty
table that does not have a &lt;code&gt;?v&lt;/code&gt; in it; evaluation is an
error and hence false.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;ARQ&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;There is an implementation of the algebra in
&lt;a href="http://jena.sourceforge.net/ARQ/download.html"&gt;ARQ in CVS&lt;/a&gt;
(not in the current release ARQ 1.4). It's enabled in the command
line tool
&lt;a href="http://jena.sourceforge.net/ARQ/cmds.html"&gt;arq.sparql&lt;/a&gt;
with &lt;code&gt;--engine=ref&lt;/code&gt; from the command line and&lt;/p&gt;
&lt;pre class="box"&gt;QueryEngine2.register() ;&lt;/pre&gt;
&lt;p&gt;in code.&lt;/p&gt;

&lt;p&gt;The work-in-progress
&lt;a href="http://www.w3.org/2001/sw/DataAccess/rq23/rq24-algebra.html"&gt;unfinished
editor's working text&lt;/a&gt; is available.  Check it is actually up to
date because that's just work space and isn't a DAWG document. It does not
reflect working group decisions - it more a proposal for consideration.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Disclaimer&lt;/i&gt;: Any views expressed here are mime and not
the working group (which at
the time of writing is thinking about it but hasn't decided
anything yet).&lt;/p&gt;</content><link rel='related' href='http://www.w3.org/2001/sw/DataAccess/rq23/rq24-algebra.html' title='An Algebra for SPARQL'/><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/116429409503210902/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=116429409503210902' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/116429409503210902'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/116429409503210902'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/11/algebra-for-sparql.html' title='An Algebra for SPARQL'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-116336048318288909</id><published>2006-11-12T19:40:00.000Z</published><updated>2006-11-12T20:02:54.250Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>LARQ = Lucene + ARQ</title><content type='html'>&lt;p&gt;
&lt;a href="http://www.w3.org/TR/rdf-sparql-query/"&gt;SPARQL&lt;/a&gt; is normally
thought of as only querying fixed RDF data. At the core of SPARQL are
the building blocks of basic graph patterns, and on top of these there is
an algebra to create more complex patterns (OPTIONAL UNION, FILTER, GRAPH).
&lt;/p&gt;

&lt;p&gt;The key question a basic graph pattern asks is "does this pattern match
the graph". The named variables record how the pattern matches.
&lt;/p&gt;

&lt;p&gt;
Not all information needs to be in the raw data.  ARQ 
&lt;a href="http://jena.sourceforge.net/ARQ/extension.html#propertyFunctions"
&gt;property functions&lt;/a&gt; are a way to let the application add some
relationships to be computed at query execution time.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://jena.sf.net/ARQ/lucene-arq.html"&gt;LARQ&lt;/a&gt;
adds free text search. The real work is done by 
&lt;a href="http://lucene.apache.org"&gt;Lucene&lt;/a&gt;.
LARQ adds ways to create a Lucene index from RDF data
and a property function to perform free text matching
in a SPARQL query.&lt;/p&gt;

&lt;p&gt;Example: find all the string literals that match '+keyword'&lt;/p&gt;
&lt;pre class="box"&gt;
PREFIX pf: &amp;lt;&lt;b&gt;java:com.hp.hpl.jena.query.pfunction.library.&lt;/b&gt;&amp;gt

SELECT *
  { ?lit &lt;b&gt;pf:textMatch&lt;/b&gt; '+keyword' }&lt;/pre&gt;
&lt;p&gt; Any simple or complex 
&lt;a href="http://lucene.apache.org/java/docs/queryparsersyntax.html"
&gt;Lucene query string&lt;/a&gt; can be used.&lt;/p&gt;

&lt;p&gt;LARQ provides utilities to index string literals.  As the literal can
be stored as well, a query can find the subjects with some property value
matching the free text search.&lt;/p&gt;

&lt;p&gt;So to find all the document that have titles matching some free
text search:&lt;/p&gt;
&lt;pre class="box"&gt;
PREFIX pf: &amp;lt;&lt;b&gt;java:com.hp.hpl.jena.query.pfunction.library.&lt;/b&gt;&amp;gt
PREFIX dc: &amp;lt;http://purl.org/dc/elements/1.1/&amp;gt;
  
SELECT ?doc {
    ?lit &lt;b&gt;pf:textMatch&lt;/b&gt; '+text' .
    ?doc ?p ?lit
  }&lt;/pre&gt;

&lt;p&gt;
More details in the 
&lt;a href="http://jena.sf.net/ARQ/lucene-arq.html"
&gt;ARQ documentation for LARQ&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;This will be in ARQ 1.5 but is available from 
&lt;a href="http://jena.sourceforge.net/ARQ/download.html"
&gt;ARQ CVS&lt;/a&gt; now.  Hopefully, this will be useful to users and 
application writers.
Comments and feedback on the design are welcome, especially 
before the next ARQ release.&lt;/p&gt;</content><link rel='related' href='http://jena.sf.net/ARQ/lucene-arq.html' title='LARQ = Lucene + ARQ'/><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/116336048318288909/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=116336048318288909' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/116336048318288909'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/116336048318288909'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/11/larq-lucene-arq.html' title='LARQ = Lucene + ARQ'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-116074507369596325</id><published>2006-10-13T14:08:00.000+01:00</published><updated>2006-10-13T14:14:15.206+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Assignment Property Function</title><content type='html'>&lt;p&gt;
&lt;a href="http://www.w3.org/TR/rdf-sparql-query/"&gt;SPARQL&lt;/a&gt;
is a graph pattern matching language,
The matching can be semantic
(basic graph patterns are entailed by the data in order to match)
or through the
algebra that works over the top of basic graph pattern matching.&lt;/p&gt;
&lt;p&gt;
Complex queries make use of &lt;code&gt;UNION&lt;/code&gt; and &lt;code&gt;OPTIONAL&lt;/code&gt;,
including the idiom with
&lt;code&gt;OPTIONAL&lt;/code&gt; and &lt;code&gt;!BOUND&lt;/code&gt;, in all sorts of creative ways.
And sometimes they want the answers to indicate which way the query matched
to get a particular solution.
&lt;/p&gt;

&lt;pre class="box"&gt;
PREFIX skos: &amp;lt;http://www.w3.org/2004/02/skos/core#&gt;

SELECT ?label
{
   { ?concept skos:prefLabel ?label }
 UNION
   { ?concept skos:altLabel ?label }
}
&lt;/pre&gt;

&lt;p&gt;
Which matched? the &lt;code&gt;prefLabel&lt;/code&gt; or &lt;code&gt;altLabel&lt;/code&gt;?
The application can assign the different to branches to different
variables although that might be inconvenient in a larger query
if &lt;code&gt;?label&lt;/code&gt; is used elsewhere in the query.&lt;/p&gt;

&lt;pre class="box"&gt;
PREFIX skos: &amp;lt;http://www.w3.org/2004/02/skos/core#&gt;

SELECT ?label_pref ?label_alt
{
  { ?concept skos:prefLabel ?label_pref }
UNION
  { ?concept skos:altLabel  ?label_alt }
}
&lt;/pre&gt;

&lt;p&gt;ARQ's &lt;a href="http://jena.sourceforge.net/ARQ/extension.html#propertyFunctions"&gt;property functions&lt;/a&gt; provide a way of adding different ways to match a
triple pattern.  Uses include calling out to custom code
to perform some calculation, or calling out to use a external
index, such as &lt;a href="http://lucene.apache.org/"&gt;Lucene&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;Property functions can assign to variables in the solution - unlike
&lt;code&gt;FILTER&lt;/code&gt; functions which must not have side effects. Property
functions can't change values but they can bind an unbound variable or check
an existing binding is compatible.&lt;/p&gt;

&lt;pre class="box"&gt;
PREFIX apf:   &amp;lt;java:com.hp.hpl.jena.query.pfunction.library.&gt;
SELECT ?x
{
 ?x apf:assign "Hello World"
}
&lt;/pre&gt;

&lt;pre class="box"&gt;
-----------------
| x             |
=================
| "Hello World" |
-----------------
&lt;/pre&gt;

&lt;p&gt;
It works both ways round: &lt;code&gt;{ "Hello World" apf:assign ?x } &lt;/code&gt;
gives the same results.
&lt;/p&gt;

&lt;p&gt;
If subject and object are constants or already bound,
&lt;code&gt;apf:assign&lt;/code&gt; checks to see if they are the same.  If they are,
the tripe pattern
matches with no change to the solution, otherwise it does not match and that solution
is rejected.  The "sameness" is &lt;a href="http://jena.sourceforge.net/"&gt;Jena's&lt;/a&gt;
&lt;a href="http://jena.sourceforge.net/javadoc/com/hp/hpl/jena/graph/Node.html#sameValueAs%28java.lang.Object%29"&gt;
&lt;code&gt;sameValueAs&lt;/code&gt;&lt;/a&gt;,
just like the rest of graph matching.
If both variables are unbound, &lt;code&gt;apf:assign&lt;/code&gt; complains
and the query is broken.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/116074507369596325/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=116074507369596325' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/116074507369596325'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/116074507369596325'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/10/assignment-property-function.html' title='Assignment Property Function'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-114701866289792772</id><published>2006-05-07T17:17:00.000+01:00</published><updated>2006-05-07T17:20:06.750+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Parameterized Queries</title><content type='html'>&lt;p&gt;Sometimes, an application will be making a SPARQL query,
using the results from a previous query or using some RDF
term found through the other Jena APIs.&lt;/p&gt;

&lt;p&gt;SQL has prepared statements - they allow an SQL statement to
take a number of parameters. The application fills in the
parameters and executes the statement.&lt;/p&gt;

&lt;p&gt;One way is to resort to doing this in SPARQL by building
a complete, new query string, parsing it and executing it.
But it takes a little care to handle all cases like
quoting special characters; you can at least use some of the
many utilities in ARQ for producing strings such as
&lt;code&gt;FmtUtils.stringForResource&lt;/code&gt; (it's 
not in the application API but in the &lt;code&gt;util&lt;/code&gt;
package currently).&lt;/p&gt;

&lt;p&gt;Queries in ARQ can be
&lt;a href="http://jena.sourceforge.net/ARQ/programmatic.html"&gt;built 
programmatically&lt;/a&gt; but it is tedious, especially when the
documentation hasn't been written yet.&lt;/p&gt;

&lt;p&gt;Another way is to use query variables and bind them to
initial values that apply to all query solutions. Consider
the query:&lt;/p&gt;

&lt;pre class="box"&gt;PREFIX dc &amp;lt;http://purl.org/dc/elements/1.1/&amp;gt;
SELECT ?doc { ?doc dc:title ?title }&lt;/pre&gt;

&lt;p&gt;It gets documents and their titles.&lt;/p&gt;

&lt;p&gt;Executing a query in program
&lt;a href="http://jena.sourceforge.net/ARQ/app_api.html"&gt;might
look like&lt;/a&gt;:&lt;/p&gt;

&lt;pre class="box"&gt;import com.hp.hpl.jena.query.* ;

Model model = ... ;&lt;/pre&gt;
&lt;pre class="box"&gt;String queryString = StringUtils.join(&amp;quot;\n&amp;quot;,
         new String[]{
     &amp;quot;PREFIX dc &amp;lt;http://purl.org/dc/elements/1.1/&amp;gt;&amp;quot;,
     &amp;quot;SELECT ?doc { ?doc dc:title ?title }&amp;quot;
         }) ;
Query query = QueryFactory.create(queryString) ;
QueryExecution qexec =
    QueryExecutionFactory.create(query, model) ;
try {
    ResultSet results = qexec.execSelect() ;
    for ( ; results.hasNext() ; )
    {
       QuerySolution soln = results.nextSolution() ;
       Literal l = soln.getLiteral(&amp;quot;doc&amp;quot;) ;
    }
} finally { qexec.close() ; }&lt;/pre&gt;

&lt;p&gt;Suppose the application knows the title it's interesting
in - can it use this to get the document?&lt;/p&gt;

&lt;p&gt;The value of &lt;code&gt;?title&lt;/code&gt; made a parameter to the query
and fixed by an initial binding.  All query solutions will
be restricted to patterns matches where &lt;code&gt;?title&lt;/code&gt; 
is that RDF term.&lt;/p&gt;

&lt;pre class="box"&gt;QuerySolutionMap initialSettings = new QuerySolutionMap() ;
initialSettings.add(&amp;quot;title&amp;quot;, node) ;&lt;/pre&gt;

&lt;p&gt;and this is passed to the factory that creates QueryExecution's:&lt;/p&gt;
&lt;pre class="box"&gt;QueryExecution qexec = 
    QueryExecutionFactory.create(query,
                                 model,
                                 &lt;b&gt;initialSettings&lt;/b&gt;) ;&lt;/pre&gt;
&lt;p&gt;It doesn't matter if the node is a literal, a resource with
URI or a blank node. It becomes a fixed value in the query, even
a blank node, because it's not part of the SPARQL syntax, it's a
fixed part of every solution.&lt;/p&gt;

&lt;p&gt;This gives named parameters to queries enabling something
like SQL prepared statements except with named parameters not
positional ones.&lt;/p&gt;

&lt;p&gt;This can make a complex application easier to structure and
clearer to read. It's better than bashing strings together,
which is error prone, inflexible, and does not 
lead to clear code.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/114701866289792772/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=114701866289792772' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/114701866289792772'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/114701866289792772'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/05/parameterized-queries_07.html' title='Parameterized Queries'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-114491949132660796</id><published>2006-04-13T10:07:00.000+01:00</published><updated>2006-04-13T10:40:20.840+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>From RDQL to SPARQL</title><content type='html'>&lt;p&gt;
SPARQL is now (April 2006) a W3C Candidate Recommendation
which means it is stable enough for wide spread
implementation.&amp;nbsp; Actually, there are quite a few implementations already
(&lt;a href="http://esw.w3.org/topic/SparqlImplementations"&gt;SPARQL
implementations page on ESW wiki&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;SPARQL is defined by three documents:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://www.w3.org/TR/rdf-sparql-query/"&gt;SPARQL Query language&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://www.w3.org/TR/rdf-sparql-protocol/"&gt;SPARQL Protocol&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://www.w3.org/TR/rdf-sparql-XMLres/"&gt;SPARQL Query XML Results Format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and there are tutorials like
&lt;a href="http://jena.sourceforge.net/ARQ/Tutorial/index.html"
&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://www.w3.org/Submission/RDQL/"&gt;RDQL&lt;/a&gt; predates
SPARQL - in fact, RDQL design predates the
current RDF specifications and some of the design decisions
in RDQL are a reflection of that.  The biggest of these is
that RDF didn't have any datatyping so RDQL handles tests
on, say, integers without checking the datatype (if it looks like
an integer, it can be tested as integer).
&lt;/p&gt;

&lt;p&gt;SPARQL has all the features of RDQL and more:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;ability to add optional information to query results&lt;/li&gt;
    &lt;li&gt;disjunction of graph patterns&lt;/li&gt;
    &lt;li&gt;more expression testing (date-time support, for example)&lt;/li&gt;
    &lt;li&gt;named graphs&lt;/li&gt;
    &lt;li&gt;sorting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;but, above all, it is more tightly specified so queries in one implementation 
should behave the same in all other implementations.&lt;/p&gt;

&lt;h2&gt;ARQ - A Query Engine for Jena&lt;/h2&gt;

&lt;p&gt;
In parallel with the developing the SPARQL specification,
I have been developing a new query subsystem for
&lt;a href="http://jena.sourceforge.net/"&gt;Jena&lt;/a&gt; called
&lt;a href="http://jena.sourceforge.net/ARQ/"&gt;ARQ&lt;/a&gt;.
ARQ is now part of the Jena download.&lt;/p&gt;

&lt;p&gt;
ARQ builds on top of the existing Jena query support
for matching of basic graph patterns
(BGPs are the building block in SPARQL).
ARQ can execute SPARQL and RDQL as well as an extended form of
SPARQL.  It has several extension points, such as
&lt;a href="/2006/02/property-functions-in-arq.html"
&gt;Property functions&lt;/a&gt;.  The ARQ query engine works with
any Jena Graph or Model.
&lt;/p&gt;


&lt;h2&gt;Converting RDQL code to SPARQL code&lt;/h2&gt;

&lt;p&gt;
The functionality of RDQL is a subset of SPARQL so it's
not hard to convert RDQL queries to SPARQL.  What needs
to be done is convert the triple syntax and convert
any constraints. 
&lt;/p&gt;

&lt;h3&gt;Syntax&lt;/h3&gt;

&lt;p&gt;
SPARQL syntax uses a &lt;a href="http://www.dajobe.org/2004/01/turtle/"
&gt;Turtle&lt;/a&gt;-like syntax which is familiar to anyone knowing N3.
Namespaces go at the start of the query, not after like
&lt;code&gt;USING&lt;/code&gt;.  There are no &lt;code&gt;()&lt;/code&gt; around triple
patterns; instaead there is a "&lt;code&gt;.&lt;/code&gt;" (a single dot)
between triple patterns.  An RDQL only ever has one graph pattern,
in SPARQL, blocks of triple patterns are 
delimited by &lt;code&gt;{}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can even use the command line
&lt;a href="http://jena.sourceforge.net/ARQ/cmds.html#arq.qparse"
&gt;&lt;code&gt;arq.qparse&lt;/code&gt;&lt;/a&gt; to read in an
RDQL query and write out the SPARQL query but it's a rough approximation
you'll need to check and it may not be completely legal SPARQL.&lt;/p&gt;

&lt;h3&gt;Constraints&lt;/h3&gt;

&lt;p&gt;
The constraints need the most care because SPARQL uses RDF datatyping 
and RDQL doesn't. Some common areas are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;regular expressions&lt;/li&gt;
&lt;li&gt;string equality and numeric equality&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Regular expressions&lt;/h4&gt;

&lt;p&gt;A SPARQL regular expression looks like:&lt;/p&gt;
&lt;pre class="box"&gt;
regex(&lt;em&gt;expr&lt;/em&gt;, "&lt;em&gt;pattern&lt;/em&gt;")
regex(&lt;em&gt;expr&lt;/em&gt;, "&lt;em&gt;pattern&lt;/em&gt;", "i")
&lt;/pre&gt;

&lt;p&gt;
The catch is that the &lt;code&gt;&lt;em&gt;expr&lt;/em&gt;&lt;/code&gt; must be a literal; it can't be a URI.
(Well - it can, but it will never match!).  If you want to perform a regular
expression match on a URI, use the
&lt;a href="http://www.w3.org/2001/sw/DataAccess/rq23/#func-str"
&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; built-in to get the string form of the URI.
&lt;/p&gt;

&lt;pre class="box"&gt;
regex(str(?uri), "^http://example/ns#")
&lt;/pre&gt;

&lt;h4&gt;Equality&lt;/h4&gt;

&lt;p&gt;RDQL has &lt;code&gt;=&lt;/code&gt; for numeric equality and &lt;code&gt;eq&lt;/code&gt; for
string equality.  A number in RDQL was anything that can be parsed an a number, whether
it had a datatype or not (or even the wrong datatype).  Likewise, anything could be
treated as a string (like URIs in regular expressions).
&lt;/p&gt;

&lt;p&gt;SPARQL has &lt;code&gt;=&lt;/code&gt; which is taken from
&lt;a href="http://www.w3.org/TR/xpath-functions/"
&gt;XQuery/XPath Functions and Operators&lt;/a&gt;.  It decides whether that is numeric equals,
string equals or URI-equals based on the kind of arguments it is given.&lt;/p&gt;

&lt;h2&gt;API Changes&lt;/h2&gt;

&lt;p&gt;The ARQ API is in the package &lt;code&gt;com.hp.hpl.jena.query&lt;/code&gt;.  The RDQL API
is deprecated, starting with Jena 2.4.  The &lt;a href="http://jena.sourceforge.net/ARQ/app_api.html"&gt;new API&lt;/a&gt;
is similar in style to the old one for &lt;code&gt;SELECT,&lt;/code&gt; with iteration over 
the rows of the results (&lt;a
href="http://jena.sourceforge.net/ARQ/javadoc/index.html"&gt;javadoc&lt;/a&gt;).
Differences include the widespread use of factories, naming consistent with the 
SPARQL specifications, and different &lt;code&gt;exec&lt;/code&gt; operations for the 
different kinds of SPARQL query. &lt;code&gt;QueryExecution&lt;/code&gt; objects should be 
properly closed.&lt;/p&gt;

&lt;p&gt;One change is that to get the triples that matched a query, instead of asking the binding for the triples
that were used in the matching, the application should now make a
&lt;code&gt;CONSTRUCT&lt;/code&gt; query.&lt;/p&gt;

&lt;h2&gt;Experimenting with SPARQL&lt;/h2&gt;


&lt;p&gt;
There is a set of &lt;a href="http://jena.sourceforge.net/ARQ/cmds.html"&gt;command line utilities&lt;/a&gt;
to try out SPARQL queries from the command line.
&lt;/p&gt;

&lt;p&gt;A nice graphical interface is &lt;a href="http://www.ldodds.com/projects/twinkle/"&gt;twinkle&lt;/a&gt;
by Leigh Dodds.&lt;/p&gt;

&lt;p&gt;
There is also an implementation of the SPARQL protocol using ARQ,
project &lt;a href="http://www.joseki.org/"&gt;Joseki&lt;/a&gt;, and a demo site at &lt;a
href="http://www.sparql.org"&gt;http://www.sparql.org&lt;/a&gt;
where you can validate SPARQL queries and try them out.&lt;/p&gt;
&lt;h2&gt;
Questions?&lt;/h2&gt;
&lt;p&gt;
Send question and comments about ARQ to &lt;a href="mailto:jena-dev@groups.yahoo.com"&gt;jena-dev&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Send general questions and comments about SPARQL to the W3C list
&lt;a href="mailto:public-sparql-dev@w3.org"&gt;sparql-dev&lt;/a&gt;
(&lt;a href="http://lists.w3.org/Archives/Public/public-sparql-dev/"&gt;archive&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
If you have experiences converting from RDQL to SPARQL, then let me know
and I'll compile a list of common issues.
&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/114491949132660796/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=114491949132660796' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/114491949132660796'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/114491949132660796'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/04/from-rdql-to-sparql.html' title='From RDQL to SPARQL'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-114011505742599747</id><published>2006-02-16T18:35:00.000Z</published><updated>2006-04-10T17:48:17.870+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Property Functions in ARQ</title><content type='html'>&lt;p&gt;These are properties that are calculated by some custom code, and not
done by the usual matching. There are two provided now: applications are free to provide application-specifc ones.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;list:member - access the members of an RDF list.
&lt;/li&gt;&lt;li&gt;rdfs:member - access the members of rdf:Bag, rdf:Seq and rdf:Alt structures&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Full Extension &lt;a href="http://jena.sourceforge.net/ARQ/extensions.html"&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Normally, the unit of matching in ARQ is the basic graph pattern (a sequence of triple patterns).  These sets of triple patterns are dispatched to Jena for matching by Jena's graph-level query handler.
Each kind of storage provides the appropriate query handler. For example, the database &lt;span style="font-style: italic;"&gt;fastpath&lt;/span&gt;
is a translation of a set of triple patterns into a single SQL query involving joins.&lt;/p&gt;

&lt;p&gt;There is also a default implementation that works by using plain graph &lt;i&gt;find&lt;/i&gt; (a triple with possible wildcards) so a new storage system does not need to provide it's own query handler until it wants to exploit some feature of the storage.&lt;/p&gt;

&lt;p&gt;If a function property is encountered, then it is internally treated as a call to be an extension.  There is a registry of
function properties to implementing code.&lt;/p&gt;

&lt;pre&gt;  # Find all the members of a list (RDF collection)
  PREFIX  list:   &amp;lt;http://www.jena.hpl.hp.com/ARQ/list#&amp;gt;
  SELECT ?member
  { ?x :p ?list .
    ?list list:member ?member .
  }
&lt;/pre&gt;

&lt;p&gt;The functionality of &lt;code&gt;list:member&lt;/code&gt; is handled by a class
in the extension library so this query is treated much like the ARQ
extension:&lt;/p&gt;

&lt;pre&gt;  # Find all the members of a list (RDF collection)
  PREFIX  ext: &amp;lt;java:com.hp.hpl.jena.query.extension.library.&amp;gt;
  SELECT ?member
  { ?x :p ?list .
    EXT ext:list(?list, ?x)
  }
&lt;/pre&gt;

&lt;p&gt;where &lt;list&gt;ext:list&lt;/list&gt; is a function that bind its arguments
(unlike a &lt;code&gt;FILTER&lt;/code&gt; function). The property function form is legal SPARQL.&lt;/p&gt;

&lt;p&gt;So, this mechanism shows that collection access can be done in SPARQL
without resorting to handling told blank nodes.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.w3.org/2000/10/swap/doc/cwm.html"&gt;cwm&lt;/a&gt; (which is a forward chaining rules engine) and &lt;a href="http://www.agfa.com/w3c/euler/"&gt;Euler&lt;/a&gt;
(which is a backward-chaining rules engine) already provide this style of access.  Their property is &lt;a href="http://www.w3.org/2000/10/swap/list#in"&gt;&lt;code&gt;&lt;http:&gt;&lt;/http:&gt;&lt;/code&gt;&lt;/a&gt; - the subject and object meanings are the other way.&lt;/p&gt;

&lt;p&gt;ARQ provides &lt;code&gt;list:member&lt;/code&gt; to be like &lt;code&gt;rdfs:member&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;— Andy&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/114011505742599747/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=114011505742599747' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/114011505742599747'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/114011505742599747'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/02/property-functions-in-arq.html' title='Property Functions in ARQ'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-113968248786457683</id><published>2006-02-11T18:26:00.000Z</published><updated>2006-04-10T17:47:22.713+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Progress with Jena.Net</title><content type='html'>&lt;p&gt;&lt;a href="http://B4mad.Net/datenbrei/"&gt;[GNU]&lt;/a&gt; wrote
&lt;a href="http://b4mad.net/datenbrei/archives/2006/01/19/hacking-jena-and-monoc/"&gt;about&lt;/a&gt;
building &lt;a href="http://jena.sourceforge.net"&gt;Jena&lt;/a&gt; for &lt;a
href="http://www.mono-project.com/"&gt;Mono&lt;/a&gt;, using
&lt;a href="http://www.ikvm.net/"&gt;IKVM &lt;/a&gt;to compile the jar files into .Net IL.
&lt;/p&gt;
&lt;p&gt;
This approach means that the same source code is used for both the Java world
and the .Net world, making future improvements visible to both  from a single source tree.
&lt;/p&gt;
&lt;p&gt;
I tried doing it for .Net on Windows with
&lt;a href="http://msdn.microsoft.com/vstudio/express/visualcsharp/"&gt;C# Express&lt;/a&gt;
and IKVM-0.24.0.1.&lt;/p&gt;

&lt;p&gt;&lt;span style="font-weight: bold;font-size:130%;" &gt;Summary&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;SPARQL queries work.&lt;/p&gt;

&lt;p&gt;
Using Jena from C# works for small scale cases - lots of checking to do but
it should be a matter of verifying everything from the dependent libraries works properly.
&lt;/p&gt;

&lt;p&gt;
Some things aren't working but there are a few hotspots of trouble that, when
fixed, mean that the majority (may be all) of the Jena test suite will run. As
it is at the moment, quite a lot can be done including using the ARQ command line programs.
&lt;/p&gt;
&lt;p&gt;&lt;span style="font-weight: bold;font-size:130%;" &gt;The Conversion&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The IKVM bytecode conversion route is my preferred choice because it means one source
codebase, not two.  When I tried this before, I got an early version of ARQ up and running.
But it wasn't complete; the first big block was the lack of &lt;code&gt;java.nio.charset&lt;/code&gt;
support in GNU Classpath.  Jena and ARQ have lots of tests of internationalization and
charsets.  That alone was enough to make it not worthwhile exploring further at the time.
&lt;/p&gt;
&lt;p&gt;
Now (Feb 2006) &lt;a href="http://www.gnu.org/software/classpath/"&gt;GNU Classpath&lt;/a&gt;
coverage is much better.  See the &lt;a
href="http://www.kaffe.org/%7Estuart/japi/htmlout/h-jdk14-classpath.html"&gt;
coverage of GNU Classpath compared to Java 1.4&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
The process is simple: run ikvmc on all the jars to get a library.  Ignore all
the warnings about missing stuff.  It's surprising what various libraries actually
reference - Log4j has references to a lot of log record transports. At the simplest:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;ikvmc *.jar -out:XXX.dll -target:library&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've now broken this in two DLLs: jena-libs.dll (all the jars except the jena ones)
and jena.dll (jena.jar, jenatest.jar, arq.,jar, iri.jar)
but that is just because I keep building the DDLs while testing.
&lt;/p&gt;
&lt;p&gt;
It takes a minute or so (less time than building jena.jar itself).
The result is two DLLs of about totaling 16M - the whole assembly is about
23M including the three IKVM DLLs.  Not small - but it works and it is simple to do.
&lt;/p&gt;
&lt;p&gt;
What's been tried: in-memory graphs, reading and writing &lt;a
href="http://www.dajobe.org/2004/01/turtle/"&gt;turtle&lt;/a&gt; files (but XML types literals broken)
and SPARQL queries.
&lt;/p&gt;
&lt;p&gt;
Jena bugs: (this is relative to CVS and so after Jena 2.3)
&lt;ul&gt;
&lt;li&gt;file:///c:/absolute was incorrectly turned into a windows filename.  Worked OK with
Sun's Java but not IKVM. Fixed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
GNU Classpath bugs:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;InputStreamReader(InputStream, Charset) is broken although the other two
constructors that allow the charset conversion to be explicitly
controlled do seem to work.  This can be worked around in Jena.
&lt;a href="http://gcc.gnu.org/bugzilla/show_bug.cgi?id=26220"&gt;Bugzilla Entry&lt;/a&gt;.
&lt;/li&gt;
&lt;li&gt;Zero-width lookbehind regexs aren't implemented.  They are used by JJC's new IRI code.  
&lt;a href="http://gcc.gnu.org/bugzilla/show_bug.cgi?id=26221"&gt;Bugzilla Entry&lt;/a&gt;.
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;span style="font-weight: bold;font-size:130%;" &gt;ARQ Test Suite&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;As a rough comparision, I ran the ARQ test suite:&lt;/p&gt;

&lt;p&gt;BEfore any fixes, with Java 5 JVM:&lt;br/&gt;
Tests run: 1119,  Failures: 0,  Errors: 0
&lt;/p&gt;
&lt;p&gt;
Using ikvm as the JVM:&lt;br/&gt;
Tests run: 1119,  Failures: 32,  Errors: 17
&lt;/p&gt;
&lt;p&gt;
Converting to .Net:&lt;br/&gt;
Tests run: 1119,  Failures: 32,  Errors: 59
&lt;/p&gt;
&lt;p&gt;[20 Feb: JJC recoded around the lack of lookbehind and
now its down to 4 failures of which 3 are 
because GNUClasspath is just different to Sun's runtime]
&lt;/p&gt;

&lt;p&gt;
&lt;span style="font-weight: bold;font-size:130%;" &gt;Next&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
Now it's work through the broken tests in the ARQ test suite to determine what's the cause as time permits.
&lt;/p&gt;
&lt;p&gt;
&lt;a 
href="http://www.gotdotnet.com/workspaces/workspace.aspx?id=ad7acff7-ab1e-4bcb-99c0-57ac5a3a9742"&gt;IronPython&lt;/a&gt; to Jena?
&lt;/p&gt;

&lt;p&gt;&lt;span style="font-weight: bold;font-size:130%;" &gt;Updates&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calling Jena from VB.Net works&lt;/li&gt;
&lt;li&gt;The GNU Classpath/InputStreamReader bug has been fixed&lt;/li&gt;
&lt;li&gt;The GNU Classpath/lookbehind bug had already been fixed but
    very recently so IKVM hasn't picked it up yet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now 4 failures, 3 of which are corner case differences of URI resolution
in unusual cases.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://seaborne.blogspot.com/feeds/113968248786457683/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=18002060&amp;postID=113968248786457683' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/113968248786457683'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/posts/default/113968248786457683'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/02/progress-with-jenanet.html' title='Progress with Jena.Net'/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-114387523481536984</id><published>2006-04-01T08:07:00.000+01:00</published><updated>2006-04-01T08:07:14.816+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>AndyS,&lt;br&gt;&lt;br&gt;Are you sharing you libraries? I wou...</title><content type='html'>AndyS,&lt;BR/&gt;&lt;BR/&gt;Are you sharing you libraries? I would love to test this for .Net 2.0 under windows. I'm working with VS2005 and C#. &lt;BR/&gt;&lt;BR/&gt;Arnoud</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/113968248786457683/comments/default/114387523481536984'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/113968248786457683/comments/default/114387523481536984'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/02/progress-with-jenanet.html?showComment=1143875220000#c114387523481536984' title=''/><author><name>Arnoud</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/02/progress-with-jenanet.html' ref='tag:blogger.com,1999:blog-18002060.post-113968248786457683' source='http://www.blogger.com/feeds/18002060/posts/default/113968248786457683' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1554744210'/><gd:extendedProperty name='blogger.displayTime' value='08:07'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-114458291533417689</id><published>2006-04-09T12:41:00.000+01:00</published><updated>2006-04-09T12:41:55.336+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Arnoud - I ran it with .Net 2.0 using Visual C# (e...</title><content type='html'>Arnoud - I ran it with .Net 2.0 using Visual C# (express edition because I guessed that is what many people might be used).  I aslo ran the converted code with IKVM.&lt;BR/&gt;&lt;BR/&gt;The scripts to make the DLLs are in CVS: the Jena.Net module in &lt;A HREF="http://sourceforge.net/cvs/?group_id=40417" REL="nofollow"&gt;Jena CVS&lt;/A&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/113968248786457683/comments/default/114458291533417689'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/113968248786457683/comments/default/114458291533417689'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/02/progress-with-jenanet.html?showComment=1144582860000#c114458291533417689' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/02/progress-with-jenanet.html' ref='tag:blogger.com,1999:blog-18002060.post-113968248786457683' source='http://www.blogger.com/feeds/18002060/posts/default/113968248786457683' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='12:41'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-114607901804458892</id><published>2006-04-26T20:16:00.000+01:00</published><updated>2006-04-26T20:16:58.043+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hello Andys, &lt;br&gt;&lt;br&gt;  My English is very bad&lt;br&gt; ...</title><content type='html'>Hello Andys, &lt;BR/&gt;&lt;BR/&gt;  My English is very bad&lt;BR/&gt;  &lt;BR/&gt;  I am very interested in working with JENA on the platform .NET, but I do not find the scripts that you say to comvert *.jar of JENA into DLL&lt;BR/&gt;&lt;BR/&gt;   Can you help me?, can you say to me where the scripts are exactly?, or can you me send them by post (lcriadof@yahoo.es)?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/113968248786457683/comments/default/114607901804458892'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/113968248786457683/comments/default/114607901804458892'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/02/progress-with-jenanet.html?showComment=1146078960000#c114607901804458892' title=''/><author><name>Luis Criado</name><uri>http://www.blogger.com/profile/06927908777132535960</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/02/progress-with-jenanet.html' ref='tag:blogger.com,1999:blog-18002060.post-113968248786457683' source='http://www.blogger.com/feeds/18002060/posts/default/113968248786457683' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-114068663'/><gd:extendedProperty name='blogger.displayTime' value='20:16'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-114613059762069827</id><published>2006-04-27T10:36:00.000+01:00</published><updated>2006-04-27T10:36:37.620+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The scripts are in Jena CVS: the module is /Scratc...</title><content type='html'>The scripts are in Jena CVS: the module is /Scratch/Jena.Net &lt;BR/&gt;&lt;BR/&gt;&lt;A HREF="http://sourceforge.net/cvs/?group_id=40417" REL="nofollow"&gt;Jena CVS details&lt;/A&gt;&lt;BR/&gt;&lt;BR/&gt;&lt;A HREF="http://cvs.sourceforge.net/viewcvs.py/jena/Scratch/Jena.Net/" REL="nofollow"&gt;&lt;BR/&gt;Browse Jena.Net&lt;/A&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/113968248786457683/comments/default/114613059762069827'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/113968248786457683/comments/default/114613059762069827'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/02/progress-with-jenanet.html?showComment=1146130560000#c114613059762069827' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/02/progress-with-jenanet.html' ref='tag:blogger.com,1999:blog-18002060.post-113968248786457683' source='http://www.blogger.com/feeds/18002060/posts/default/113968248786457683' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='10:36'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-114701902110133804</id><published>2006-05-07T17:23:00.000+01:00</published><updated>2006-05-07T17:23:41.100+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>See also &lt;a href="http://www.ldodds.com/blog/archi...</title><content type='html'>See also &lt;A HREF="http://www.ldodds.com/blog/archives/000251.html" REL="nofollow"&gt;leigh's blog&lt;/A&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114701866289792772/comments/default/114701902110133804'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114701866289792772/comments/default/114701902110133804'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/05/parameterized-queries_07.html?showComment=1147018980000#c114701902110133804' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/05/parameterized-queries_07.html' ref='tag:blogger.com,1999:blog-18002060.post-114701866289792772' source='http://www.blogger.com/feeds/18002060/posts/default/114701866289792772' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='17:23'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-115468140500718223</id><published>2006-08-04T09:50:00.000+01:00</published><updated>2006-08-04T09:50:05.006+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I could really use the comment on having to conver...</title><content type='html'>I could really use the comment on having to convert a URI to a strings before being able to use it in a regexp FILTER.&lt;BR/&gt;&lt;BR/&gt;I wonder, though, if it is not possible to make a URI match without using FILTER, e.g.:&lt;BR/&gt;&lt;BR/&gt;SELECT ?d WHERE { ?d foo:uri &amp;lt;some:uri&amp;gt; }&lt;BR/&gt;&lt;BR/&gt;Rather, I wonder how to make the above work, because I don't see why it should not work. The following does work (for some example RDF I have in a jena model querying using ARQ), using your str() tip in a filter:&lt;BR/&gt;&lt;BR/&gt;SELECT ?d WHERE { ?d foo:uri ?uri &lt;BR/&gt;FILTER regex(str(?uri),"some:uri") }</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114491949132660796/comments/default/115468140500718223'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114491949132660796/comments/default/115468140500718223'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/04/from-rdql-to-sparql.html?showComment=1154681400000#c115468140500718223' title=''/><author><name>/\/ikolaj</name><uri>http://blog.efef.dk</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/04/from-rdql-to-sparql.html' ref='tag:blogger.com,1999:blog-18002060.post-114491949132660796' source='http://www.blogger.com/feeds/18002060/posts/default/114491949132660796' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2023429051'/><gd:extendedProperty name='blogger.displayTime' value='09:50'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-115468175446186906</id><published>2006-08-04T09:55:00.000+01:00</published><updated>2006-08-04T09:55:54.460+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Graph pattern matching is exact match so placing t...</title><content type='html'>Graph pattern matching is exact match so placing the URI in a triple pattern will work when you are matching the whole URI.&lt;BR/&gt;&lt;BR/&gt;It is like ""^http://example/ns#xyz$" using ^$ to anchor the string.&lt;BR/&gt;&lt;BR/&gt;The example is matching &lt;BR/&gt;"^http://example/ns#"&lt;BR/&gt;which is the namespace of the prefix of a URI.  It matches anything beginning with that string like "http://example/ns#xyz" and "http://example/ns#abcd1234"</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114491949132660796/comments/default/115468175446186906'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114491949132660796/comments/default/115468175446186906'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/04/from-rdql-to-sparql.html?showComment=1154681700000#c115468175446186906' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/04/from-rdql-to-sparql.html' ref='tag:blogger.com,1999:blog-18002060.post-114491949132660796' source='http://www.blogger.com/feeds/18002060/posts/default/114491949132660796' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='09:55'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-115468325258950840</id><published>2006-08-04T10:20:00.000+01:00</published><updated>2006-08-04T10:20:52.590+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>some:uri is a the whole URI in my example. There i...</title><content type='html'>some:uri is a the whole URI in my example. There is no match when I use it in&lt;BR/&gt;&lt;BR/&gt;SELECT ?d WHERE { ?d foo:uri some:uri }&lt;BR/&gt;&lt;BR/&gt;or&lt;BR/&gt;&lt;BR/&gt;SELECT ?d WHERE { ?d foo:uri &amp;lt;some:uri&amp;gt; }&lt;BR/&gt;&lt;BR/&gt;or &lt;BR/&gt;&lt;BR/&gt;SELECT ?d WHERE { ?d foo:uri 'some:uri' }&lt;BR/&gt;&lt;BR/&gt;I have tried all combinations I can think of.&lt;BR/&gt;&lt;BR/&gt;I only get a match when I do &lt;BR/&gt;&lt;BR/&gt;SELECT ?d WHERE { ?d foo:uri ?uri&lt;BR/&gt;FILTER regex(str(?uri),"^some:uri$") }&lt;BR/&gt;&lt;BR/&gt;'some:uri' is the actual string I have as URI for my rdf resource.&lt;BR/&gt;&lt;BR/&gt;Btw. do is there a mailing list where this should move to?&lt;BR/&gt;&lt;BR/&gt;/\/</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114491949132660796/comments/default/115468325258950840'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114491949132660796/comments/default/115468325258950840'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/04/from-rdql-to-sparql.html?showComment=1154683200000#c115468325258950840' title=''/><author><name>/\/ikolaj</name><uri>http://blog.efef.dk</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/04/from-rdql-to-sparql.html' ref='tag:blogger.com,1999:blog-18002060.post-114491949132660796' source='http://www.blogger.com/feeds/18002060/posts/default/114491949132660796' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1400570709'/><gd:extendedProperty name='blogger.displayTime' value='10:20'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-115468395410965450</id><published>2006-08-04T10:32:00.000+01:00</published><updated>2006-08-04T12:08:33.436+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'></title><content type='html'>This comment has been removed by a blog administrator.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114491949132660796/comments/default/115468395410965450'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114491949132660796/comments/default/115468395410965450'/><author><name>/\/ikolaj</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/04/from-rdql-to-sparql.html' ref='tag:blogger.com,1999:blog-18002060.post-114491949132660796' source='http://www.blogger.com/feeds/18002060/posts/default/114491949132660796' type='text/html'/><gd:extendedProperty name='blogger.contentRemoved' value='true'/><gd:extendedProperty name='blogger.itemClass' value='pid-1218908928'/><gd:extendedProperty name='blogger.displayTime' value='10:32'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-115468402273215516</id><published>2006-08-04T10:33:00.000+01:00</published><updated>2006-08-04T10:33:42.733+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The RDF I have looks like (hand-edited so might co...</title><content type='html'>The RDF I have looks like (hand-edited so might contain parse errors):&lt;BR/&gt;&lt;BR/&gt;&amp;lt;rdf:RDF&lt;BR/&gt;    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"&lt;BR/&gt;    xmlns:j.0="file://foo.owl#" &amp;gt;&lt;BR/&gt;  &amp;lt;rdf:Description rdf:about="some:uri"&amp;gt;&lt;BR/&gt;    &amp;lt;rdf:type rdf:resource="file:///foo.owl#Document"/&amp;gt;&lt;BR/&gt;    &amp;lt;j.0:firstNames rdf:datatype="http://www.w3.org/2001/XMLSchema#string"&amp;gt;Nikolaj&amp;lt;/j.0:firstNames&amp;gt;&lt;BR/&gt;  &amp;lt;/rdf:Description&amp;gt;&lt;BR/&gt;  &amp;lt;rdf:Description rdf:about="xx:meta1"&amp;gt;&lt;BR/&gt;    &amp;lt;j.0:document rdf:resource="some:uri"/&amp;gt;&lt;BR/&gt;    &amp;lt;rdf:type rdf:resource="file://foo.owl#MetaDoc"/&amp;gt;&lt;BR/&gt;  &amp;lt;/rdf:Description&amp;gt;&lt;BR/&gt;&amp;lt;/rdf:RDF&amp;gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114491949132660796/comments/default/115468402273215516'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114491949132660796/comments/default/115468402273215516'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/04/from-rdql-to-sparql.html?showComment=1154683980000#c115468402273215516' title=''/><author><name>/\/ikolaj</name><uri>http://blog.efef.dk</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/04/from-rdql-to-sparql.html' ref='tag:blogger.com,1999:blog-18002060.post-114491949132660796' source='http://www.blogger.com/feeds/18002060/posts/default/114491949132660796' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1731367525'/><gd:extendedProperty name='blogger.displayTime' value='10:33'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-115468987262704720</id><published>2006-08-04T12:11:00.000+01:00</published><updated>2006-08-04T12:11:12.626+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This is better done by email on the jena-dev list....</title><content type='html'>This is better done by email on the jena-dev list.  Direct email (and we can summarise here later) if you must.  The HTML is messing up data because it looks like HTML tags.&lt;BR/&gt;&lt;BR/&gt;Your data contains strange URIs:&lt;BR/&gt;&amp;lt;some:uri&amp;gt; but the query:&lt;BR/&gt;&lt;BR/&gt;PREFIX : &amp;lt;file://foo.owl#&amp;gt;&lt;BR/&gt;&lt;BR/&gt;SELECT *&lt;BR/&gt;{ ?x :document &amp;lt;some:uri&amp;gt; } &lt;BR/&gt;&lt;BR/&gt;works.&lt;BR/&gt;&lt;BR/&gt;Unrelated:&lt;BR/&gt;If you use RDF/XML_ABBREV as the writer, you get nicer looking RDF/XML.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114491949132660796/comments/default/115468987262704720'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114491949132660796/comments/default/115468987262704720'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/04/from-rdql-to-sparql.html?showComment=1154689860000#c115468987262704720' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/04/from-rdql-to-sparql.html' ref='tag:blogger.com,1999:blog-18002060.post-114491949132660796' source='http://www.blogger.com/feeds/18002060/posts/default/114491949132660796' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='12:11'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-116337112829684118</id><published>2006-11-12T22:38:00.000Z</published><updated>2006-11-12T22:38:48.296Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>&lt;b&gt;Wow!&lt;/b&gt;&lt;br&gt;&lt;br&gt;I'm now half-asleep, so I'll ju...</title><content type='html'>&lt;B&gt;Wow!&lt;/B&gt;&lt;BR/&gt;&lt;BR/&gt;I'm now half-asleep, so I'll just paste from a comment I made over at Shelley Power's the other day. &lt;BR/&gt;[[&lt;BR/&gt;...I'd installed Longwell, the facetted browser, curious to see whether it'd be useful for my blog data. Longwell will eat any RDF files you dump in the appropriate directory. On a whim I collected a few random files from the web, including one about famous people. I'd glanced at the source and knew there was an entry for Beethoven. So I did a (plain text) search for the guy in Longwell. Sure enough it picked up his bio material. But in the same results I also had a blog post I'd forgotten about, pointing to some audio files of his symphonies. &lt;BR/&gt;...&lt;BR/&gt;Dunno, it thrilled me…&lt;BR/&gt;]]&lt;BR/&gt;http://burningbird.net/technology/semanticweb/deja-data</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/116336048318288909/comments/default/116337112829684118'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/116336048318288909/comments/default/116337112829684118'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/11/larq-lucene-arq.html?showComment=1163371080000#c116337112829684118' title=''/><author><name>Danny</name><uri>http://www.blogger.com/profile/04967554828613596340</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/11/larq-lucene-arq.html' ref='tag:blogger.com,1999:blog-18002060.post-116336048318288909' source='http://www.blogger.com/feeds/18002060/posts/default/116336048318288909' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-823554985'/><gd:extendedProperty name='blogger.displayTime' value='22:38'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-116978697970873994</id><published>2007-01-26T04:49:00.000Z</published><updated>2007-01-26T04:49:39.710Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Interesting that SPARQL semantics&lt;br&gt;considers the...</title><content type='html'>Interesting that SPARQL semantics&lt;BR/&gt;considers the path of an algebra as&lt;BR/&gt;for TMQL (Topic Maps query language)&lt;BR/&gt;we are doing the same&lt;BR/&gt;&lt;BR/&gt;The situation is for us much easier,&lt;BR/&gt;though, as TMQL is not entailment&lt;BR/&gt;neutral, has closed-world assumption,...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/116429409503210902/comments/default/116978697970873994'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/116429409503210902/comments/default/116978697970873994'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/11/algebra-for-sparql.html?showComment=1169786940000#c116978697970873994' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/11/algebra-for-sparql.html' ref='tag:blogger.com,1999:blog-18002060.post-116429409503210902' source='http://www.blogger.com/feeds/18002060/posts/default/116429409503210902' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1498990290'/><gd:extendedProperty name='blogger.displayTime' value='04:49'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-2317117773453533694</id><published>2007-02-07T13:50:00.000Z</published><updated>2007-02-07T13:50:40.602Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I'm just wondering, what's the point having proper...</title><content type='html'>I'm just wondering, what's the point having property functions, when there are filter functions already? Is that not enough? PFs look a bit confusing, I would.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5633815229444545604/comments/default/2317117773453533694'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5633815229444545604/comments/default/2317117773453533694'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/02/arq-what-next.html?showComment=1170856200000#c2317117773453533694' title=''/><author><name>Martynas</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/02/arq-what-next.html' ref='tag:blogger.com,1999:blog-18002060.post-5633815229444545604' source='http://www.blogger.com/feeds/18002060/posts/default/5633815229444545604' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1829959152'/><gd:extendedProperty name='blogger.displayTime' value='13:50'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-4782654912265700663</id><published>2007-02-07T13:51:00.000Z</published><updated>2007-02-07T13:51:30.277Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>say.</title><content type='html'>say.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5633815229444545604/comments/default/4782654912265700663'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5633815229444545604/comments/default/4782654912265700663'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/02/arq-what-next.html?showComment=1170856260000#c4782654912265700663' title=''/><author><name>Martynas</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/02/arq-what-next.html' ref='tag:blogger.com,1999:blog-18002060.post-5633815229444545604' source='http://www.blogger.com/feeds/18002060/posts/default/5633815229444545604' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1795614445'/><gd:extendedProperty name='blogger.displayTime' value='13:51'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-2525083588654622610</id><published>2007-02-07T13:58:00.000Z</published><updated>2007-02-07T13:58:08.377Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Property functions can bind variables and can calc...</title><content type='html'>Property functions can bind variables and can calculate terms that are not in the base data,  A filter can only accept or reject a solution - it can't set a variable in a solution.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5633815229444545604/comments/default/2525083588654622610'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5633815229444545604/comments/default/2525083588654622610'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/02/arq-what-next.html?showComment=1170856680000#c2525083588654622610' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/02/arq-what-next.html' ref='tag:blogger.com,1999:blog-18002060.post-5633815229444545604' source='http://www.blogger.com/feeds/18002060/posts/default/5633815229444545604' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='13:58'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-155439558339453912</id><published>2007-04-04T17:09:00.000+01:00</published><updated>2007-04-04T17:09:17.636+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Is there a testbed implementation? In Joseki?</title><content type='html'>Is there a testbed implementation? In Joseki?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/6607168567587576974/comments/default/155439558339453912'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/6607168567587576974/comments/default/155439558339453912'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/03/sparqlupdate.html?showComment=1175702940000#c155439558339453912' title=''/><author><name>Aredridel</name><uri>http://www.blogger.com/profile/07614016848483727817</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/03/sparqlupdate.html' ref='tag:blogger.com,1999:blog-18002060.post-6607168567587576974' source='http://www.blogger.com/feeds/18002060/posts/default/6607168567587576974' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2036730036'/><gd:extendedProperty name='blogger.displayTime' value='17:09'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-4994470457928562248</id><published>2007-04-04T17:18:00.000+01:00</published><updated>2007-04-04T17:18:25.267+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>There is a first-pass of an API in ARQ SVN (for AR...</title><content type='html'>There is a first-pass of an API in ARQ SVN (for ARQ2 only) for the language.  Nothing for Joseki yet.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/6607168567587576974/comments/default/4994470457928562248'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/6607168567587576974/comments/default/4994470457928562248'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/03/sparqlupdate.html?showComment=1175703480000#c4994470457928562248' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/03/sparqlupdate.html' ref='tag:blogger.com,1999:blog-18002060.post-6607168567587576974' source='http://www.blogger.com/feeds/18002060/posts/default/6607168567587576974' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='17:18'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-3820142290349893982</id><published>2007-04-10T07:00:00.000+01:00</published><updated>2007-04-10T07:00:31.617+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>DotLisp hasn't had a recent proper release, but wi...</title><content type='html'>DotLisp hasn't had a recent proper release, but with the patches and updates I've mentioned at SourceForge, and have at my &lt;A HREF="http://www.ozemail.com.au/~markhurd/" REL="nofollow"&gt;home page&lt;/A&gt;, it is quite useful for scripting and quickly trying things in .NET v1.0, 1.1 or 2.0, including generics.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/1421332953032439442/comments/default/3820142290349893982'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/1421332953032439442/comments/default/3820142290349893982'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/04/some-lisp-links.html?showComment=1176184800000#c3820142290349893982' title=''/><author><name>Mark Hurd</name><uri>http://www.blogger.com/profile/16628667949663984722</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/04/some-lisp-links.html' ref='tag:blogger.com,1999:blog-18002060.post-1421332953032439442' source='http://www.blogger.com/feeds/18002060/posts/default/1421332953032439442' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-415575642'/><gd:extendedProperty name='blogger.displayTime' value='07:00'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-750547642139189844</id><published>2007-05-29T16:32:00.000+01:00</published><updated>2007-05-29T16:32:26.150+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>another good CL resource is peter seibels &amp;#39;pra...</title><content type='html'>another good CL resource is peter seibels 'practical common lisp' -&gt; &lt;A HREF="http://gigamonkeys.com/book/" REL="nofollow"&gt;http://gigamonkeys.com/book/&lt;/A&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/1421332953032439442/comments/default/750547642139189844'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/1421332953032439442/comments/default/750547642139189844'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/04/some-lisp-links.html?showComment=1180452720000#c750547642139189844' title=''/><author><name>bastian</name><uri>www.lotus-continuum.de</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/04/some-lisp-links.html' ref='tag:blogger.com,1999:blog-18002060.post-1421332953032439442' source='http://www.blogger.com/feeds/18002060/posts/default/1421332953032439442' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-503261822'/><gd:extendedProperty name='blogger.displayTime' value='16:32'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-873049949256920752</id><published>2007-07-28T12:17:00.000+01:00</published><updated>2007-07-28T12:17:07.265+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Nice! It would be good to start seeing various eff...</title><content type='html'>Nice! It would be good to start seeing various efforts to converge into a common syntax; Eric's recent work on &lt;A HREF="http://www.w3.org/2004/10/04-pharmaFederate/" REL="nofollow"&gt;FeDeRate&lt;/A&gt; is worth consideration. He has some neat ideas how performances of queries over distributed graphs could be improved, for example passing partial bindings to each service; and have some syntactic sugar to express that...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8438016288800315387/comments/default/873049949256920752'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8438016288800315387/comments/default/873049949256920752'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/07/basic-federated-sparql-query.html?showComment=1185621420000#c873049949256920752' title=''/><author><name>areggiori</name><uri>http://www.blogger.com/profile/17664279220066029695</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/07/basic-federated-sparql-query.html' ref='tag:blogger.com,1999:blog-18002060.post-8438016288800315387' source='http://www.blogger.com/feeds/18002060/posts/default/8438016288800315387' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-100497676'/><gd:extendedProperty name='blogger.displayTime' value='12:17'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-882040012283714298</id><published>2007-07-28T15:36:00.000+01:00</published><updated>2007-07-28T15:36:48.583+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>FeDeRate does something a bit different, although ...</title><content type='html'>FeDeRate does something a bit different, although related.  More focued on (organizationally) "close" data.&lt;BR/&gt;&lt;BR/&gt;Each database appears as a graph in the SPARQL query and the syntax is can be legal SPARQL.  &lt;A HREF="http://jena.sourceforge.net/SquirrelRDF/" REL="nofollow"&gt;SquirrelRDF&lt;/A&gt; the SQL access for Jena (LDAP as well).&lt;BR/&gt;&lt;BR/&gt;If I understand correctly, the explicit bindings in FeDeRate are not so much for the application writer but to be able to dispatch a query and the solution set.  If there is a protocol step (there isn't in FeDeRate), that would be a good place.  Allows for preparing queries, for example.&lt;BR/&gt;&lt;BR/&gt;&lt;A HREF="http://darq.sf.net/" REL="nofollow"&gt;DARQ &lt;/A&gt; shows that the control of query execution can be done by optimization techniques.  I think it would be good to move the control burden away from the application writer.&lt;BR/&gt;&lt;BR/&gt;This ARQ extension is to access SPARQL endpoints (like linked data).  With a DARQ-style query broker, there would be no need for SERVICE.  The SPARQL algebra needs some remote call operation - SERVICE allows access to it from the query until there is a rewriter/service directory.&lt;BR/&gt;&lt;BR/&gt;In ARQ, the algebra, supports in-line data.  Great for testing :-)&lt;BR/&gt;&lt;BR/&gt;Theer is a huge body of work on this, dating back at least to the '80s.  The work of the &lt;A HREF="http://www.almaden.ibm.com/cs/garlic/" REL="nofollow"&gt;Garlic &lt;/A&gt; project from a while back shows what can be done. One join type they identify is a local index-join; it takes result from the left and iterative evaluates the right.  You do have to be careful it does not change the semantics of the query.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8438016288800315387/comments/default/882040012283714298'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8438016288800315387/comments/default/882040012283714298'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/07/basic-federated-sparql-query.html?showComment=1185633360000#c882040012283714298' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/07/basic-federated-sparql-query.html' ref='tag:blogger.com,1999:blog-18002060.post-8438016288800315387' source='http://www.blogger.com/feeds/18002060/posts/default/8438016288800315387' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='15:36'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-8906059716789278258</id><published>2007-08-01T01:58:00.000+01:00</published><updated>2007-08-01T01:58:40.280+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Good to see!&lt;br&gt;&lt;br&gt;I've only just re-introduced t...</title><content type='html'>Good to see!&lt;BR/&gt;&lt;BR/&gt;I've only just re-introduced this feature into Mulgara (it used to be in TKS), but unfortunately this is all still in our TQL language.  I was thinking it would have to be skipped for our SPARQL implementation (which we have yet to release), but now it looks like we have a template to work to.  Thank you.  :-)&lt;BR/&gt;&lt;BR/&gt;I take it that you can CONSTRUCT new graphs from this too?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8438016288800315387/comments/default/8906059716789278258'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8438016288800315387/comments/default/8906059716789278258'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/07/basic-federated-sparql-query.html?showComment=1185929880000#c8906059716789278258' title=''/><author><name>Quoll</name><uri>http://www.blogger.com/profile/03653112583629043593</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/07/basic-federated-sparql-query.html' ref='tag:blogger.com,1999:blog-18002060.post-8438016288800315387' source='http://www.blogger.com/feeds/18002060/posts/default/8438016288800315387' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1718120156'/><gd:extendedProperty name='blogger.displayTime' value='01:58'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-8253447559417409732</id><published>2007-08-01T09:15:00.000+01:00</published><updated>2007-08-01T09:15:08.242+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes - you can use it with CONSTRUCT.  It's in the ...</title><content type='html'>Yes - you can use it with CONSTRUCT.  It's in the query pattern and the pattern matching and result form are orthogonal.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8438016288800315387/comments/default/8253447559417409732'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8438016288800315387/comments/default/8253447559417409732'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/07/basic-federated-sparql-query.html?showComment=1185956100000#c8253447559417409732' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/07/basic-federated-sparql-query.html' ref='tag:blogger.com,1999:blog-18002060.post-8438016288800315387' source='http://www.blogger.com/feeds/18002060/posts/default/8438016288800315387' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='09:15'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-6511339645834005139</id><published>2007-09-09T01:27:00.000+01:00</published><updated>2007-09-09T01:27:42.919+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This is &lt;em&gt;very&lt;/em&gt; useful. Too bad the syntax i...</title><content type='html'>This is &lt;EM&gt;very&lt;/EM&gt; useful. Too bad the syntax is subtly different from COUNT in &lt;A HREF="http://docs.openlinksw.com/virtuoso/rdfsparqlaggregate.html" REL="nofollow"&gt;Virtuoso&lt;/A&gt; and &lt;A HREF="http://www.informatik.uni-leipzig.de/~auer/publication/sparql-enhancements.pdf" REL="nofollow"&gt;RAP&lt;/A&gt;.&lt;BR/&gt;&lt;BR/&gt;What next? How about expressions in CONSTRUCT?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/6511339645834005139'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/6511339645834005139'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html?showComment=1189297620000#c6511339645834005139' title=''/><author><name>Richard Cyganiak</name><uri>http://www.blogger.com/profile/02190484170646718345</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html' ref='tag:blogger.com,1999:blog-18002060.post-4691605369637965896' source='http://www.blogger.com/feeds/18002060/posts/default/4691605369637965896' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1742644168'/><gd:extendedProperty name='blogger.displayTime' value='01:27'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-7972448955174244765</id><published>2007-09-09T16:34:00.000+01:00</published><updated>2007-09-09T16:34:06.272+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Richard,&lt;br&gt;&lt;br&gt;Such syntax had been discussed a w...</title><content type='html'>Richard,&lt;BR/&gt;&lt;BR/&gt;Such syntax had been discussed a while ago in the WG and ARQ's is one choice of those discussions.  The discussion then had a consensus that without any markers, expressions are a nuisance to deal with when parsings.  SPARQL already uses () for expressions in ORDER BY and FILTER.  This syntax merely reuses that idea.  "GROUP BY (expr)" also works in ARQ.&lt;BR/&gt;&lt;BR/&gt;Without () "?x-?y" is ambiguous.  Is it "?x-?y" or "?x" and "-?y"?&lt;BR/&gt;&lt;BR/&gt;I couldn't get the Virtuoso style to work without going beyond difficulty of parsing that DAWG has avoided (no problem for javacc - but harder for pure LL(1)).&lt;BR/&gt;&lt;BR/&gt;I'd guess that the Virtuoso syntax requires the aggregate to be last else &lt;BR/&gt;"count distinct ?s ?p ?o" is ambiguous. "?o count distinct ?s ?p" seems to be legal by other examples so the meaning of "?o" varies by its position.&lt;BR/&gt;&lt;BR/&gt;The RAP extensions introduces the use of comma in SELECT.  There are other syntax extensions that SPARQL already provides for (eg. SQRT instead of math:sqrt).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/7972448955174244765'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/7972448955174244765'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html?showComment=1189352040000#c7972448955174244765' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html' ref='tag:blogger.com,1999:blog-18002060.post-4691605369637965896' source='http://www.blogger.com/feeds/18002060/posts/default/4691605369637965896' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='16:34'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-8522942687838932140</id><published>2007-09-09T16:53:00.000+01:00</published><updated>2007-09-09T16:53:14.293+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>(splitting out the other point)&lt;br&gt;&lt;br&gt;For express...</title><content type='html'>(splitting out the other point)&lt;BR/&gt;&lt;BR/&gt;For expressions in CONSTRUCT, I wondered about CONSTRUCT-SELECT (that would be quite SQL-like).&lt;BR/&gt;&lt;BR/&gt;But the other way to do it would be to add a clause (after GROUP BY) such as WITH (named expressions) so "WITH (?x+?y AS ?z)".  &lt;BR/&gt;&lt;BR/&gt;I did think of doing this for SELECT expressions. It does make the relationship of aggregates and GROUP BY more natural in my view because the use aggregates in SELECT to have a sortof side-effect of both aggregating (so it's in the GROUP BY) and delivering the value.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/8522942687838932140'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/8522942687838932140'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html?showComment=1189353180000#c8522942687838932140' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html' ref='tag:blogger.com,1999:blog-18002060.post-4691605369637965896' source='http://www.blogger.com/feeds/18002060/posts/default/4691605369637965896' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='16:53'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5754608250343697980</id><published>2007-09-09T18:52:00.000+01:00</published><updated>2007-09-09T18:52:21.515+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Regarding COUNT syntax, I take it that the ARQ syn...</title><content type='html'>Regarding COUNT syntax, I take it that the ARQ syntax is the best. My concern is that there are incompatible implementations around &lt;EM&gt;now&lt;/EM&gt;, and by the time COUNT reaches REC status, they might be firmly entrenched. Some co-ordination now might reduce headaches later on.&lt;BR/&gt;&lt;BR/&gt;Regarding SELECT-CONSTRUCT: This seems a bit counter-intuitive to me, because the only meaningful use of the SELECT clause would be to assign expressions to new variables, and that isn't really about SELECTing but about ... EXTENDing or ASSIGNing or doing something WITH a new variable. Something like CONSTRUCT-WITH-WHERE sounds more friendly to me.&lt;BR/&gt;&lt;BR/&gt;I'm not sure I understand how SELECT, GROUP BY and WITH would interact. If you add CONSTRUCT to the mix, it might get quite complicated for a query writer to track the flow of a variable through the different stages.&lt;BR/&gt;&lt;BR/&gt;I also could imagine expressions embedded directly into the CONSTRUCT clause in place of the usual RDF nodes: CONSTRUCT { ?x foaf:name EXPRESSION(str:concat(?first, " ", ?last)) }</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/5754608250343697980'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/5754608250343697980'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html?showComment=1189360320000#c5754608250343697980' title=''/><author><name>Richard Cyganiak</name><uri>http://www.blogger.com/profile/02190484170646718345</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html' ref='tag:blogger.com,1999:blog-18002060.post-4691605369637965896' source='http://www.blogger.com/feeds/18002060/posts/default/4691605369637965896' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1742644168'/><gd:extendedProperty name='blogger.displayTime' value='18:52'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-3297846919476053311</id><published>2007-09-09T19:04:00.000+01:00</published><updated>2007-09-09T19:04:30.670+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I don't take it that the ARQ syntax is best.&lt;br&gt;&lt;b...</title><content type='html'>I don't take it that the ARQ syntax is best.&lt;BR/&gt;&lt;BR/&gt;We're probably have different esthetic judgments of what works, and have different views on what matters most.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/3297846919476053311'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/3297846919476053311'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html?showComment=1189361040000#c3297846919476053311' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html' ref='tag:blogger.com,1999:blog-18002060.post-4691605369637965896' source='http://www.blogger.com/feeds/18002060/posts/default/4691605369637965896' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='19:04'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-4064984543654729874</id><published>2007-10-28T21:23:00.000Z</published><updated>2007-10-28T21:23:54.127Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Dear Andy,&lt;br&gt;&lt;br&gt;thank you for this simple extens...</title><content type='html'>Dear Andy,&lt;BR/&gt;&lt;BR/&gt;thank you for this simple extension. It is a good starting point for simple integration tasks and sufficient for simple unions of distributed data.&lt;BR/&gt;&lt;BR/&gt;Because of the query modifiers like LIMIT being outside of the WHERE clause it is however not possible to add some offset/limit constraints to the remote sub-query. So it would not be a good idea for queries against large remote datasets.&lt;BR/&gt;&lt;BR/&gt;For many people this is a very good extension (eg. integration of distributed library data with equal schemas)&lt;BR/&gt;&lt;BR/&gt;Comment for others: note, you'll have to explicitly specify the ARQ syntax which extends SPARQL when parsing:&lt;BR/&gt;&lt;BR/&gt;[snip]&lt;BR/&gt;QueryFactory.create(query, Syntax.syntaxARQ);&lt;BR/&gt;[/snip]&lt;BR/&gt;&lt;BR/&gt;cheers&lt;BR/&gt;Andi L.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8438016288800315387/comments/default/4064984543654729874'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8438016288800315387/comments/default/4064984543654729874'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/07/basic-federated-sparql-query.html?showComment=1193606580000#c4064984543654729874' title=''/><author><name>dorgon</name><uri>http://www.blogger.com/profile/17376127263456071923</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/07/basic-federated-sparql-query.html' ref='tag:blogger.com,1999:blog-18002060.post-8438016288800315387' source='http://www.blogger.com/feeds/18002060/posts/default/8438016288800315387' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1141050070'/><gd:extendedProperty name='blogger.displayTime' value='21:23'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-8084970406823933641</id><published>2007-11-06T19:01:00.000Z</published><updated>2007-11-06T19:32:57.643Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'></title><content type='html'>This comment has been removed by the author.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/6607168567587576974/comments/default/8084970406823933641'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/6607168567587576974/comments/default/8084970406823933641'/><author><name>Zach Dwiel</name><uri>http://www.blogger.com/profile/08300067786399868484</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/03/sparqlupdate.html' ref='tag:blogger.com,1999:blog-18002060.post-6607168567587576974' source='http://www.blogger.com/feeds/18002060/posts/default/6607168567587576974' type='text/html'/><gd:extendedProperty name='blogger.contentRemoved' value='true'/><gd:extendedProperty name='blogger.itemClass' value='pid-323470700'/><gd:extendedProperty name='blogger.displayTime' value='19:01'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-8096156105799574992</id><published>2007-11-10T19:57:00.000Z</published><updated>2007-11-10T19:57:34.654Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>dorgon,&lt;br&gt;&lt;br&gt;Good point - it's true LIMIT etc do...</title><content type='html'>dorgon,&lt;BR/&gt;&lt;BR/&gt;Good point - it's true LIMIT etc do not get passed over.  One point: the modifiers of a query can result in different answers to the same subquery.&lt;BR/&gt;&lt;BR/&gt;A general solution would be to combine this with (local) nested SELECTs.  Then a SPARQL query is a "table processing" expression and the sub-SELECT allows general tables.  Combine with SERVICE taking a whole SELECT expression for the remote case.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8438016288800315387/comments/default/8096156105799574992'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8438016288800315387/comments/default/8096156105799574992'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/07/basic-federated-sparql-query.html?showComment=1194724620000#c8096156105799574992' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/07/basic-federated-sparql-query.html' ref='tag:blogger.com,1999:blog-18002060.post-8438016288800315387' source='http://www.blogger.com/feeds/18002060/posts/default/8438016288800315387' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='19:57'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-6947649481432480893</id><published>2007-11-21T20:56:00.000Z</published><updated>2007-11-21T20:56:12.799Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>We've gotten a lot of mileage out of a PREMISE cla...</title><content type='html'>We've gotten a lot of mileage out of a PREMISE clause in our queries. In our hacked version of Joseki, the model is duplicated and the premise statements are added to the copy before the query is made. &lt;BR/&gt;&lt;BR/&gt;It is a big of a performance hit (hey, its research, right?) but it provides a pretty flexible way to do a lot of neat stuff, like querying hypothetical scenarios, enabling certain rules on a per-query basis, or providing a space where a client application can set up certain magic variables available in the query.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/6947649481432480893'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/6947649481432480893'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html?showComment=1195678560000#c6947649481432480893' title=''/><author><name>Ted</name><uri>http://www.edwardbenson.com</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html' ref='tag:blogger.com,1999:blog-18002060.post-4691605369637965896' source='http://www.blogger.com/feeds/18002060/posts/default/4691605369637965896' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1975906693'/><gd:extendedProperty name='blogger.displayTime' value='20:56'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-1606396412088522703</id><published>2007-11-28T17:58:00.000Z</published><updated>2007-11-28T17:58:09.840Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>ted: another way to get the same effect is to quer...</title><content type='html'>ted: another way to get the same effect is to query a union model.  Put the premises in the updated part of the union and the underlying data in the another model in the union.  This avoids copying the data all the time; it may slow the query a little but (for a reserch prototype!) it maybe well be faster than copying the data all the time.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/1606396412088522703'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/1606396412088522703'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html?showComment=1196272680000#c1606396412088522703' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html' ref='tag:blogger.com,1999:blog-18002060.post-4691605369637965896' source='http://www.blogger.com/feeds/18002060/posts/default/4691605369637965896' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='17:58'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-8183135532244278480</id><published>2007-11-30T23:38:00.000Z</published><updated>2007-11-30T23:38:36.885Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Andy,&lt;br&gt;&lt;br&gt;the SERVICE extension is very usef...</title><content type='html'>Hi Andy,&lt;BR/&gt;&lt;BR/&gt;the SERVICE extension is very useful. An additional useful extension for remote datasources would be to allow querying small static RDF documents inside a query similar to SERVICE. While SERVICE points to a SPARQL endpoint, the new feature should simply gather the RDF data from a static URI.&lt;BR/&gt;&lt;BR/&gt;As far as I know this is not possible with NAMED GRAPH, or am I wrong?&lt;BR/&gt;&lt;BR/&gt;Regards,&lt;BR/&gt;Andy</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/8183135532244278480'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/8183135532244278480'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html?showComment=1196465880000#c8183135532244278480' title=''/><author><name>dorgon</name><uri>http://www.blogger.com/profile/17376127263456071923</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html' ref='tag:blogger.com,1999:blog-18002060.post-4691605369637965896' source='http://www.blogger.com/feeds/18002060/posts/default/4691605369637965896' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1141050070'/><gd:extendedProperty name='blogger.displayTime' value='23:38'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5250172697303661399</id><published>2007-12-02T14:55:00.000Z</published><updated>2007-12-02T14:55:30.677Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>dorgon: For a static source for data, FROM NAMED/G...</title><content type='html'>dorgon: For a static source for data, FROM NAMED/GRAPH should do what you want.  To do it dynamically, choosing the source during the query, isn't possible and would need a syntax extension and it's an interesting idea.   Maybe it's a part of some more general - the ability to extend the graph (any graph) being queried so as to walk the GGG.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/5250172697303661399'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4691605369637965896/comments/default/5250172697303661399'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html?showComment=1196607300000#c5250172697303661399' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/09/counting-and-group-by.html' ref='tag:blogger.com,1999:blog-18002060.post-4691605369637965896' source='http://www.blogger.com/feeds/18002060/posts/default/4691605369637965896' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='14:55'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5777021042912911828</id><published>2007-12-05T03:17:00.000Z</published><updated>2007-12-05T03:17:24.381Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>hey Thanks. This is really useful to me.</title><content type='html'>hey Thanks. This is really useful to me.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2075516693155912005/comments/default/5777021042912911828'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2075516693155912005/comments/default/5777021042912911828'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/06/installing-oraclexe.html?showComment=1196824620000#c5777021042912911828' title=''/><author><name>hema</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/06/installing-oraclexe.html' ref='tag:blogger.com,1999:blog-18002060.post-2075516693155912005' source='http://www.blogger.com/feeds/18002060/posts/default/2075516693155912005' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-510744847'/><gd:extendedProperty name='blogger.displayTime' value='03:17'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5616247899541593616</id><published>2007-12-10T22:07:00.000Z</published><updated>2007-12-10T22:07:33.700Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi, I have done the conversion using the IKVM meth...</title><content type='html'>Hi, I have done the conversion using the IKVM method and have posted all required files as well as an example class on my Blog.  I used this article as my original source for how to get Jena up and running in .NET.&lt;BR/&gt;&lt;BR/&gt;see: &lt;A HREF="http://lmdavies.blogspot.com/2007/12/jena-rdf-library-for-net-c.html" REL="nofollow"&gt;Jena RDF library using .NET&lt;/A&gt;&lt;BR/&gt;&lt;BR/&gt;Hope this helps someone,&lt;BR/&gt;&lt;BR/&gt;Lee Davies.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/113968248786457683/comments/default/5616247899541593616'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/113968248786457683/comments/default/5616247899541593616'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/02/progress-with-jenanet.html?showComment=1197324420000#c5616247899541593616' title=''/><author><name>Lee Davies</name><uri>http://www.blogger.com/profile/11764595029391244255</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='24' src='http://photos-a.ak.facebook.com/photos-ak-sf2p/v98/3/117/642660078/n642660078_171368_196.jpg'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/02/progress-with-jenanet.html' ref='tag:blogger.com,1999:blog-18002060.post-113968248786457683' source='http://www.blogger.com/feeds/18002060/posts/default/113968248786457683' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1997344359'/><gd:extendedProperty name='blogger.displayTime' value='22:07'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-2519508039566380875</id><published>2008-02-28T20:53:00.000Z</published><updated>2008-02-28T20:53:03.224Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Your VM approach sounds very intersting... I could...</title><content type='html'>Your VM approach sounds very intersting... I could imagine this would be ideally for semantic desktop stores which usually should use only a fraction of physical memory available but may need more space to store all relevant data... maybe the Gnowsys people should be informed about this (without knowing which store they currently use)...&lt;BR/&gt;&lt;BR/&gt;I think also people at VLDB would be interested in this and in RDF storage generally. I remember that one best paper award 2007 went to an RDF C-Store approach ...&lt;BR/&gt;&lt;BR/&gt;Regards,&lt;BR/&gt;AndyL</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/847156145423014824/comments/default/2519508039566380875'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/847156145423014824/comments/default/2519508039566380875'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb-pt-2.html?showComment=1204231980000#c2519508039566380875' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb-pt-2.html' ref='tag:blogger.com,1999:blog-18002060.post-847156145423014824' source='http://www.blogger.com/feeds/18002060/posts/default/847156145423014824' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1907810918'/><gd:extendedProperty name='blogger.displayTime' value='20:53'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-8610157428367321770</id><published>2008-03-10T15:38:00.000Z</published><updated>2008-03-10T15:38:15.230Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I am curious about the BTree node structure you ar...</title><content type='html'>I am curious about the BTree node structure you are using. Do you intend to explain that anytime in future? I would love to know more.&lt;BR/&gt;&lt;BR/&gt;Last year, I implemented my own Btree based RDF store - maybe we can share our findings.&lt;BR/&gt;&lt;BR/&gt;Sameer.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5202510086940563523/comments/default/8610157428367321770'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5202510086940563523/comments/default/8610157428367321770'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb.html?showComment=1205163480000#c8610157428367321770' title=''/><author><name>Sameer</name><uri>http://www.maggon.com</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb.html' ref='tag:blogger.com,1999:blog-18002060.post-5202510086940563523' source='http://www.blogger.com/feeds/18002060/posts/default/5202510086940563523' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-893217625'/><gd:extendedProperty name='blogger.displayTime' value='15:38'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-4450684850233414365</id><published>2008-03-11T11:39:00.000Z</published><updated>2008-03-11T11:39:04.980Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>sameer - yes, let's share findings.  Have you writ...</title><content type='html'>sameer - yes, let's share findings.  Have you written anything up? Or drop me an email or something and we can chat or skype.&lt;BR/&gt;&lt;BR/&gt;The structure I've used up till now is a node table (which happens to also be a btree but I'd like to try a different structure for that because it does not require the full sortedness that a btree gives), and a triple (or quad) table.  NodeIds are 64bit numbers directly tied to their location in the disk storage.&lt;BR/&gt;&lt;BR/&gt;There is no triple table as such - all the information is in the indexes so nothing needs to be stored as the triple table.  For triples, up to 3 indexes (SPO, POS, OSP) each of which is 3 longs do fixed length, hence easy to use in btrees&lt;BR/&gt;&lt;BR/&gt;There are some engineering-level improvements that can be made to increase the packing density of the datastructures (a sort of b+ / b-tree cross).&lt;BR/&gt;&lt;BR/&gt;But there are also some structural designs I think offer very good prospects (they do on paper at least).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5202510086940563523/comments/default/4450684850233414365'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5202510086940563523/comments/default/4450684850233414365'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb.html?showComment=1205235540000#c4450684850233414365' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb.html' ref='tag:blogger.com,1999:blog-18002060.post-5202510086940563523' source='http://www.blogger.com/feeds/18002060/posts/default/5202510086940563523' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='11:39'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-3803035013758272347</id><published>2008-03-25T18:33:00.000Z</published><updated>2008-03-25T18:33:07.236Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I attempted to use JenaMulgara and got an exceptio...</title><content type='html'>I attempted to use JenaMulgara and got an exception.  It seems that the PatternMulgara.compileTriplePattern  () is getting a list of variables but one of the variables is not on that list.   The var_jr list has one item and it has the label "Y"&lt;BR/&gt;&lt;BR/&gt;We are calling OntModel.getAllClasses() and&lt;BR/&gt;the requesting the first item from the Iterator.&lt;BR/&gt;&lt;BR/&gt;Good luck.&lt;BR/&gt;&lt;BR/&gt;Throwable in JenaDataSourceSetup: &lt;BR/&gt;com.hp.hpl.jena.shared.JenaException: Failed to compile: (http://vitro.mannlib.cornell.edu/ns/vitro/0.7#TabIndividualRelation http://www.w3.org/2000/01/rdf-schema#subClassOf ?X)&lt;BR/&gt; at com.hp.hpl.jena.mulgara.PatternMulgara.compileTriplePattern(PatternMulgara.java:115)&lt;BR/&gt; at com.hp.hpl.jena.mulgara.PatternMulgara.prepareBindings(PatternMulgara.java:78)&lt;BR/&gt; at com.hp.hpl.jena.ontology.impl.OntClassImpl.(OntClassImpl.java:129)&lt;BR/&gt; at com.hp.hpl.jena.ontology.impl.OntClassImpl$1.wrap(OntClassImpl.java:77)&lt;BR/&gt; at com.hp.hpl.jena.enhanced.Personality.newInstance(Personality.java:84)&lt;BR/&gt; at com.hp.hpl.jena.enhanced.EnhGraph.getNodeAs(EnhGraph.java:127)&lt;BR/&gt; at com.hp.hpl.jena.ontology.impl.OntModelImpl$SubjectNodeAs.map1(OntModelImpl.java:3056)&lt;BR/&gt; at com.hp.hpl.jena.util.iterator.Map1Iterator.next(Map1Iterator.java:33)&lt;BR/&gt; at com.hp.hpl.jena.util.iterator.WrappedIterator.next(WrappedIterator.java:68)&lt;BR/&gt; at com.hp.hpl.jena.util.iterator.UniqueExtendedIterator.nextIfNew(UniqueExtendedIterator.java:61)&lt;BR/&gt; at com.hp.hpl.jena.util.iterator.UniqueExtendedIterator.hasNext(UniqueExtendedIterator.java:69)&lt;BR/&gt; at edu.cornell.mannlib.vitro.webapp.dao.jena.WebappDaoFactoryJena.makeFlag2ConvenienceMaps(WebappDaoFactoryJena.java:195)&lt;BR/&gt; at edu.cornell.mannlib.vitro.webapp.dao.jena.WebappDaoFactoryJena.(WebappDaoFactoryJena.java:152)&lt;BR/&gt; at edu.cornell.mannlib.vitro.webapp.dao.jena.WebappDaoFactoryJena.(WebappDaoFactoryJena.java:156)&lt;BR/&gt; at edu.cornell.mannlib.vitro.webapp.servlet.setup.JenaDataSourceSetup.contextInitialized(JenaDataSourceSetup.java:80)&lt;BR/&gt; at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3830)&lt;BR/&gt; at org.apache.catalina.core.StandardContext.start(StandardContext.java:4337)&lt;BR/&gt; at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791)&lt;BR/&gt; at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771)&lt;BR/&gt; at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525)&lt;BR/&gt; at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:920)&lt;BR/&gt; at org.apache.catalina.startup.HostConfig.deployDirectories(HostConfig.java:883)&lt;BR/&gt; at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:492)&lt;BR/&gt; at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1138)&lt;BR/&gt; at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311)&lt;BR/&gt; at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)&lt;BR/&gt; at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053)&lt;BR/&gt; at org.apache.catalina.core.StandardHost.start(StandardHost.java:719)&lt;BR/&gt; at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045)&lt;BR/&gt; at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443)&lt;BR/&gt; at org.apache.catalina.core.StandardService.start(StandardService.java:516)&lt;BR/&gt; at org.apache.catalina.core.StandardServer.start(StandardServer.java:710)&lt;BR/&gt; at org.apache.catalina.startup.Catalina.start(Catalina.java:566)&lt;BR/&gt; at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;BR/&gt; at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;BR/&gt; at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;BR/&gt; at java.lang.reflect.Method.invoke(Method.java:597)&lt;BR/&gt; at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)&lt;BR/&gt; at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2853417911497794313/comments/default/3803035013758272347'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2853417911497794313/comments/default/3803035013758272347'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/01/jena-mulgara-example-of-implementing.html?showComment=1206469980000#c3803035013758272347' title=''/><author><name>bdc34</name><uri>http://www.blogger.com/profile/14122056141645748881</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/01/jena-mulgara-example-of-implementing.html' ref='tag:blogger.com,1999:blog-18002060.post-2853417911497794313' source='http://www.blogger.com/feeds/18002060/posts/default/2853417911497794313' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-445111943'/><gd:extendedProperty name='blogger.displayTime' value='18:33'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-6786875932419258608</id><published>2008-03-27T16:49:00.000Z</published><updated>2008-03-27T16:49:04.305Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for the report!  I've identified why that p...</title><content type='html'>Thanks for the report!  I've identified why that particular case is not handled properly and there's a fix in SVN.  Please let me know if it works for you.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2853417911497794313/comments/default/6786875932419258608'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2853417911497794313/comments/default/6786875932419258608'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/01/jena-mulgara-example-of-implementing.html?showComment=1206636540000#c6786875932419258608' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/01/jena-mulgara-example-of-implementing.html' ref='tag:blogger.com,1999:blog-18002060.post-2853417911497794313' source='http://www.blogger.com/feeds/18002060/posts/default/2853417911497794313' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='16:49'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-1448293735695490982</id><published>2008-03-27T19:01:00.000Z</published><updated>2008-03-27T19:01:44.820Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for the quick response.  Your fix worked an...</title><content type='html'>Thanks for the quick response.  Your fix worked and I can now access a mulgara model from jena.  &lt;BR/&gt;&lt;BR/&gt;What is the difference between the two approaches described on these pages:&lt;BR/&gt;&lt;BR/&gt;http://docs.mulgara.org/integration/jena.html&lt;BR/&gt;&lt;BR/&gt;verses&lt;BR/&gt;&lt;BR/&gt;http://jena.hpl.hp.com/wiki/JenaMulgara&lt;BR/&gt;&lt;BR/&gt;(Other than the first seems to no longer work in jena 2.5.5)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2853417911497794313/comments/default/1448293735695490982'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2853417911497794313/comments/default/1448293735695490982'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/01/jena-mulgara-example-of-implementing.html?showComment=1206644460000#c1448293735695490982' title=''/><author><name>bdc34</name><uri>http://www.blogger.com/profile/14122056141645748881</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/01/jena-mulgara-example-of-implementing.html' ref='tag:blogger.com,1999:blog-18002060.post-2853417911497794313' source='http://www.blogger.com/feeds/18002060/posts/default/2853417911497794313' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-445111943'/><gd:extendedProperty name='blogger.displayTime' value='19:01'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-335362813297290994</id><published>2008-03-27T19:11:00.000Z</published><updated>2008-03-27T19:11:03.085Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The one from Mulgara is very old and, as far as I ...</title><content type='html'>The one from Mulgara is very old and, as far as I know, no longer maintained.  I don't know why it's still in their documentation.  The approach is takes does not allow for efficient access (it's single triple based).&lt;BR/&gt;&lt;BR/&gt;One of the reasons I started this project is to create a Jena-&gt;Mulgara connector that was current.  Because it hooks into Jena as a graph and because it uses Mulgara's APIs, it should be more stable.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2853417911497794313/comments/default/335362813297290994'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2853417911497794313/comments/default/335362813297290994'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/01/jena-mulgara-example-of-implementing.html?showComment=1206645060000#c335362813297290994' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/01/jena-mulgara-example-of-implementing.html' ref='tag:blogger.com,1999:blog-18002060.post-2853417911497794313' source='http://www.blogger.com/feeds/18002060/posts/default/2853417911497794313' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='19:11'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-8105065409900353891</id><published>2008-06-10T10:43:00.000+01:00</published><updated>2008-06-10T10:43:09.300+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>A try/catch/finally without catch-clause is very s...</title><content type='html'>A try/catch/finally without catch-clause is very stupid... :-D See you...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114701866289792772/comments/default/8105065409900353891'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114701866289792772/comments/default/8105065409900353891'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/05/parameterized-queries_07.html?showComment=1213090980000#c8105065409900353891' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/05/parameterized-queries_07.html' ref='tag:blogger.com,1999:blog-18002060.post-114701866289792772' source='http://www.blogger.com/feeds/18002060/posts/default/114701866289792772' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1994191302'/><gd:extendedProperty name='blogger.displayTime' value='10:43'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-315722655740774745</id><published>2008-06-10T12:11:00.000+01:00</published><updated>2008-06-10T12:11:10.936+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The code block after finally gets executed for any...</title><content type='html'>The code block after finally gets executed for any runtime exceptions and also if the code exist normally.  Using finally guarantees that the clean up is done even if an unexpected exception (from another subsystem maybe) happens.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114701866289792772/comments/default/315722655740774745'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114701866289792772/comments/default/315722655740774745'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/05/parameterized-queries_07.html?showComment=1213096260000#c315722655740774745' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/05/parameterized-queries_07.html' ref='tag:blogger.com,1999:blog-18002060.post-114701866289792772' source='http://www.blogger.com/feeds/18002060/posts/default/114701866289792772' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='12:11'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-6328238543891352709</id><published>2008-07-11T18:08:00.000+01:00</published><updated>2008-07-11T18:08:42.121+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I don't understand why you said that LUBM doesn't ...</title><content type='html'>I don't understand why you said that LUBM doesn't have any literals. I am pretty sure it does, but they are not meaningful. For example, for phone numbers you will find something like xx-xx-xx. Is that what you meant?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8678944746641761320/comments/default/6328238543891352709'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8678944746641761320/comments/default/6328238543891352709'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/06/tdb-loading-uniprot.html?showComment=1215796080000#c6328238543891352709' title=''/><author><name>Hany Azzam</name><uri>http://www.blogger.com/profile/08040932753053057286</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/06/tdb-loading-uniprot.html' ref='tag:blogger.com,1999:blog-18002060.post-8678944746641761320' source='http://www.blogger.com/feeds/18002060/posts/default/8678944746641761320' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-753517570'/><gd:extendedProperty name='blogger.displayTime' value='18:08'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5994983313664497716</id><published>2008-07-11T18:15:00.000+01:00</published><updated>2008-07-11T18:15:21.167+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It will be interesting to see how a free-text rich...</title><content type='html'>It will be interesting to see how a free-text rich rdf data can help in returning a meaningful ranked list of results from a sparql query.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/116336048318288909/comments/default/5994983313664497716'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/116336048318288909/comments/default/5994983313664497716'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/11/larq-lucene-arq.html?showComment=1215796500000#c5994983313664497716' title=''/><author><name>Hany Azzam</name><uri>http://www.blogger.com/profile/08040932753053057286</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/11/larq-lucene-arq.html' ref='tag:blogger.com,1999:blog-18002060.post-116336048318288909' source='http://www.blogger.com/feeds/18002060/posts/default/116336048318288909' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-753517570'/><gd:extendedProperty name='blogger.displayTime' value='18:15'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-1974322297655173819</id><published>2008-07-11T18:20:00.000+01:00</published><updated>2008-07-11T18:20:33.761+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I forgot to mention something. I commented before ...</title><content type='html'>I forgot to mention something. I commented before on one of your posts about larq and said that it will be interesting to see if there is a possibility to incorporate some meaningful form of ranking with the free-text search in sparql. I think UniPort data can help in carrying out such an investigation.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8678944746641761320/comments/default/1974322297655173819'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8678944746641761320/comments/default/1974322297655173819'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/06/tdb-loading-uniprot.html?showComment=1215796800000#c1974322297655173819' title=''/><author><name>Hany Azzam</name><uri>http://www.blogger.com/profile/08040932753053057286</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/06/tdb-loading-uniprot.html' ref='tag:blogger.com,1999:blog-18002060.post-8678944746641761320' source='http://www.blogger.com/feeds/18002060/posts/default/8678944746641761320' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-753517570'/><gd:extendedProperty name='blogger.displayTime' value='18:20'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-1369880597382546679</id><published>2008-07-14T11:08:00.000+01:00</published><updated>2008-07-14T11:08:05.438+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hanny - you&amp;#39;re right there are a few literals....</title><content type='html'>Hanny - you're right there are a few literals.  There is one, repeated, for phone numbers and the email ddresses are literal (I think they should be &amp;lt;mailtoi:&amp;gt; URIs.  All the literals are about the same length as the URIs so they don't measure my loading process differently.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8678944746641761320/comments/default/1369880597382546679'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8678944746641761320/comments/default/1369880597382546679'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/06/tdb-loading-uniprot.html?showComment=1216030080000#c1369880597382546679' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/06/tdb-loading-uniprot.html' ref='tag:blogger.com,1999:blog-18002060.post-8678944746641761320' source='http://www.blogger.com/feeds/18002060/posts/default/8678944746641761320' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='11:08'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-2811714669253932477</id><published>2008-07-14T11:11:00.000+01:00</published><updated>2008-07-14T11:11:08.199+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Closest LARQ give you is that the results from Luc...</title><content type='html'>Closest LARQ give you is that the results from Lucene come back in score order and the application can set the minimum score and/or the limit of number of results returned.&lt;BR/&gt;&lt;BR/&gt;This is just building blocks in combining free text and other information into an overall ranking.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/116336048318288909/comments/default/2811714669253932477'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/116336048318288909/comments/default/2811714669253932477'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/11/larq-lucene-arq.html?showComment=1216030260000#c2811714669253932477' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/11/larq-lucene-arq.html' ref='tag:blogger.com,1999:blog-18002060.post-116336048318288909' source='http://www.blogger.com/feeds/18002060/posts/default/116336048318288909' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='11:11'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-1941006121446952481</id><published>2008-07-15T19:34:00.000+01:00</published><updated>2008-07-15T19:34:51.602+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Andy - Looks great!&lt;br&gt;&lt;br&gt;I'm curious, though, if...</title><content type='html'>Andy - Looks great!&lt;BR/&gt;&lt;BR/&gt;I'm curious, though, if this extension interferes with the standard SPARQL syntax. For example, how would the following triple pattern be parsed using the ARQ parser (from the DAWG test syntax-general-07.rq):&lt;BR/&gt;&lt;BR/&gt;&amp;lt;a&gt;&amp;lt;b&gt;+1.0&lt;BR/&gt;&lt;BR/&gt;Is the plus parsed as a path modifier or part of a DECIMAL_POSITIVE? If longest match is preferred, then this query changes meaning under the ARQ parser... is that correct?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3726792826047677220/comments/default/1941006121446952481'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3726792826047677220/comments/default/1941006121446952481'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html?showComment=1216146840000#c1941006121446952481' title=''/><author><name>kasei</name><uri>http://www.blogger.com/profile/07230384994914179921</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html' ref='tag:blogger.com,1999:blog-18002060.post-3726792826047677220' source='http://www.blogger.com/feeds/18002060/posts/default/3726792826047677220' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-608059402'/><gd:extendedProperty name='blogger.displayTime' value='19:34'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-4742200343260721688</id><published>2008-07-15T21:19:00.000+01:00</published><updated>2008-07-15T21:19:03.242+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It's a decimal.  The grammar changed during SPARQL...</title><content type='html'>It's a decimal.  The grammar changed during SPARQL's standardization specifically to make this case work.&lt;BR/&gt;&lt;BR/&gt;The lowest level of the language is tokenization and the longest token wins.  Then the parser sees the tokens:&lt;BR/&gt;&lt;BR/&gt;&amp;lt;a&gt;&lt;BR/&gt;&amp;lt;b&gt;&lt;BR/&gt;+1.0&lt;BR/&gt;&lt;BR/&gt;It also means that "+ 1" or "- 1" (a between sign and digits ) is not a signed number in SPARQL.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3726792826047677220/comments/default/4742200343260721688'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3726792826047677220/comments/default/4742200343260721688'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html?showComment=1216153140000#c4742200343260721688' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html' ref='tag:blogger.com,1999:blog-18002060.post-3726792826047677220' source='http://www.blogger.com/feeds/18002060/posts/default/3726792826047677220' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='21:19'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5037998260438668698</id><published>2008-08-04T00:48:00.000+01:00</published><updated>2008-08-04T00:48:42.937+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Andy,&lt;br&gt;&lt;br&gt;Great! Non-fixed queries will be r...</title><content type='html'>Hi Andy,&lt;BR/&gt;&lt;BR/&gt;Great! Non-fixed queries will be really useful for working with transitive properties in general.&lt;BR/&gt;&lt;BR/&gt;Just curious, is the grammar compatible with bengee's SPARQL Script?&lt;BR/&gt;&lt;BR/&gt;If so, I guess it would be interesting to merge both projects at some point. Scripting with paths is more natural.&lt;BR/&gt;&lt;BR/&gt;Best,&lt;BR/&gt;A</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3726792826047677220/comments/default/5037998260438668698'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3726792826047677220/comments/default/5037998260438668698'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html?showComment=1217807280000#c5037998260438668698' title=''/><author><name>Aldo Bucchi</name><uri>http://www.blogger.com/profile/09705915131256812733</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html' ref='tag:blogger.com,1999:blog-18002060.post-3726792826047677220' source='http://www.blogger.com/feeds/18002060/posts/default/3726792826047677220' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2097540261'/><gd:extendedProperty name='blogger.displayTime' value='00:48'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5083652361424852181</id><published>2008-08-04T08:51:00.000+01:00</published><updated>2008-08-04T08:51:25.823+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The path extension does not change any other part ...</title><content type='html'>The path extension does not change any other part of the grammar and I don't think benjee script extensions change the BGP part of the grammar.  One piece of tidying up in the SPARQL grammar (in the spec) was to make this sort of thing possible (the issue was the "+" for numbers).  So it should be possible to add to other systems.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3726792826047677220/comments/default/5083652361424852181'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3726792826047677220/comments/default/5083652361424852181'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html?showComment=1217836260000#c5083652361424852181' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html' ref='tag:blogger.com,1999:blog-18002060.post-3726792826047677220' source='http://www.blogger.com/feeds/18002060/posts/default/3726792826047677220' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='08:51'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-8841087102149150611</id><published>2009-01-15T05:39:00.000Z</published><updated>2009-01-15T05:39:25.739Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I would like to add one more such extension to the...</title><content type='html'>I would like to add one more such extension to the list - SPARQ2L. This too allows path variables at the predicate position. But the difference with others is that is not a in-memory model. See the details in - lsdis.cs.uga.edu/library/download/fp785-anyanwu1.pdf .&lt;BR/&gt;I am working to integrate this with Jena ARQ and analyze the benefits.&lt;BR/&gt;&lt;BR/&gt;Pradeep</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3726792826047677220/comments/default/8841087102149150611'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3726792826047677220/comments/default/8841087102149150611'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html?showComment=1231997940000#c8841087102149150611' title=''/><author><name>Pradeep</name><uri>http://www.blogger.com/profile/12766247054400429881</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html' ref='tag:blogger.com,1999:blog-18002060.post-3726792826047677220' source='http://www.blogger.com/feeds/18002060/posts/default/3726792826047677220' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1314006453'/><gd:extendedProperty name='blogger.displayTime' value='05:39'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-10248499099163296</id><published>2009-01-15T09:41:00.000Z</published><updated>2009-01-15T09:41:53.626Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Pradeep - thanks for pointing out that work. Is th...</title><content type='html'>Pradeep - thanks for pointing out that work. Is this a continuation of the SPARQLeR, also from U Georgia?&lt;BR/&gt;&lt;BR/&gt;The implementation is in ARQ is not tied to in-memory use.  Functionally, it works with all Jena graph implementations.  In particularly, it works well with &lt;A HREF="http:/jena.sf.net/TDB" REL="nofollow"&gt;TDB&lt;/A&gt; which provides the right access granularity for the path evaluation algorithm.&lt;BR/&gt;&lt;BR/&gt;I look forward to hearing of your integration with ARQ and hope you will publish the code.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3726792826047677220/comments/default/10248499099163296'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3726792826047677220/comments/default/10248499099163296'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html?showComment=1232012460000#c10248499099163296' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html' ref='tag:blogger.com,1999:blog-18002060.post-3726792826047677220' source='http://www.blogger.com/feeds/18002060/posts/default/3726792826047677220' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='09:41'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-2600637336867589390</id><published>2009-01-16T05:17:00.000Z</published><updated>2009-01-16T05:17:41.418Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Andy, I think this and SPARQLer are different work...</title><content type='html'>Andy, I think this and SPARQLer are different works. I ma doing my thesis with the author of SPARQ2L in NCSU.&lt;BR/&gt;Coming back to the memory issue what I meant is Jena's graph model itself is in-memory. i.e it works if the graph model is in memory. Other works like SPARQLer and PSPARQL too use in-memory models. SPARQ2L query engine proposes an idea to store the graph model on disk and query it. If you want, we can discuss more on this through email.&lt;BR/&gt;Additionally, can you please provide some references to me on how to tweak/extend the ARQ? I want to replace the path finding algorithm in ARQ with that of ours to see how it works. I appreciate your time. Thanks you.&lt;BR/&gt;&lt;BR/&gt;Pradeep</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3726792826047677220/comments/default/2600637336867589390'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3726792826047677220/comments/default/2600637336867589390'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html?showComment=1232083020000#c2600637336867589390' title=''/><author><name>Pradeep</name><uri>http://www.blogger.com/profile/12766247054400429881</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html' ref='tag:blogger.com,1999:blog-18002060.post-3726792826047677220' source='http://www.blogger.com/feeds/18002060/posts/default/3726792826047677220' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1314006453'/><gd:extendedProperty name='blogger.displayTime' value='05:17'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-3371367914410430601</id><published>2009-01-16T10:04:00.000Z</published><updated>2009-01-16T10:04:38.965Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Pradeep - Jena provides quite a few graph implemen...</title><content type='html'>Pradeep - Jena provides quite a few graph implementations.  In-memory is not the only kind.  ARQ works with all graph implementations and especially &lt;A HREF="http://jena.sf.net/SDB" REL="nofollow"&gt;SDB&lt;/A&gt; and &lt;A HREF="http://jena.sf.net/TDB" REL="nofollow"&gt;TDB&lt;/A&gt; which are disk-backed persistent stores (SDB is SQL-based and TDB is based on custom indexing).&lt;BR/&gt;&lt;BR/&gt;ARQ has an explicit presentation of the SPARQL algebra - you may wish to look at that, find the path operators, and see where they are evaluated.  The default evaluator can be replaced with a subcslass of the usual one and you then override the evaluation of the path.  (This is what TDB does for basic graph patterns)&lt;BR/&gt;&lt;BR/&gt;Alternatively, you can run a tranformation of the algebra and introduce your own operators. (this is what SDB does for SPARQL OpLefJoin etc)&lt;BR/&gt;&lt;BR/&gt;Or you can do a mixture - one does not exclude the other because they happen at different phases.&lt;BR/&gt;&lt;BR/&gt;You'll want to look at the source code - there are a few source code examples.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3726792826047677220/comments/default/3371367914410430601'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3726792826047677220/comments/default/3371367914410430601'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html?showComment=1232100240000#c3371367914410430601' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/07/arq-property-paths.html' ref='tag:blogger.com,1999:blog-18002060.post-3726792826047677220' source='http://www.blogger.com/feeds/18002060/posts/default/3726792826047677220' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='10:04'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-8193497395215141588</id><published>2009-01-30T07:25:00.000Z</published><updated>2009-01-30T07:25:27.534Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks that was really useful to me.</title><content type='html'>Thanks that was really useful to me.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/6549625354185506284/comments/default/8193497395215141588'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/6549625354185506284/comments/default/8193497395215141588'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/03/two-more-arq-extensions.html?showComment=1233300300000#c8193497395215141588' title=''/><author><name>Brian</name><uri>http://www.blogger.com/profile/11523068261153680503</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/03/two-more-arq-extensions.html' ref='tag:blogger.com,1999:blog-18002060.post-6549625354185506284' source='http://www.blogger.com/feeds/18002060/posts/default/6549625354185506284' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-481091595'/><gd:extendedProperty name='blogger.displayTime' value='07:25'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-7670389571132765248</id><published>2009-01-30T21:10:00.000Z</published><updated>2009-01-30T21:10:38.273Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Andy,&lt;br&gt;Here is my understanding of property f...</title><content type='html'>Hi Andy,&lt;BR/&gt;Here is my understanding of property functions - &lt;BR/&gt;If I have a query like - &lt;BR/&gt;select ?x, ?y&lt;BR/&gt;where {&lt;BR/&gt;?x someProp1 SomeOb1&lt;BR/&gt;?y someProp2 SomeOb2&lt;BR/&gt;?x someLoc:propFunc ?y&lt;BR/&gt;}&lt;BR/&gt;the first and second lines bind x and y and the third line executes the function specified (someLoc:propFunc), instead of a regular pattern matching.&lt;BR/&gt;&lt;BR/&gt;Is my understanding correct?&lt;BR/&gt;Please advice.&lt;BR/&gt;&lt;BR/&gt;Pradeep</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114011505742599747/comments/default/7670389571132765248'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114011505742599747/comments/default/7670389571132765248'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/02/property-functions-in-arq.html?showComment=1233349800000#c7670389571132765248' title=''/><author><name>Pradeep</name><uri>http://www.blogger.com/profile/12766247054400429881</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/02/property-functions-in-arq.html' ref='tag:blogger.com,1999:blog-18002060.post-114011505742599747' source='http://www.blogger.com/feeds/18002060/posts/default/114011505742599747' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1314006453'/><gd:extendedProperty name='blogger.displayTime' value='21:10'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-4756413721153302815</id><published>2009-01-31T19:01:00.000Z</published><updated>2009-01-31T19:01:03.611Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>That's the compuational model.  The execution engi...</title><content type='html'>That's the compuational model.  The execution engine can do anything provided it looks as if it happened that way.  Property functions put a block on triple patterns being moved acorss them - the engine might execute the first two triple patterns in the other order, or concurrently but by thr time the property function is called, you can't tell.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114011505742599747/comments/default/4756413721153302815'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114011505742599747/comments/default/4756413721153302815'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/02/property-functions-in-arq.html?showComment=1233428460000#c4756413721153302815' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/02/property-functions-in-arq.html' ref='tag:blogger.com,1999:blog-18002060.post-114011505742599747' source='http://www.blogger.com/feeds/18002060/posts/default/114011505742599747' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='19:01'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-6902585273450129951</id><published>2009-04-14T03:27:00.000+01:00</published><updated>2009-04-14T03:27:50.068+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Andy. Downloaded and took a look at TBD tonight...</title><content type='html'>Hi Andy. Downloaded and took a look at TBD tonight. I kept thinking incorporating the Hadoop Distributed File System might be a good fit for TBD, helping scaling out large datasets.&lt;br /&gt;&lt;br /&gt;let's image for a moment TDB ran over HDFS. What's your impression on how much of a boost this may give TBD?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5202510086940563523/comments/default/6902585273450129951'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5202510086940563523/comments/default/6902585273450129951'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb.html?showComment=1239676020000#c6902585273450129951' title=''/><author><name>Brian</name><uri>http://www.blogger.com/profile/09847735319112220951</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb.html' ref='tag:blogger.com,1999:blog-18002060.post-5202510086940563523' source='http://www.blogger.com/feeds/18002060/posts/default/5202510086940563523' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-251638730'/><gd:extendedProperty name='blogger.displayTime' value='03:27'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5518720859869173901</id><published>2009-04-14T16:48:00.000+01:00</published><updated>2009-04-14T16:48:47.999+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Brian,

HDFS is certainly interesting and sever...</title><content type='html'>Hi Brian,&lt;br /&gt;&lt;br /&gt;HDFS is certainly interesting and several people have looked at using it with Jena and/or TDB.  TDB relies on indexing rather than streaming data and there are classes of query that streaming can be interesting (aggregation, extracting the data of interest from a large dataset into a graph to be queried).&lt;br /&gt;&lt;br /&gt;Other groups are looking at SPARQL+HADOOP and SPARQL+HBASE.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5202510086940563523/comments/default/5518720859869173901'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5202510086940563523/comments/default/5518720859869173901'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb.html?showComment=1239724080000#c5518720859869173901' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb.html' ref='tag:blogger.com,1999:blog-18002060.post-5202510086940563523' source='http://www.blogger.com/feeds/18002060/posts/default/5202510086940563523' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='16:48'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-2091682146860203630</id><published>2009-04-14T20:36:00.000+01:00</published><updated>2009-04-14T20:36:26.818+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks,

Haven't seen much from any groups looking...</title><content type='html'>Thanks,&lt;br /&gt;&lt;br /&gt;Haven't seen much from any groups looking at SPARQL+HADOOP and SPARQL+HBASE other than heart.  Doesn't seem like that project has much momentum at the moment.&lt;br /&gt;&lt;br /&gt;http://rdf-proj.blogspot.com/2008/11/i-have-started-to-work-with-hbase.html&lt;br /&gt;&lt;br /&gt;http://heart.korea.ac.kr/trac/</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5202510086940563523/comments/default/2091682146860203630'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5202510086940563523/comments/default/2091682146860203630'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb.html?showComment=1239737760000#c2091682146860203630' title=''/><author><name>Brian</name><uri>http://www.blogger.com/profile/09847735319112220951</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb.html' ref='tag:blogger.com,1999:blog-18002060.post-5202510086940563523' source='http://www.blogger.com/feeds/18002060/posts/default/5202510086940563523' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-251638730'/><gd:extendedProperty name='blogger.displayTime' value='20:36'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-3769237668453411702</id><published>2009-09-16T19:01:07.023+01:00</published><updated>2009-09-16T19:01:07.023+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It&amp;#39;s great to hear that Jena will continue to ...</title><content type='html'>It&amp;#39;s great to hear that Jena will continue to be a healthy project.  Best of luck at Talis.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5212287068235135329/comments/default/3769237668453411702'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5212287068235135329/comments/default/3769237668453411702'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2009/09/moving-to-talis.html?showComment=1253124067023#c3769237668453411702' title=''/><author><name>Timothy</name><uri>http://www.blogger.com/profile/01247740098288470211</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2009/09/moving-to-talis.html' ref='tag:blogger.com,1999:blog-18002060.post-5212287068235135329' source='http://www.blogger.com/feeds/18002060/posts/default/5212287068235135329' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-242677593'/><gd:extendedProperty name='blogger.displayTime' value='19:01'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-1507335493101288586</id><published>2009-09-21T20:10:51.701+01:00</published><updated>2009-09-21T20:10:51.701+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Andy - good luck on your move, and relieved that j...</title><content type='html'>Andy - good luck on your move, and relieved that jena will live and thrive! Venkat</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5212287068235135329/comments/default/1507335493101288586'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5212287068235135329/comments/default/1507335493101288586'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2009/09/moving-to-talis.html?showComment=1253560251701#c1507335493101288586' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2009/09/moving-to-talis.html' ref='tag:blogger.com,1999:blog-18002060.post-5212287068235135329' source='http://www.blogger.com/feeds/18002060/posts/default/5212287068235135329' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-392598104'/><gd:extendedProperty name='blogger.displayTime' value='20:10'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-820768698268552476</id><published>2009-09-23T08:01:38.041+01:00</published><updated>2009-09-23T08:01:38.041+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>A bundle of news, this. Best of luck at Talis Andy...</title><content type='html'>A bundle of news, this. Best of luck at Talis Andy!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5212287068235135329/comments/default/820768698268552476'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5212287068235135329/comments/default/820768698268552476'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2009/09/moving-to-talis.html?showComment=1253689298041#c820768698268552476' title=''/><author><name>Jeen</name><uri>http://www.blogger.com/profile/10174232446847159049</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='25' height='32' src='http://www.openrdf.org/people/jeen.jpg'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2009/09/moving-to-talis.html' ref='tag:blogger.com,1999:blog-18002060.post-5212287068235135329' source='http://www.blogger.com/feeds/18002060/posts/default/5212287068235135329' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-841247891'/><gd:extendedProperty name='blogger.displayTime' value='08:01'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5645922383497242125</id><published>2009-11-12T21:54:33.033Z</published><updated>2009-11-12T21:54:33.033Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>My analysis is that the original paper does not co...</title><content type='html'>My analysis is that the original paper does not consider this case.  A half-leaf will less than the minumum could get pulled up.  My thought is to not worry about it then, but to generalize the underflow-on-delete to notice that it&amp;#39;s &lt;i&gt;way&lt;/i&gt; low, not just one low, and pull up as many as it can rather than assuming 1.&lt;br /&gt;&lt;br /&gt;(well, don&amp;#39;t empty the leaf if it totally fills the internal node, since that could lead to alternating inserts/deletes destroying and re-creating the leaf each time.  So leave two in the leaf and two empty in the internal node, in that case)&lt;br /&gt;&lt;br /&gt;I&amp;#39;m wondering about a different issue, and found your post when Googling for T-tree balancing.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2115284086667883569/comments/default/5645922383497242125'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2115284086667883569/comments/default/5645922383497242125'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/12/small-mystery-about-deletion-in-t-trees.html?showComment=1258062873033#c5645922383497242125' title=''/><author><name>John M. Długosz</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/12/small-mystery-about-deletion-in-t-trees.html' ref='tag:blogger.com,1999:blog-18002060.post-2115284086667883569' source='http://www.blogger.com/feeds/18002060/posts/default/2115284086667883569' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1051295884'/><gd:extendedProperty name='blogger.displayTime' value='21:54'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-4920288397781802174</id><published>2009-12-12T08:42:50.612Z</published><updated>2009-12-12T08:42:50.612Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Brian and Andy,

I am also interested using SPARQL...</title><content type='html'>Brian and Andy,&lt;br /&gt;&lt;br /&gt;I am also interested using SPARQL over hadoop. Other than heart project, I have seen two other contributions [1][2] but yet to find open source implementation to run customized experiments.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;[1] https://opencirrus.org/content/sparql-query-over-hadoop-very-large-rdf-dataset&lt;br /&gt;&lt;br /&gt;[2] www.biomanta.org/</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5202510086940563523/comments/default/4920288397781802174'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/5202510086940563523/comments/default/4920288397781802174'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb.html?showComment=1260607370612#c4920288397781802174' title=''/><author><name>Ahmad</name><uri>http://member.acm.org/~ahmad.iqbal</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/02/first-time-out-for-tdb.html' ref='tag:blogger.com,1999:blog-18002060.post-5202510086940563523' source='http://www.blogger.com/feeds/18002060/posts/default/5202510086940563523' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1118696483'/><gd:extendedProperty name='blogger.displayTime' value='08:42'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5829737375200195798</id><published>2010-02-09T17:12:04.605Z</published><updated>2010-02-09T17:12:04.605Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks a lot for your post.
I lost whole working d...</title><content type='html'>Thanks a lot for your post.&lt;br /&gt;I lost whole working day with this issue.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2075516693155912005/comments/default/5829737375200195798'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2075516693155912005/comments/default/5829737375200195798'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/06/installing-oraclexe.html?showComment=1265735524605#c5829737375200195798' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/06/installing-oraclexe.html' ref='tag:blogger.com,1999:blog-18002060.post-2075516693155912005' source='http://www.blogger.com/feeds/18002060/posts/default/2075516693155912005' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-183653079'/><gd:extendedProperty name='blogger.displayTime' value='17:12'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-3650618895861669103</id><published>2010-06-01T16:00:17.726+01:00</published><updated>2010-06-01T16:00:17.726+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>good job. you find new method how to to ARQ</title><content type='html'>good job. you find new method how to to ARQ</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/6549625354185506284/comments/default/3650618895861669103'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/6549625354185506284/comments/default/3650618895861669103'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2008/03/two-more-arq-extensions.html?showComment=1275404417726#c3650618895861669103' title=''/><author><name>phentermine contraindications</name><uri>http://www.buyphenterminecheap.com/phentermine-contraindications.htm</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2008/03/two-more-arq-extensions.html' ref='tag:blogger.com,1999:blog-18002060.post-6549625354185506284' source='http://www.blogger.com/feeds/18002060/posts/default/6549625354185506284' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-720814938'/><gd:extendedProperty name='blogger.displayTime' value='16:00'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-771233010446535107</id><published>2010-06-02T11:34:31.618+01:00</published><updated>2010-06-02T11:34:31.618+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>There is (sort of) another turtle superset that su...</title><content type='html'>There is (sort of) another turtle superset that supports named graphs:&lt;br /&gt;&lt;br /&gt;:s :p :o .&lt;br /&gt;...&lt;br /&gt;GRAPH  {&lt;br /&gt;    :s :p :o .&lt;br /&gt;    ...&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;i.e. a subset of the SPARQL query syntax. Might be useful to align turtle supersets with the SPARQL syntax.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2552263859974412692/comments/default/771233010446535107'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2552263859974412692/comments/default/771233010446535107'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2010/06/standardising-rdf-syntaxes.html?showComment=1275474871618#c771233010446535107' title=''/><author><name>pldms</name><uri>https://me.yahoo.com/pldms</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/openid16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2010/06/standardising-rdf-syntaxes.html' ref='tag:blogger.com,1999:blog-18002060.post-2552263859974412692' source='http://www.blogger.com/feeds/18002060/posts/default/2552263859974412692' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1017365867'/><gd:extendedProperty name='blogger.displayTime' value='11:34'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-213159060714558371</id><published>2010-06-02T11:36:00.046+01:00</published><updated>2010-06-02T11:36:00.046+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>(bah, swallowed my &amp;lt; &amp;gt;)

GRAPH &amp;lt;graph&amp;gt;...</title><content type='html'>(bah, swallowed my &amp;lt; &amp;gt;)&lt;br /&gt;&lt;br /&gt;GRAPH &amp;lt;graph&amp;gt; {&lt;br /&gt;  ...&lt;br /&gt;}</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2552263859974412692/comments/default/213159060714558371'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/2552263859974412692/comments/default/213159060714558371'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2010/06/standardising-rdf-syntaxes.html?showComment=1275474960046#c213159060714558371' title=''/><author><name>pldms</name><uri>https://me.yahoo.com/pldms</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/openid16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2010/06/standardising-rdf-syntaxes.html' ref='tag:blogger.com,1999:blog-18002060.post-2552263859974412692' source='http://www.blogger.com/feeds/18002060/posts/default/2552263859974412692' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1017365867'/><gd:extendedProperty name='blogger.displayTime' value='11:36'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-8437625312849840899</id><published>2010-07-28T19:45:43.764+01:00</published><updated>2010-07-28T19:45:43.764+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Any luck with touchpad features like 2 finger scro...</title><content type='html'>Any luck with touchpad features like 2 finger scrolling?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3639590503256753015/comments/default/8437625312849840899'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3639590503256753015/comments/default/8437625312849840899'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2010/07/ubuntu-on-samsung-n210.html?showComment=1280342743764#c8437625312849840899' title=''/><author><name>John</name><uri>http://www.blogger.com/profile/16795091759805387855</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2010/07/ubuntu-on-samsung-n210.html' ref='tag:blogger.com,1999:blog-18002060.post-3639590503256753015' source='http://www.blogger.com/feeds/18002060/posts/default/3639590503256753015' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-809679523'/><gd:extendedProperty name='blogger.displayTime' value='19:45'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-1938734286521838151</id><published>2010-07-29T10:01:55.895+01:00</published><updated>2010-07-29T10:01:55.895+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Not tried although scrolling using the right hand ...</title><content type='html'>Not tried although scrolling using the right hand edge works for me.  The forums on http://www.voria.org/ are very helpful.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3639590503256753015/comments/default/1938734286521838151'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3639590503256753015/comments/default/1938734286521838151'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2010/07/ubuntu-on-samsung-n210.html?showComment=1280394115895#c1938734286521838151' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2010/07/ubuntu-on-samsung-n210.html' ref='tag:blogger.com,1999:blog-18002060.post-3639590503256753015' source='http://www.blogger.com/feeds/18002060/posts/default/3639590503256753015' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='10:01'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-1476423255206384996</id><published>2010-08-02T17:49:16.285+01:00</published><updated>2010-08-02T17:49:16.285+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>For multitouch in touchpad, I created a script and...</title><content type='html'>For multitouch in touchpad, I created a script and added at startup (system--&amp;gt;preferences--&amp;gt;aplication at starup or similar, I&amp;#39;m using spanish version). It works fine for multitouch.&lt;br /&gt;You can find more info in many forums about this script.&lt;br /&gt;I think that you have to enable Visual Asistance for it works&lt;br /&gt;&lt;br /&gt;#!/bin/bash&lt;br /&gt;# enable multitouch&lt;br /&gt;sleep 5&lt;br /&gt;synclient VertTwoFingerScroll=1&lt;br /&gt;synclient HorizTwoFingerScroll=1&lt;br /&gt;synclient EmulateTwoFingerMinW=5&lt;br /&gt;synclient EmulateTwoFingerMinZ=48</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3639590503256753015/comments/default/1476423255206384996'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3639590503256753015/comments/default/1476423255206384996'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2010/07/ubuntu-on-samsung-n210.html?showComment=1280767756285#c1476423255206384996' title=''/><author><name>istu</name><uri>http://www.blogger.com/profile/12934567414908488481</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2010/07/ubuntu-on-samsung-n210.html' ref='tag:blogger.com,1999:blog-18002060.post-3639590503256753015' source='http://www.blogger.com/feeds/18002060/posts/default/3639590503256753015' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1307655616'/><gd:extendedProperty name='blogger.displayTime' value='17:49'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-4298455111075822326</id><published>2010-10-26T13:48:05.404+01:00</published><updated>2010-10-26T13:48:05.404+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Do you still use your N210? How long lasts the bat...</title><content type='html'>Do you still use your N210? How long lasts the battery using Ubuntu? It would be a great help for me... :-)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3639590503256753015/comments/default/4298455111075822326'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3639590503256753015/comments/default/4298455111075822326'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2010/07/ubuntu-on-samsung-n210.html?showComment=1288097285404#c4298455111075822326' title=''/><author><name>Andreas Streim</name><uri>http://www.blogger.com/profile/05585195689821892449</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2010/07/ubuntu-on-samsung-n210.html' ref='tag:blogger.com,1999:blog-18002060.post-3639590503256753015' source='http://www.blogger.com/feeds/18002060/posts/default/3639590503256753015' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-207653406'/><gd:extendedProperty name='blogger.displayTime' value='13:48'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5591673515567494138</id><published>2010-10-30T19:42:50.466+01:00</published><updated>2010-10-30T19:42:50.466+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Andreas,

The battery life seems quite good - not ...</title><content type='html'>Andreas,&lt;br /&gt;&lt;br /&gt;The battery life seems quite good - not sure exactly how long I get but 6+ hours, and even running Eclipse I get good battery life  (Eclipse is a CPU hog, for compilation and the whole IDE).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3639590503256753015/comments/default/5591673515567494138'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/3639590503256753015/comments/default/5591673515567494138'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2010/07/ubuntu-on-samsung-n210.html?showComment=1288464170466#c5591673515567494138' title=''/><author><name>AndyS</name><uri>http://www.blogger.com/profile/18033124086179105115</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2010/07/ubuntu-on-samsung-n210.html' ref='tag:blogger.com,1999:blog-18002060.post-3639590503256753015' source='http://www.blogger.com/feeds/18002060/posts/default/3639590503256753015' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1465088784'/><gd:extendedProperty name='blogger.displayTime' value='19:42'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-4116254931655706612</id><published>2010-12-10T10:01:33.996Z</published><updated>2010-12-10T10:01:33.996Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Andy,

This is somewhat similar to what the 4s-...</title><content type='html'>Hi Andy,&lt;br /&gt;&lt;br /&gt;This is somewhat similar to what the 4s-import loader does, though it&amp;#39;s not completly tuned for bulk loading, so it works in 5MT stripes. We don&amp;#39;t have a dedicated bulk loader anymore, it wasn&amp;#39;t enough better than the 4s-import one to justify maintaining it (maybe 5% faster).&lt;br /&gt;&lt;br /&gt;We load 5MT-worth of resource data (ID -&amp;gt; resource maps), then 5MT of quads gets sent to the indexes. Using the same trick though of stashing the quad data, then sorting it. We use binary data, mmap() and qsort() IIRC, but the idea is the same.&lt;br /&gt;&lt;br /&gt;The various indexes then do their own internal sort to place the data in logical disk order, to get more write locality before writing. I doubt that matters so much on 2010 hardware though.&lt;br /&gt;&lt;br /&gt;It was done that way because when we wrote that loader, the normal situation would be that we would get at most 10% of the indexes mapped into RAM during normal operation.&lt;br /&gt;&lt;br /&gt;5store does something very different, but it&amp;#39;s optimised for vastly more powerful hardware.&lt;br /&gt;&lt;br /&gt;At the time 4s-import was tuned (2006ish) our data/user ratio was pretty high, so the key economic factor was triples/machine, but now were much more focussed on users/second, so we make sure 100% of the index is in RAM during normal operation.&lt;br /&gt;&lt;br /&gt;- Steve</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8579801307519683733/comments/default/4116254931655706612'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8579801307519683733/comments/default/4116254931655706612'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2010/12/tdb-bulk-loader-version-2.html?showComment=1291975293996#c4116254931655706612' title=''/><author><name>theno23</name><uri>http://theno23.livejournal.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/openid16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2010/12/tdb-bulk-loader-version-2.html' ref='tag:blogger.com,1999:blog-18002060.post-8579801307519683733' source='http://www.blogger.com/feeds/18002060/posts/default/8579801307519683733' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1057608410'/><gd:extendedProperty name='blogger.displayTime' value='10:01'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-7785869438055419416</id><published>2010-12-17T12:41:39.420Z</published><updated>2010-12-17T12:41:39.420Z</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This looks very interesting. I have been trying to...</title><content type='html'>This looks very interesting. I have been trying to load a very large dataset (~3B triples) and I have been observing the sharp fall off when the memmapped files start to fill up. This usually happens around the 350,000,000 statement mark and the load performance  drops quickly from an average of about 70k TPS to about 3-6k TPS. &lt;br /&gt;&lt;br /&gt;I&amp;#39;m now going to have to take loader2 for a spin.&lt;br /&gt;&lt;br /&gt;Ryan-&lt;br /&gt;&lt;a href="http://damnhandy.com" rel="nofollow"&gt;http://damnhandy.com&lt;/a&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8579801307519683733/comments/default/7785869438055419416'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/8579801307519683733/comments/default/7785869438055419416'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2010/12/tdb-bulk-loader-version-2.html?showComment=1292589699420#c7785869438055419416' title=''/><author><name>Ryan</name><uri>http://www.blogger.com/profile/16194852050893741023</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2010/12/tdb-bulk-loader-version-2.html' ref='tag:blogger.com,1999:blog-18002060.post-8579801307519683733' source='http://www.blogger.com/feeds/18002060/posts/default/8579801307519683733' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1300937791'/><gd:extendedProperty name='blogger.displayTime' value='12:41'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-2853623961732948224</id><published>2011-09-13T18:26:47.773+01:00</published><updated>2011-09-13T18:26:47.773+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Link is out of date.  See http://jenawiki.hpl.hp.c...</title><content type='html'>Link is out of date.  See http://jenawiki.hpl.hp.com/wiki/Syntax_Comparison_of_N3_and_Turtle</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4355336082245665237/comments/default/2853623961732948224'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4355336082245665237/comments/default/2853623961732948224'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/08/syntax-comparison-of-n3-and-turtle.html?showComment=1315934807773#c2853623961732948224' title=''/><author><name>Tim Harsch</name><uri>http://www.blogger.com/profile/17541268963103455651</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/08/syntax-comparison-of-n3-and-turtle.html' ref='tag:blogger.com,1999:blog-18002060.post-4355336082245665237' source='http://www.blogger.com/feeds/18002060/posts/default/4355336082245665237' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-260000195'/><gd:extendedProperty name='blogger.displayTime' value='18:26'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-5592029723779420592</id><published>2012-06-29T11:27:28.530+01:00</published><updated>2012-06-29T11:27:28.530+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This is my first visit here. I found some really i...</title><content type='html'>This is my first visit here. I found some really interesting stuff in your blog especially this discussion. Keep up the good work.&lt;a href="http://www.theoverseasinvestor.co.uk/property-for-sale-in-brazil" rel="nofollow"&gt;Property for sale in Brazil&lt;/a&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114011505742599747/comments/default/5592029723779420592'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/114011505742599747/comments/default/5592029723779420592'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2006/02/property-functions-in-arq.html?showComment=1340965648530#c5592029723779420592' title=''/><author><name>The overseas investor</name><uri>http://www.blogger.com/profile/10113158366297617448</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2006/02/property-functions-in-arq.html' ref='tag:blogger.com,1999:blog-18002060.post-114011505742599747' source='http://www.blogger.com/feeds/18002060/posts/default/114011505742599747' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-907164755'/><gd:extendedProperty name='blogger.displayTime' value='11:27'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-4639824868220940003</id><published>2013-04-13T04:35:56.453+01:00</published><updated>2013-04-13T04:35:56.453+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>FYI  http://mail-archives.apache.org/mod_mbox/jena...</title><content type='html'>FYI  http://mail-archives.apache.org/mod_mbox/jena-users/201304.mbox/browser</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4355336082245665237/comments/default/4639824868220940003'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/4355336082245665237/comments/default/4639824868220940003'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2007/08/syntax-comparison-of-n3-and-turtle.html?showComment=1365824156453#c4639824868220940003' title=''/><author><name>Tim Harsch</name><uri>http://www.blogger.com/profile/17541268963103455651</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2007/08/syntax-comparison-of-n3-and-turtle.html' ref='tag:blogger.com,1999:blog-18002060.post-4355336082245665237' source='http://www.blogger.com/feeds/18002060/posts/default/4355336082245665237' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-260000195'/><gd:extendedProperty name='blogger.displayTime' value='04:35'/></entry><entry><id>tag:blogger.com,1999:blog-18002060.post-8640085644526897205</id><published>2013-06-26T23:06:48.314+01:00</published><updated>2013-06-26T23:06:48.314+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Typo?  In &lt;b&gt;{ :list rdf:rest*/rdf:next ?element }...</title><content type='html'>Typo?  In &lt;b&gt;{ :list rdf:rest*/rdf:next ?element }&lt;/b&gt;, shouldn&amp;#39;t &lt;b&gt;rdf:next&lt;/b&gt; be &lt;b&gt;rdf:first&lt;/b&gt;?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/402986767525325932/comments/default/8640085644526897205'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/18002060/402986767525325932/comments/default/8640085644526897205'/><link rel='alternate' type='text/html' href='http://seaborne.blogspot.com/2011/03/updating-rdf-lists-with-sparql.html?showComment=1372284408314#c8640085644526897205' title=''/><author><name>YeshuaAaron</name><uri>http://www.blogger.com/profile/04044518092162154806</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://seaborne.blogspot.com/2011/03/updating-rdf-lists-with-sparql.html' ref='tag:blogger.com,1999:blog-18002060.post-402986767525325932' source='http://www.blogger.com/feeds/18002060/posts/default/402986767525325932' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1750559192'/><gd:extendedProperty name='blogger.displayTime' value='23:06'/></entry></feed>